  04:54:13.714  ----- [2159] ReplicatedStorage.Library.Functions.LevDist -----  -  Editar
  04:54:13.715  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1, p2) -- Line: 9
	local v1 = #p1;
	local v2 = #p2;
	local table1 = {};
	for index1 = 0, v1 do
		table1[index1] = {[0] = index1};
	end
	for index2 = 0, v2 do
		table1[0][index2] = index2;
	end
	for index3 = 1, v1 do
		for index4 = 1, v2 do
			table1[index3][index4] = math.min(table1[index3 - 1][index4] + 1, table1[index3][index4 - 1] + 1, table1[index3 - 1][index4 - 1] + (p1:sub(index3, index3) == p2:sub(index4, index4) and 0 or 1));
		end
	end
	return table1[v1][v2];
end;
  -  Editar
  04:54:13.715    -  Editar
  04:54:13.715  ----- [2160] ReplicatedStorage.Library.Functions.GetNameFromUserIdAsync -----  -  Editar
  04:54:13.715  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Players = game:GetService("Players");
local Library = ReplicatedStorage:WaitForChild("Library");
local u1 = require(Library:WaitForChild("Modules").SmartCache).new(15, 3600, 60, function(p2) -- Line: 15
	--[[
		Upvalues:
			[1] = Players
	--]]
	local PlayerByUserId = Players:GetPlayerByUserId(p2);
	if PlayerByUserId then
		return true, PlayerByUserId.Name;
	end
	local NameFromUserIdAsync = Players:GetNameFromUserIdAsync(p2);
	assert(typeof(NameFromUserIdAsync) == "string");
	assert(#NameFromUserIdAsync > 0 and #NameFromUserIdAsync <= 20 or false);
	return true, NameFromUserIdAsync;
end);
return function(p1) -- Line: 27
	--[[
		Upvalues:
			[1] = u1
	--]]
	return u1.get(p1, nil, true) or u1.get(p1);
end;
  -  Editar
  04:54:13.715    -  Editar
  04:54:13.715  ----- [2161] ReplicatedStorage.Library.Functions.FormatTime -----  -  Editar
  04:54:13.715  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1) -- Line: 3
	p1 = math.round(p1);
	local math_floor_ret = math.floor(p1 / 60);
	local math_floor_ret2 = math.floor(p1 - math_floor_ret * 60);
	local math_floor_ret3 = math.floor(math_floor_ret / 60);
	local v1 = math_floor_ret - math_floor_ret3 * 60;
	return string.format("%02d:%02d:%02d", math_floor_ret3, v1, math_floor_ret2);
end;
  -  Editar
  04:54:13.715    -  Editar
  04:54:13.715  ----- [2162] ReplicatedStorage.Library.Functions.GetDateTable -----  -  Editar
  04:54:13.715  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1) -- Line: 15
	return os.date("*t", p1);
end;
  -  Editar
  04:54:13.715    -  Editar
  04:54:13.716  ----- [2163] ReplicatedStorage.Library.Functions.FormatDate -----  -  Editar
  04:54:13.716  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_GetDateTable = require(script.Parent.GetDateTable);
local m_AddOrdinalSuffix = require(script.Parent.AddOrdinalSuffix);
local table1 = {
	"Jan",
	"Feb",
	"Mar",
	"Apr",
	"May",
	"Jun",
	"Jul",
	"Aug",
	"Sep",
	"Oct",
	"Nov",
	"Dec"
};
return function(p1) -- Line: 11
	--[[
		Upvalues:
			[1] = m_GetDateTable
			[2] = table1
			[3] = m_AddOrdinalSuffix
	--]]
	local v1 = m_GetDateTable((math.floor(p1)));
	return ("%* %*, %*"):format(table1[v1.month], m_AddOrdinalSuffix(v1.day), (tostring(v1.year)));
end;
  -  Editar
  04:54:13.716    -  Editar
  04:54:13.716  ----- [2164] ReplicatedStorage.Library.Functions.Compress -----  -  Editar
  04:54:13.716  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {};
local HttpService = game:GetService("HttpService");
local table2 = {};
local table3 = {};
local u1 = 0;
local bool1 = false;
function table1.Encode(p1) -- Anonymous function at line 44
	--[[
		Upvalues:
			[1] = HttpService
	--]]
	local bool2 = false;
	if type(p1) == "table" then
		local success = pcall(function() -- Line: 51
			--[[
				Upvalues:
					[1] = p1
					[2] = HttpService
					[3] = bool2
			--]]
			p1 = HttpService:JSONEncode(p1);
			bool2 = true;
		end);
		if not success or not p1 then
			warn("Failed to convert table to string");
			return;
		end
	end
	local Encode_ret = Encode(p1);
	if utf8.len(p1) > utf8.len(Encode_ret) then
		return Encode_ret;
	end
	return p1, bool2;
end
function table1.Decode(p2) -- Anonymous function at line 78
	local Decode_ret = Decode(p2);
	if not Decode_ret then
		warn("Failed to decode string");
		return;
	end
	return Decode_ret;
end
function Encode(p3) -- Line: 98
	--[[
		Upvalues:
			[1] = bool1
			[2] = table3
	--]]
	if not bool1 then
		Init();
	end
	local Copy_ret = Copy(table3);
	local v1 = "";
	local table4 = {};
	local v2 = #Copy_ret;
	local u2 = 1;
	local table5 = {};
	local u3 = 0;
	local function listkey(p10) -- Line: 108
		--[[
			Upvalues:
				[1] = Copy_ret
				[2] = u2
				[3] = u3
				[4] = table5
				[5] = table4
		--]]
		local ToBase93_ret = ToBase93(Copy_ret[p10]);
		if u2 < #ToBase93_ret then
			local v18 = table5;
			local v19 = u2;
			u2 = #ToBase93_ret;
			u3 = 0;
			v18[v19] = u3;
		end
		table4[#table4 + 1] = (" "):rep(u2 - #ToBase93_ret) .. ToBase93_ret;
		u3 = u3 + 1;
	end
	p3 = Escape(p3);
	for index1 = 1, #p3 do
		local sub_ret = p3:sub(index1, index1);
		local v8 = v1 .. sub_ret;
		if Copy_ret[v8] then
			v1 = v8;
		else
			local ToBase93_ret3 = ToBase93(Copy_ret[v1]);
			if u2 < #ToBase93_ret3 then
				local v20 = #ToBase93_ret3;
				local num2 = 0;
				table5[u2] = u3;
				u2 = v20;
				u3 = num2;
			end
			table4[#table4 + 1] = (" "):rep(u2 - #ToBase93_ret3) .. ToBase93_ret3;
			u3 = u3 + 1;
			v1 = sub_ret;
			v2 = v2 + 1;
			Copy_ret[v8] = v2;
			Copy_ret[v2] = v8;
		end
	end
	local ToBase93_ret2 = ToBase93(Copy_ret[v1]);
	if u2 < #ToBase93_ret2 then
		local v9 = #ToBase93_ret2;
		local num1 = 0;
		table5[u2] = u3;
		u2 = v9;
		u3 = num1;
	end
	table4[#table4 + 1] = (" "):rep(u2 - #ToBase93_ret2) .. ToBase93_ret2;
	u3 = u3 + 1;
	table5[u2] = u3;
	return table.concat(table5, ",") .. "|" .. table.concat(table4);
end
function Decode(p4) -- Line: 137
	--[[
		Upvalues:
			[1] = bool1
			[2] = table3
	--]]
	if not bool1 then
		Init();
	end
	local Copy_ret2 = Copy(table3);
	local table6 = {};
	local match_ret1, match_ret2 = p4:match("(.-)|(.*)");
	local table7 = {};
	local v3 = 1;
	for v4 in match_ret1:gmatch("%d+") do
		local v10 = #table7 + 1;
		table7[v10] = match_ret2:sub(v3, v3 + v4 * v10 - 1);
		v3 = v3 + v4 * v10;
	end
	local v5 = nil;
	for index2 = 1, #table7 do
		for v11 in table7[index2]:gmatch(("."):rep(index2)) do
			local v15 = Copy_ret2[ToBase10(v11)];
			if v5 then
				if v15 then
					table6[#table6 + 1] = v15;
					Copy_ret2[#Copy_ret2 + 1] = v5 .. v15:sub(1, 1);
				else
					v15 = v5 .. v5:sub(1, 1);
					table6[#table6 + 1] = v15;
					Copy_ret2[#Copy_ret2 + 1] = v15;
				end
			else
				table6[1] = v15;
			end
			v5 = v15;
		end
	end
	return Unescape(table.concat(table6));
end
function Escape(p5) -- Line: 178
	--[[
		Upvalues:
			[1] = table2
	--]]
	return p5:gsub('[%c"\\]', function(p11) -- Line: 179
		--[[
			Upvalues:
				[1] = table2
		--]]
		return "\127" .. table2[p11];
	end);
end
function Unescape(p6) -- Line: 185
	--[[
		Upvalues:
			[1] = table2
	--]]
	return p6:gsub("\127(.)", function(p12) -- Line: 186
		--[[
			Upvalues:
				[1] = table2
		--]]
		return table2[p12];
	end);
end
function Copy(p7) -- Line: 192
	local table8 = {};
	for key1, val1 in pairs(p7) do
		table8[key1] = val1;
	end
	return table8;
end
function ToBase93(p8) -- Line: 201
	--[[
		Upvalues:
			[1] = table3
	--]]
	local v6 = "";
	repeat
		local v12 = p8 % 93;
		v6 = table3[v12] .. v6;
		p8 = (p8 - v12) / 93;
	until p8 == 0;
	return v6;
end
function ToBase10(p9) -- Line: 212
	--[[
		Upvalues:
			[1] = table3
	--]]
	local v7 = 0;
	for index3 = 1, #p9 do
		v7 = v7 + 93 ^ (index3 - 1) * table3[p9:sub(-index3, -index3)];
	end
	return v7;
end
function Init() -- Line: 221
	--[[
		Upvalues:
			[1] = table3
			[2] = u1
			[3] = table2
			[4] = bool1
	--]]
	for index4 = 32, 127 do
		if index4 ~= 34 and index4 ~= 92 then
			local string_char_ret3 = string.char(index4);
			local v16 = table3;
			local v17 = u1;
			table3[string_char_ret3] = u1;
			v16[v17] = string_char_ret3;
			u1 = u1 + 1;
		end
	end
	for index5 = 1, 34 do
		local v13 = ({
			34,
			92,
			127
		})[index5 - 31] or index5;
		local string_char_ret = string.char(v13);
		local string_char_ret2 = string.char(v13 + 31);
		local v14 = table2;
		table2[string_char_ret] = string_char_ret2;
		v14[string_char_ret2] = string_char_ret;
	end
	bool1 = true;
end
return table1;
  -  Editar
  04:54:13.716    -  Editar
  04:54:13.716  ----- [2165] ReplicatedStorage.Library.Functions.ColorDist -----  -  Editar
  04:54:13.716  -- Decompiled with the Synapse X Luau decompiler.

return function(p1, p2)
	return math.clamp((Vector3.new(p1:ToHSV()) - Vector3.new(p2:ToHSV())).Magnitude / 1.7320508075688772, 0, 1);
end;
  -  Editar
  04:54:13.716    -  Editar
  04:54:13.716  ----- [2166] ReplicatedStorage.Library.Functions.ParseAssetId -----  -  Editar
  04:54:13.716  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	local v1 = string.match(p1, "^rbxassetid://(%d+)$") or string.match(p1, "^http://www%.roblox%.com/asset/%?id=(%d+)$");
	if not v1 then
		return nil;
	end;
	return tonumber(v1);
end;
  -  Editar
  04:54:13.716    -  Editar
  04:54:13.716  ----- [2167] ReplicatedStorage.Library.Functions.ReverseArray -----  -  Editar
  04:54:13.717  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	local v1 = #p1;
	for v2 = 1, math.floor(v1 / 2) do
		p1[v2] = p1[v1 - v2 + 1];
		p1[v1 - v2 + 1] = p1[v2];
	end;
	return p1;
end;
  -  Editar
  04:54:13.717    -  Editar
  04:54:13.717  ----- [2168] ReplicatedStorage.Library.Functions.InverseRobloxSaturation -----  -  Editar
  04:54:13.717  -- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.InverseLerp);
return function(p1, p2)
	local l__R__1 = p1.R;
	local l__G__2 = p1.G;
	local l__B__3 = p1.B;
	local v4 = l__R__1 * 0.299 + l__G__2 * 0.587 + l__B__3 * 0.114;
	local v5 = 1 + p2;
	return Color3.new(u1(v4, l__R__1, v5), u1(v4, l__G__2, v5), (u1(v4, l__B__3, v5)));
end;
  -  Editar
  04:54:13.717    -  Editar
  04:54:13.717  ----- [2169] ReplicatedStorage.Library.Functions.InverseLerp -----  -  Editar
  04:54:13.717  -- Decompiled with the Synapse X Luau decompiler.

return function(p1, p2, p3)
	return (p3 - p1) / (p2 - p1);
end;
  -  Editar
  04:54:13.717    -  Editar
  04:54:13.717  ----- [2170] ReplicatedStorage.Library.Functions.RobloxSaturation -----  -  Editar
  04:54:13.717  -- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.Lerp);
return function(p1, p2)
	local l__R__1 = p1.R;
	local l__G__2 = p1.G;
	local l__B__3 = p1.B;
	local v4 = l__R__1 * 0.299 + l__G__2 * 0.587 + l__B__3 * 0.114;
	return Color3.new(u1(v4, l__R__1, 1 + p2), u1(v4, l__G__2, 1 + p2), (u1(v4, l__B__3, 1 + p2)));
end;
  -  Editar
  04:54:13.717    -  Editar
  04:54:13.717  ----- [2171] ReplicatedStorage.Library.Functions.FromHSL -----  -  Editar
  04:54:13.718  -- Decompiled with the Synapse X Luau decompiler.

function hue2rgb(p1, p2, p3)
	if p3 < 0 then
		p3 = p3 + 1;
	end;
	if 1 < p3 then
		p3 = p3 - 1;
	end;
	if p3 < 0.16666666666666666 then
		return p1 + (p2 - p1) * 6 * p3;
	end;
	if p3 < 0.5 then
		return p2;
	end;
	if p3 < 0.6666666666666666 then

	else
		return p1;
	end;
	return p1 + (p2 - p1) * (0.6666666666666666 - p3) * 6;
end;
return function(p4)
	local l__X__1 = p4.X;
	local l__Y__2 = p4.Y;
	local l__Z__3 = p4.Z;
	local v7 
	local v4
	local v5
	local v6
	if l__Y__2 == 0 then
		v4 = l__Z__3;
		v5 = l__Z__3;
		v6 = l__Z__3;
	else
		if l__Z__3 < 0.5 then
			v7 = l__Z__3 * (1 + l__Y__2);
		else
			v7 = l__Z__3 + l__Y__2 - l__Z__3 * l__Y__2;
		end;
		local v8 = 2 * l__Z__3 - v7;
		v4 = hue2rgb(v8, v7, l__X__1 + 0.3333333333333333);
		v5 = hue2rgb(v8, v7, l__X__1);
		v6 = hue2rgb(v8, v7, l__X__1 - 0.3333333333333333);
	end;
	return Color3.new(v4, v5, v6);
end;
  -  Editar
  04:54:13.718    -  Editar
  04:54:13.718  ----- [2172] ReplicatedStorage.Library.Functions.CorrectColor -----  -  Editar
  04:54:13.718  -- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.ColorToVec);
local v2 = require(script.Parent.VecMax);
local u1 = v1(Color3.fromRGB(165, 118, 212)):Max((v1(Color3.fromRGB(123, 201, 225))));
local u2 = v1(Color3.fromRGB(255, 255, 255));
local u3 = require(script.Parent.RobloxSaturation);
local u4 = require(script.Parent.VecToColor);
return function(p1)
	return u4((v1(u3(u4(v1(p1) * 1.5 * u1 * u2 * 1.08), 0.7))));
end;
  -  Editar
  04:54:13.718    -  Editar
  04:54:13.718  ----- [2173] ReplicatedStorage.Library.Functions.Grayscale -----  -  Editar
  04:54:13.718  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	return p1.R * 0.299 + p1.G * 0.587 + p1.B * 0.114;
end;
  -  Editar
  04:54:13.718    -  Editar
  04:54:13.718  ----- [2174] ReplicatedStorage.Library.Functions.HSVToHSL -----  -  Editar
  04:54:13.718  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	local l__Y__1 = p1.Y;
	local l__Z__2 = p1.Z;
	local v3 = (2 - l__Y__1) * l__Z__2 / 2;
	local v4
	if v3 ~= 0 then
		if v3 == 1 then
			v4 = 0;
		elseif v3 < 0.5 then
			v4 = l__Y__1 * l__Z__2 / (v3 * 2);
		else
			v4 = l__Y__1 * l__Z__2 / (2 - v3 * 2);
		end;
	else
		v4 = 0;
	end;
	return Vector3.new(p1.X, v4, v3);
end;
  -  Editar
  04:54:13.719    -  Editar
  04:54:13.719  ----- [2175] ReplicatedStorage.Library.Functions.HSLToHSV -----  -  Editar
  04:54:13.719  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	local l__Y__1 = p1.Y;
	local v2 = (2 * l__Y__1 + p1.Z * (1 - math.abs(2 * l__Y__1 - 1))) / 2;
	local v3 = 0;
	if v2 ~= 0 and v2 ~= 1 then
		v3 = (v2 - l__Y__1) / math.min(v2, 1 - v2);
	end;
	return Vector3.new(p1.X, v3, v2);
end;
  -  Editar
  04:54:13.719    -  Editar
  04:54:13.719  ----- [2176] ReplicatedStorage.Library.Functions.ToHSL -----  -  Editar
  04:54:13.719  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	local l__R__1 = p1.R;
	local l__G__2 = p1.G;
	local l__B__3 = p1.B;
	local v4 = math.max(l__R__1, l__G__2, l__B__3);
	local v5 = math.min(l__R__1, l__G__2, l__B__3);
	local v6 = (v4 + v5) / 2;
	local v7 = nil;
	local v8
	local v9
	if v4 == v5 then
		v8 = 0;
		v9 = 0;
	else
		local v10 = v4 - v5;
		if v6 > 0.5 then
			v9 = v10 / (2 - v4 - v5);
		else
			v9 = v10 / (v4 + v5);
		end;
		if v4 == l__R__1 then
			v7 = (l__G__2 - l__B__3) / v10;
			if l__G__2 < l__B__3 then
				v7 = v7 + 6;
			end;
		elseif v4 == l__G__2 then
			v7 = (l__B__3 - l__R__1) / v10 + 2;
		elseif v4 == l__B__3 then
			v7 = (l__R__1 - l__G__2) / v10 + 4;
		end;
		v8 = v7 / 6;
	end;
	return Vector3.new(v8, v9, v6);
end;
  -  Editar
  04:54:13.719    -  Editar
  04:54:13.719  ----- [2177] ReplicatedStorage.Library.Functions.Leaderstat -----  -  Editar
  04:54:13.719  -- Decompiled with the Synapse X Luau decompiler.

return function(p1, p2, p3)
	local v1 = p1:FindFirstChild("leaderstats");
	if not v1 then
		local v2 = Instance.new("Folder");
		v2.Name = "leaderstats";
		v2.Parent = p1;
		v1 = v2;
	end;
	assert(v1);
	local v3 = v1:FindFirstChild(p2);
	if not v3 then
		local v4 = Instance.new("IntValue");
		v4.Name = p2;
		v4.Value = p3;
		v4.Parent = v1;
		v3 = v4;
	end;
	assert(v3);
	return v3;
end;
  -  Editar
  04:54:13.719    -  Editar
  04:54:13.719  ----- [2178] ReplicatedStorage.Library.Functions.Tracker -----  -  Editar
  04:54:13.719  -- Decompiled with the Synapse X Luau decompiler.

function call(p1, ...)
	p1:track(...);
end;
local u1 = {}
	u1 = {
	new = function()
		return setmetatable({
			objects = {}
		}, {
			__index = u1, 
			__call = call
		});
	end, 
	track = function(p2, ...)
		for v1, v2 in ipairs(table.pack(...)) do
			table.insert(p2.objects, v2);		
		end;
	end, 
	destroy = function(p3)
		p3.objects = {};
		for v4, v5 in ipairs(p3.objects) do
			local v7, v8 = pcall(function()
				if typeof(v5) == "Instance" then
					v5:Destroy();
					return;
				end;
				if typeof(v5) == "RBXScriptConnection" then
					v5:Disconnect();
					return;
				end;
				if typeof(v5) == "function" then
					v5();
				end;
			end);
			if not v7 then
				warn(string.format("[Tracker] Destruction failed for type '%s': %s", typeof(v5), tostring(v8)));
			end;		
		end;
		return true;
	end
};
return function()
	return u1.new();
end;
  -  Editar
  04:54:13.720    -  Editar
  04:54:13.720  ----- [2179] ReplicatedStorage.Library.Functions.PreloadSounds -----  -  Editar
  04:54:13.720  -- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.PreloadAssets);
return function(...)
	local v1 = {};
	for v2, v3 in ipairs((u1(...))) do
		local v5 = Instance.new("Sound");
		v5.SoundId = v3;
		v5.Volume = 0;
		v5.Parent = script;
		v5:Play();
		table.insert(v1, v5);	
	end;
	task.defer(function()
		for v6, v7 in ipairs(v1) do
			v7:Destroy();		
		end;
	end);
end;
  -  Editar
  04:54:13.720    -  Editar
  04:54:13.720  ----- [2180] ReplicatedStorage.Library.Functions.PreloadAssets -----  -  Editar
  04:54:13.720  -- Decompiled with the Synapse X Luau decompiler.

function insert(p1, p2)
	if typeof(p2) == "string" then
		table.insert(p1, p2);
		return;
	end;
	if typeof(p2) == "number" then
		table.insert(p1, (("rbxassetid://%*"):format(p2)));
		return;
	end;
	if typeof(p2) == "table" then

	else
		error((("Unknown type: %*"):format((typeof(p2)))));
		return;
	end;
	for v4, v5 in pairs(p2) do
		insert(p1, v5);	
	end;
end;
local l__ContentProvider__1 = game:GetService("ContentProvider");
return function(...)
	local v6 = {};
	for v7, v8 in ipairs((table.pack(...))) do
		insert(v6, v8);	
	end;
	l__ContentProvider__1:PreloadAsync(v6);
	return v6;
end;
  -  Editar
  04:54:13.720    -  Editar
  04:54:13.720  ----- [2181] ReplicatedStorage.Library.Functions.ClampColor -----  -  Editar
  04:54:13.720  -- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.VecToColor);
local v2 = require(script.Parent.ColorToVec);
local v3 = require(script.Parent.DegNorm);
local u1 = require(script.Parent.Map3);
return function(p1)
	local v4 = Vector3.new(p1.R, p1.G, p1.B);
	local v5 = math.min(0, v4.X, v4.Y, v4.Z);
	local v6 = math.max(1, v4.X, v4.Y, v4.Z);
	local v7 = u1(v4, Vector3.new(v5, v5, v5), Vector3.new(v6, v6, v6), Vector3.zero, Vector3.one);
	return Color3.new(v7.X, v7.Y, v7.Z);
end;
  -  Editar
  04:54:13.720    -  Editar
  04:54:13.720  ----- [2182] ReplicatedStorage.Library.Functions.VecToColorClamped -----  -  Editar
  04:54:13.721  -- Decompiled with the Synapse X Luau decompiler.

return function(p1)
	return Color3.new(math.clamp(p1.X, 0, 1), math.clamp(p1.Y, 0, 1), (math.clamp(p1.Z, 0, 1)));
end;
  -  Editar
  04:54:13.721    -  Editar
  04:54:13.721  ----- [2183] ReplicatedStorage.Library.Functions.SphereCast -----  -  Editar
  04:54:13.721  -- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.DrawRaycast);
function fibonacciSphere(p1, p2)
	local v2 = {};
	if p2 == 1 then
		table.insert(v2, (Vector3.new(0, p1, 0)));
		return v2;
	end;
	local v3 = math.pi * 0.7639320225002102;
	local v4 = p2 - 1;
	local v5 = 0 - 1;
	while true do
		local v6 = 1 - v5 / (p2 - 1) * 2;
		local v7 = math.sqrt(1 - v6 * v6);
		local v8 = v3 * v5;
		table.insert(v2, Vector3.new(math.cos(v8) * v7, v6, math.sin(v8) * v7) * p1);
		if 0 <= 1 then
			if v5 < v4 then

			else
				break;
			end;
		elseif v4 < v5 then

		else
			break;
		end;
		v5 = v5 + 1;	
	end;
	return v2;
end;
function fibonacciSphereTop(p3)
	local v9 = {};
	if p3 == 1 then
		table.insert(v9, (Vector3.new(0, 1, 0)));
		return v9;
	end;
	local v10 = math.pi * 0.7639320225002102;
	local v11 = p3 - 1;
	local v12 = 0 - 1;
	while true do
		local v13 = 1 - v12 / (p3 - 1);
		local v14 = math.sqrt(1 - v13 * v13);
		local v15 = v10 * v12;
		table.insert(v9, (Vector3.new(math.cos(v15) * v14, v13, math.sin(v15) * v14)));
		if 0 <= 1 then
			if v12 < v11 then

			else
				break;
			end;
		elseif v11 < v12 then

		else
			break;
		end;
		v12 = v12 + 1;	
	end;
	return v9;
end;
function nearestPointOnLine(p4, p5, p6)
	return p4 + (p6 - p4):Dot(p5) * p5;
end;
function findNearestIntersection(p7, p8, p9, p10)
	local v16 = p7:Dot(p10);
	if math.abs(v16) <= 1E-06 then
		return nearestPointOnLine(p9, p10, p8);
	end;
	return p9 + p10 * (p7:Dot(p8 - p9) / v16);
end;
return function(p11, p12, p13, p14, p15)
	p14 = math.ceil(p14);
	p14 = math.max(p14, 1);
	if p13.Magnitude <= 1E-06 then
		p14 = 1;
	end;
	if p12.Magnitude <= 1E-06 then
		p14 = 1;
	end;
	local l__Unit__17 = p12.Unit;
	local v18 = CFrame.lookAt(Vector3.zero, l__Unit__17) + p11;
	local v19 = nil;
	for v20, v21 in ipairs((fibonacciSphereTop(p14))) do
		local v23 = v21 * p13;
		local v24 = workspace:Raycast(v18 * Vector3.new(v23.X, v23.Z, -v23.Y), p12, p15);
		if v24 then
			local v25 = findNearestIntersection(v24.Normal, v24.Position, p11, l__Unit__17);
			local l__Magnitude__26 = (v25 - p11).Magnitude;
			if not v19 or l__Magnitude__26 < v19.Distance then
				v19 = {
					Distance = l__Magnitude__26, 
					Instance = v24.Instance, 
					Material = v24.Material, 
					Position = v25, 
					Normal = v24.Normal
				};
			end;
		end;	
	end;
	return v19;
end;
  -  Editar
  04:54:13.721    -  Editar
  04:54:13.721  ----- [2184] ReplicatedStorage.Library.Functions.CompareColor -----  -  Editar
  04:54:13.721  -- Decompiled with the Synapse X Luau decompiler.

function epsRound(p1, p2)
	return math.round(p1 / p2) * p2;
end;
function perceivedBlackness(p3, p4, p5)
	return 1 - p5;
end;
function perceivedWhiteness(p6, p7, p8)
	return p8 * (1 - p7);
end;
function perceivedGrayness(p9, p10, p11)
	return 1 - p10;
end;
function perceivedColorfulness(p12, p13, p14)
	local v1 = 1 - p13;
	return p14 * p13 * math.sqrt(1 - v1 * v1);
end;
function perceivedBrightness(p15, p16, p17)
	local v2 = math.sqrt(p17);
	if p16 < 0.1 then
		v2 = p17;
	end;
	return v2;
end;
local u1 = {
	Black = 0.7, 
	Gray = 0.85, 
	White = 0.9
};
local u2 = {
	Black = 3, 
	Gray = 2, 
	White = 1, 
	Default = 0
};
function perceivedOrder(p18, p19, p20)
	if u1.Black <= perceivedBlackness(p18, p19, p20) then
		return u2.Black;
	end;
	if u1.White <= perceivedWhiteness(p18, p19, p20) then
		return u2.White;
	end;
	if u1.Gray <= perceivedGrayness(p18, p19, p20) then
		return u2.Gray;
	end;
	return u2.Default;
end;
local u3 = require(script.Parent.ClampColor);
local u4 = require(script.Parent.CorrectColor);
local u5 = require(script.Parent.DegDelta);
return function(p21, p22)
	p21 = u3(p21);
	p22 = u3(p22);
	p21 = u4(p21);
	p22 = u4(p22);
	local v3, v4, v5 = p21:ToHSV();
	local v6, v7, v8 = p22:ToHSV();
	local v9 = perceivedOrder(v3, v4, v5);
	local v10 = perceivedOrder(v6, v7, v8);
	if v9 ~= v10 then
		return v9 - v10;
	end;
	local v11 = perceivedColorfulness(v3, v4, v5);
	local v12 = perceivedColorfulness(v6, v7, v8);
	local v13 = 0;
	if v3 ~= v6 then
		v13 = v3 - v6;
	else
		if v11 ~= v12 then
			return -(v11 - v12);
		end;
		if v4 ~= v7 then
			v13 = -(v4 - v7);
		elseif v5 ~= v8 then
			v13 = -(v5 - v8);
		end;
	end;
	local v14 = epsRound(u5(0, v3 * 360) / 360, 0.027777777777777776) - epsRound(u5(0, v6 * 360) / 360, 0.027777777777777776);
	if v14 ~= 0 then
		return v14;
	end;
	local v15 = epsRound(v11, 0.05) - epsRound(v12, 0.05);
	if v15 == 0 then
		return v13;
	end;
	return -v15;
end;
  -  Editar
  04:54:13.721    -  Editar
  04:54:13.721  ----- [2185] ReplicatedStorage.Library.Functions.Recolor -----  -  Editar
  04:54:13.721  -- Decompiled with the Synapse X Luau decompiler.

return function(p1, p2)
	local v1 = Vector3.new(p1:ToHSV());
	local v2 = Vector3.new(p1.R, p1.G, p1.B);
	local v3 = {};
	local v4 = 0;
	for v5, v6 in ipairs(p2) do
		local l__a__8 = v6.a;
		local v9 = 1 - math.clamp((v2 - Vector3.new(l__a__8.R, l__a__8.G, l__a__8.B)).Magnitude / 1.7320508075688772, 0, 1);
		local l__response__10 = v6.response;
		if l__response__10 then
			v9 = math.clamp(l__response__10(v9), 0, 1);
		end;
		if not (v9 <= (v6.threshold or 1E-06)) and v9 == v9 then
			local v11 = v9;
			if v6.weight then
				v11 = v11 * v6.weight;
			end;
			v4 = v4 + v11;
			table.insert(v3, {
				ratio = v9, 
				weight = v11, 
				keypoint = v6
			});
		end;	
	end;
	if not (v4 > 0) then
		return p1;
	end;
	local v12 = Vector3.zero;
	for v13, v14 in ipairs(v3) do
		local l__b__16 = v14.keypoint.b;
		v12 = v12 + (v2 * (1 - v14.ratio) + Vector3.new(l__b__16.R, l__b__16.G, l__b__16.B) * v14.ratio) * v14.weight;	
	end;
	local v17 = v12 / v4;
	return Color3.new(math.clamp(v17.X, 0, 1), math.clamp(v17.Y, 0, 1), (math.clamp(v17.Z, 0, 1)));
end;
  -  Editar
  04:54:13.721    -  Editar
  04:54:13.721  ----- [2186] ReplicatedStorage.Library.Functions.Heartbeat -----  -  Editar
  04:54:13.721  -- Decompiled with the Synapse X Luau decompiler.

local l__RunService__1 = game:GetService("RunService");
return function(p1, p2, p3, p4)
	assert(typeof(p1) == "function");
	if p2 ~= nil then
		assert(typeof(p2) == "number");
		assert(p2 > 0);
		assert(p2 == p2);
	end;
	local v1 = {};
	local u2 = nil;
	local u3 = {};
	function v1.Disconnect(p5)
		if u2 then	
			u2:Disconnect();
			u2 = nil;
		end;
		if #u3 > 0 then
			u3 = {};
			for v2, v3 in ipairs(u3) do
				v3();			
			end;
		end;
	end;
	function v1.IsConnected(p6)
		return u2 ~= nil;
	end;
	function v1.Then(p7, p8)
		assert(typeof(p8) == "function");
		if u2 then
			table.insert(u3, p8);
			return;
		end;
		p8();
	end;
	function v1.Wait(p9)
		while p9:IsConnected() do
			task.wait();		
		end;
	end;
	local u4 = p2 or math.huge;
	local u5 = 0;
	u2 = l__RunService__1.Heartbeat:Connect(function(p10)
		if not p4 then
			p10 = math.min(p10, u4 - u5);
		end;
		u5 = u5 + p10;
		if not p4 then
			u5 = math.min(u5, u4);
		end;
		local v5 = p10;
		local v6 = u5;
		if p3 and u4 ~= math.huge then
			v5 = v5 / u4;
			v6 = v6 / u4;
			if not p4 then
				v5 = math.min(v5, 1 - v6);
				v6 = math.min(v6, 1);
			end;
		end;
		if p1(v5, v6) or u4 <= u5 then
			v1:Disconnect();
		end;
	end);
	return v1;
end;
  -  Editar
  04:54:13.721    -  Editar
  04:54:13.721  ----- [2187] ReplicatedStorage.Library.Functions.FaceSize -----  -  Editar
  04:54:13.722  local function swapYZ(p)
	return Vector3.new(p.Z, p.X, p.Y)
end

local function swapXZ(p)
	return Vector3.new(p.Z, p.Y, p.X)
end

local function swapXY(p)
	return Vector3.new(p.X, p.Y, p.Z)
end

local operations = {
	[Enum.NormalId.Top] = swapYZ,
	[Enum.NormalId.Bottom] = swapYZ,
	[Enum.NormalId.Left] = swapXZ,
	[Enum.NormalId.Right] = swapXZ,
	[Enum.NormalId.Front] = swapXY,
	[Enum.NormalId.Back] = swapXY
}

return function(normalId, vector3)
	local operation = operations[normalId]
	if operation then
		return operation(vector3)
	else
		return vector3
	end
end  -  Editar
  04:54:13.722    -  Editar
  04:54:13.722  ----- [2188] ReplicatedStorage.Library.Variables -----  -  Editar
  04:54:13.722  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Variables
	===========
	A more reasonable implementation of _G which is completely local to _L. Pretty much the same thing as _L.Settings but for variables.
	Yay for readability :)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------|       Top       |--------
local Variables = {}

--------|     Setting     |--------

--------|    Reference    |--------
local isServer = game:GetService("RunService"):IsServer()

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if not isServer then
	--- Platforms
	Variables.Desktop = false
	Variables.Mobile = false
	Variables.Console = false
	Variables.VR = false
	
	-- Device
	Variables.Orientation = nil
	Variables.Portrait = false
	Variables.Landscape = true
	
	--- Chat/Textboxes
	Variables.Chatting = false
	Variables.Typing = false
	
	-- GUI
	Variables.ImportantWindows = {
		[1] = "MerchCodes",
		[2] = "Upgrades",
		[3] = "Inventory",
		[4] = "Golden",
		[5] = "Message",
		[6] = "Rename",
		[7] = "Settings",
		[8] = "Starter",
		[9] = "Trading",
		[10] = "Achievements",
		[11] = "Teleport",
		[12] = "ExclusiveShop",
		[13] = "FusePets",
		[14] = "Rainbow",
		[15] = "TwitterCodes",
		[16] = "EnchantPets",
		[17] = "AutoSettings",
		[18] = "Collection",
		[19] = "Merchant",
		[20] = "VerifyTwitter",
		[21] = "DarkMatter",
		[22] = "SpookyUpgrades",
		[23] = "Bank",
		[24] = "Hoverboards",
		[25] = "Mastery",
		[26] = "FreeGifts",
		[27] = "ServerBoosts",
		[28] = "ListPet",
		[29] = "BoothInventory",
		[30] = "SelectBooth",
		[31] = "BoothCustomize",
		[32] = "TradingPlazaChoice",
		[33] = "FFlags",
		[34] = "ClipboardPopup",
		[35] = "Mailbox",
		[36] = "MailSettings",
		[37] = "PetReward",
		[38] = "LoginRewards",
		[39] = "TradingHistory",
		[40] = "HugeMachine",
		[41] = "Daycare",
		[42] = "AuctionSelect",
		[43] = "BidPet",
		[44] = "AuctionPet",
		[45] = "ReleasePet",
		[46] = "QuestShop",
		[47] = "EvolvePets",
		[48] = "LuckyUpgrades",
		[49] = "Bloomberg",
		[50] = "EventRewards",
		[51] = "YeetUpgrades",
	}
	Variables.ImportantWindowOpened = false
	Variables.Resolution = Vector2.new(1920, 1080)
	Variables.ResolutionScale = 1
	Variables.MessageOpen = false
	Variables.GuiThatWasEnabled = nil
	
	-- Game
	Variables.LoadingWorld = false
	Variables.UsingCannon = false
	Variables.OpeningEgg = 0
	Variables.UsingHoverboard = false
	Variables.Teleporting = false
	Variables.AutoDeleteEnabled = false
	Variables.AutoHatchEnabled = false
	Variables.AutoHatchEggId = nil
	Variables.HoverboardMenuActive = false
	Variables.PetSoundsEnabled = true
	Variables.PickingStarter = false
	Variables.RenamingPet = false
	Variables.ListingPet = false
	Variables.AuctioningPet = false
	Variables.UsingMachine = false
	Variables.Trading = false
	Variables.BankOpen = false
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Variables
  -  Editar
  04:54:13.722    -  Editar
  04:54:13.722  ----- [2189] ReplicatedStorage.Library.Signal -----  -  Editar
  04:54:13.722  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Signal
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local Debug = false

local u1 = {};
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local IsStudio_ret = game:GetService("RunService"):IsStudio();
local IsServer_ret = game:GetService("RunService"):IsServer();
local function _check(_) -- Line: 206
	return true;
end
local function _getName(p1, p2) -- Line: 214
	assert(typeof(p1) == "number");
	assert(typeof(p2) == "string");
	return p2:lower();
end
local table1 = {
	{},
	{}
};
local table2 = {
	"BindableEvent",
	"BindableFunction"
};
local function _get(p3, p4) -- Line: 225
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	local v1 = table1[p3];
	local v2 = v1[p4];
	if not v2 then
		v2 = Instance.new(table2[p3]);
		v2.Parent = script;
		v1[p4] = v2;
	end
	return v2;
end
local function _event(p5) -- Line: 245
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	assert(true);
	assert(typeof(p5) == "string");
	local lower_ret = p5:lower();
	local v3 = table1[1];
	local v4 = v3[lower_ret];
	if not v4 then
		v4 = Instance.new(table2[1]);
		v4.Parent = script;
		v3[lower_ret] = v4;
	end
	return v4;
end
local function _function(p6) -- Line: 246
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	assert(true);
	assert(typeof(p6) == "string");
	local lower_ret2 = p6:lower();
	local v5 = table1[2];
	local v6 = v5[lower_ret2];
	if not v6 then
		v6 = Instance.new(table2[2]);
		v6.Parent = script;
		v5[lower_ret2] = v6;
	end
	return v6;
end
function u1.Fire(p7, ...) -- Line: 249
	--[[
		Upvalues:
			[1] = IsServer_ret
			[2] = u1
			[3] = table1
			[4] = table2
	--]]
	if not true then return end
	p7 = string.lower(p7);
	if not IsServer_ret and p7:lower() ~= "core signal fired" then
		u1.Fire("CORE Signal Fired", p7);
	end
	
	local v7 = p7;
	assert(true);
	assert(typeof(v7) == "string");
	local lower_ret3 = v7:lower();
	if Debug then
		print("Signal Debug .Fire | ".. lower_ret3)
	end
	local v8 = table1[1];
	local v9 = v8[lower_ret3];
	if not v9 then
		v9 = Instance.new(table2[1]);
		v9.Parent = script;
		v8[lower_ret3] = v9;
	end
	local v10 = v9;
	v10:Fire(...);
end
function u1.Fired(p8) -- Line: 260
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	if not true then
		return Instance.new("BindableEvent").Event;
	end
	assert(true);
	assert(typeof(p8) == "string");
	local lower_ret4 = p8:lower();
	if Debug then
		print("Signal Debug .Fired | ".. lower_ret4)
	end
	
	local v11 = table1[1];
	local v12 = v11[lower_ret4];
	if not v12 then
		v12 = Instance.new(table2[1]);
		v12.Parent = script;
		v11[lower_ret4] = v12;
	end
	return v12.Event;
end
function u1.Invoke(p9, ...) -- Line: 265
	--[[
		Upvalues:
			[1] = IsServer_ret
			[2] = u1
			[3] = table1
			[4] = table2
	--]]
	if not true then return end
	if not IsServer_ret and p9:lower() ~= "core signal fired" then
		u1.Fire("CORE Signal Fired", p9);
	end
	assert(true);
	assert(typeof(p9) == "string");
	local lower_ret5 = p9:lower();
	if Debug then
		print("Signal Debug .Invoke | ".. lower_ret5)
	end
	local v13 = table1[2];
	local v14 = v13[lower_ret5];
	if not v14 then
		v14 = Instance.new(table2[2]);
		v14.Parent = script;
		v13[lower_ret5] = v14;
	end
	local v15 = v14;
	return v15:Invoke(...);
end
function u1.Invoked(p10) -- Line: 275
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	if not true then
		return Instance.new("BindableFunction");
	end
	assert(true);
	assert(typeof(p10) == "string");
	local lower_ret6 = p10:lower();
	if Debug then
		print("Signal Debug .Invoked | ".. lower_ret6)
	end
	local v16 = table1[2];
	local v17 = v16[lower_ret6];
	if not v17 then
		v17 = Instance.new(table2[2]);
		v17.Parent = script;
		v16[lower_ret6] = v17;
	end
	return v17;
end
function u1.Get(p11) -- Line: 280
	--[[
		Upvalues:
			[1] = table1
			[2] = table2
	--]]
	if not true then
		return Instance.new("BindableEvent");
	end
	assert(true);
	assert(typeof(p11) == "string");
	local lower_ret7 = p11:lower();
	local v18 = table1[1];
	local v19 = v18[lower_ret7];
	if not v19 then
		v19 = Instance.new(table2[1]);
		v19.Parent = script;
		v18[lower_ret7] = v19;
	end
	return v19;
end
table.freeze(u1);
if game:GetService("RunService"):IsClient() then
	task.spawn(function(p14) -- Line: 290
		local table_clone_ret2 = table.clone(p14);
		setmetatable(table_clone_ret2, nil);
		local v23 = getmetatable(p14);
		if v23 then
			v23 = table.clone(v23);
		end
		local function check(p18, p19) -- Line: 298
			if p18 ~= p19 then
				if typeof(p18) ~= "table" or typeof(p19) ~= "table" then
					return false;
				end
				for key2, val2 in next, p19 do
					if rawget(p18, key2) == val2 then continue end
					return false;
				end
			end
			return true;
		end
		local function _warn(p20) -- Line: 313
			if not pcall(_G.Blunder, Enum.MessageType.MessageWarning, p20) then
				warn(p20);
			end
		end
		while check(getmetatable(p14), v23) and check(p14, table_clone_ret2) do
			task.wait(math.random() * 15 + 1);
		end
		if not pcall(_G.Blunder, Enum.MessageType.MessageWarning, "ExternalModification : Signal") then
			warn("ExternalModification : Signal");
		end
	end, u1);
end
task.spawn(function(p12) -- Line: 330
	--[[
		Upvalues:
			[1] = IsStudio_ret
	--]]
	local v20 = p12();
	local table_clone_ret = table.clone(v20);
	setmetatable(table_clone_ret, nil);
	local v21 = getmetatable(v20);
	if v21 then
		v21 = table.clone(v21);
	end
	local function _compare(p15, p16) -- Line: 339
		if p15 ~= p16 then
			if typeof(p15) ~= "table" or typeof(p16) ~= "table" then
				return false;
			end
			for key1, val1 in next, p16 do
				if rawget(p15, key1) == val1 then continue end
				return false;
			end
		end
		return true;
	end
	local function _warn(p17) -- Line: 354
		--[[
			Upvalues:
				[1] = IsStudio_ret
		--]]
		if IsStudio_ret or not pcall(_G.Blunder, Enum.MessageType.MessageWarning, p17) then
			warn(p17);
		end
	end
	while true do
		local v25 = p12();
		if not _compare(getmetatable(v25), v21) or not _compare(v25, table_clone_ret) then break end
		task.wait(math.random() * 15 + 1);
	end
	if IsStudio_ret or not pcall(_G.Blunder, Enum.MessageType.MessageWarning, "ExternalModification : Signal Env") then
		warn("ExternalModification : Signal Env");
	end
end, function() -- Line: 368
	--[[
		Upvalues:
			[1] = ReplicatedStorage
			[2] = IsStudio_ret
			[3] = IsServer_ret
			[4] = _check
			[5] = _getName
			[6] = _event
			[7] = _function
	--]]
	local table3 = {
		ReplicatedStorage,
		false,
		IsStudio_ret,
		IsServer_ret,
		_check,
		1,
		2,
		_getName,
		_event,
		_function
	};
	return table3;
end);
u1 = (function(p13) -- Line: 384
	return setmetatable({}, {
		__index = function(_, p21) -- __index (Line: 384)
			--[[
				Upvalues:
					[1] = p13
			--]]
			return p13[p21];
		end,
		__newindex = function(_, _, _) -- __newindex (Line: 384)
		end,
		__metatable = {}
	});
end)(u1);
return u1;
  -  Editar
  04:54:13.722    -  Editar
  04:54:13.722  ----- [2190] ReplicatedStorage.Library.Modules -----  -  Editar
  04:54:13.722  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Modules
	===========
	And in-house library of helpful Modules down to things that aren't already
	implemented natively by Roblox like ScaleModel. The Modules individually can be found as children under this module.
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------|       Top       |--------
local Modules = {
	DefaultStats = require(script.DefaultStats),
	FFlags = require(script.FFlags),
	SmartCache = require(script.SmartCache),
	Mutex = require(script.Mutex),
	Random = require(script.Random),
	Promise = require(script.Promise),
	RBTreeList = require(script.RBTreeList),
	LeftistHeap = require(script.LeftistHeap),
	Pets = require(script.Pets),
	Areas = require(script.Areas),
	Daycare = require(script.Daycare)
}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------
local unaddedEntries = ""

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and Modules[module.Name] == nil then
		unaddedEntries = unaddedEntries .. string.format("%s = require(script.%s),\n", module.Name, module.Name)
	end	
end

if #unaddedEntries > 0 then
	warn(string.format("Unadded entries: \n\n%s\n", unaddedEntries))
end

for index, v in pairs(Modules) do
	if not script:FindFirstChild(index) then
		warn(string.format("Unknown entry: %s", tostring(index)))
	end	
end

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and Modules[module.Name] == nil then
		Modules[module.Name] = require(module)
	end	
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Modules
  -  Editar
  04:54:13.722    -  Editar
  04:54:13.722  ----- [2191] ReplicatedStorage.Library.Modules.FFlags -----  -  Editar
  04:54:13.723  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {};
local table2 = {};
local m_Custom = require(script.Custom);
local v1 = 1;
for key1, val1 in pairs(m_Custom) do
	assert(typeof(key1) == "string");
	assert(typeof(val1) == "table");
	local v2 = v1 + (val1.Important and 1000 or 0);
	v1 = v1 + 1;
	local v3 = val1.Name or key1:gsub("[A-Z]", function(p1) -- Line: 35
		return " " .. p1;
	end):gsub("^.", string.upper);
	local t_Default = val1.Default;
	local v4 = val1.Important or false;
	local t_Min = val1.Min;
	local t_Max = val1.Max;
	local v5 = val1.Type;
	if not v5 then
		assert(t_Default ~= nil);
		v5 = typeof(t_Default);
	end
	local v6 = val1.Nullable;
	if v6 == nil then
		if t_Default ~= nil then
			v6 = false;
		else
			v6 = true;
		end
	end
	local v7 = val1.Toggles ~= nil;
	local v8 = val1.Toggles;
	if not v8 then
		v8 = {};
		assert(v8);
		if v5 == "boolean" then
			table.insert(v8, false);
			table.insert(v8, true);
		end
	end
	if not table.find(v8, t_Default) then
		table.insert(v8, t_Default);
	end
	if v6 and not table.find(v8, nil) then
		table.insert(v8, nil);
	end
	local table4 = {
		Order = v2,
		Key = key1,
		Name = v3,
		Type = v5,
		Nullable = v6,
		Default = t_Default,
		Toggles = v8,
		HasToggles = v7,
		Important = v4,
		Min = t_Min,
		Max = t_Max
	};
	table1[key1] = table4;
	table2[key1] = key1;
end
local table3 = {
	Options = table1,
	Keys = table2,
	Admins = {
		[-1] = true,
		[-2] = true,
		[-3] = true,
		[3990026960] = true, 
	}
};
return table3;
  -  Editar
  04:54:13.723    -  Editar
  04:54:13.723  ----- [2192] ReplicatedStorage.Library.Modules.FFlags.Custom -----  -  Editar
  04:54:13.723  local settings = {
	Banks = {
		Default = true,
		Important = true
	},
	Trading = {
		Default = true,
		Important = true
	},
	TradingBooths = {
		Default = true
	},
	UpgradeMachine = {
		Default = true
	},
	GoldenMachine = {
		Default = true
	},
	RainbowMachine = {
		Default = true
	},
	DarkMatterMachine = {
		Default = true
	},
	BoostMachine = {
		Default = true
	},
	FuseMachine = {
		Default = true
	},
	HugeMachine = {
		Default = true
	},
	HardcoreJoining = {
		Default = true
	},
	TradingJoining = {
		Default = true
	},
	RankRewards = {
		Default = true
	},
	VIPRewards = {
		Default = true
	},
	EggOpening = {
		Default = true
	},
	ExclusiveEggs = {
		Default = true
	},
	Purchases = {
		Default = true,
		Important = true
	},
	CoinRewards = {
		Default = true
	},
	DiamondRewards = {
		Default = true
	},
	Lootbags = {
		Default = true
	},
	LuckyBlockRewards = {
		Default = true
	},
	Cannons = {
		Default = true
	},
	Gates = {
		Default = true
	},
	Merchants = {
		Default = true
	},
	Inventory = {
		Default = true
	},
	BankInterest = {
		Default = false
	},
	DistanceChecksEgg = {
		Default = true
	},
	DistanceChecksGate = {
		Default = true
	},
	DistanceChecksInteractable = {
		Default = true
	},
	DistanceChecksCannon = {
		Default = true
	},
	ChristmasSleigh = {
		Default = false
	},
	ChristmasSnowballs = {
		Default = false
	},
	Mailbox = {
		Default = true
	},
	MailboxRefunds = {
		Default = true
	},
	MailboxClaiming = {
		Default = true
	},
	MailboxReject = {
		Default = true
	},
	MailboxSending = {
		Default = true
	},
	MailboxHuges = {
		Default = true
	},
	MailboxTitanics = {
		Default = false
	},
	ChristmasRewards = {
		Default = false
	},
	MerchCodes = {
		Default = true
	},
	Teleporting = {
		Default = true
	},
	TitanicTransactions = {
		Default = true
	},
	BanksDepositTitanic = {
		Default = false
	},
	BanksDepositHuge = {
		Default = true
	},
	BanksDepositGift = {
		Default = true
	},
	BanksDepositDiamonds = {
		Default = true
	},
	AllowNonOwnerAccessBanks = {
		Default = true
	},
	DragDelete = {
		Default = true
	},
	BankDragDelete = {
		Default = true
	},
	InventoryDragDelete = {
		Default = true
	},
	UpdateGift = {
		Default = true
	},
	ExclusiveEggTimer = {
		Default = true
	},
	AllowBankOnNonProduction = {
		Default = false,
		Important = true
	},
	CoinsEvent = {
		Default = 0,
		Toggles = {0, 2, 3, 5, 10, 20, 30, 50},
		Min = 0,
		Max = 50
	},
	LuckEvent = {
		Default = 0,
		Toggles = {0, 2, 3, 5, 10, 20, 30, 50},
		Min = 0,
		Max = 50
	},
	DiamondsEvent = {
		Default = 0,
		Toggles = {0, 2, 3, 5, 10, 20, 30, 50},
		Min = 0,
		Max = 50
	},
	DominusGate = {
		Default = true
	},
	ScavengerClaim = {
		Default = true
	},
	CoolbeansPatch = {
		Default = true
	},
	Daycare = {
		Default = true
	},
	Auction = {
		Default = true
	},
	LazarBeam = {
		Default = true
	},
	DiamondParty = {
		Default = true
	},
	RAP = {
		Default = true
	},
	RAPAuction = {
		Default = true
	},
	CustomJoinFriends = {
		Default = true
	},
	ThanksForPlayingPet = {
		Default = true
	},
	MassiveCometSpawn = {
		Default = true
	},
	MiniCometSpawn = {
		Default = true
	},
	CometEggOpen = {
		Default = true
	},
	GiantRainbowEvent = {
		Default = true
	},
	HugeChefCatPromo = {
		Default = true
	},
	Limit100PetOnCoin = {
		Default = false
	},
	CoinBalancer = {
		Default = true
	},
	AprilPaintballs = {
		Default = true
	},
	InfinitePetPass = {
		Default = false
	},
	EasterEggHuntEvent = {
		Default = true
	},
	Fruit = {
		Default = true
	},
	DiamondBags = {
		Default = true
	},
	ReleasePet = {
		Default = true
	},
	RespawnAfterDeath = {
		Default = true
	},
	MiningSpeedMultiplier = {
		Default = 1
	},
	RojanAPI = {
		Default = true
	},
	Quests = {
		Default = true
	},
	QuestRewards = {
		Default = true
	},
	EvolveMachine = {
		Default = true
	},
	GlobalVote = {
		Default = "Do you like this game?"
	},
	GlobalVoteKey = {
		Default = "1"
	},
	ReturningPlayerPet = {
		Default = true
	},
	Voting = {
		Default = true
	},
	GroupHugeReward = {
		Default = true
	},
	VerifyTwitterLimiter = {
		Default = true
	},
	GlobalTitanicAnnouncements = {
		Default = true
	},
	BoothPublishInterval = {
		Default = 0
	},
	BoothLoadInterval = {
		Default = 0
	},
	BoothAnyPets = {
		Default = false
	},
	BloombergTerminal = {
		Default = true
	},
	BloombergScreenDataSubmission = {
		Default = true
	},
	BloombergScreenSound = {
		Default = true
	},
	BoothPublishForce = {
		Default = false
	},
	DisableBankNearUpdate = {
		Default = true
	},
	WaitForUpdateAlwaysFalse = {
		Default = false
	},
	SandcastleEvent = {
		Default = true
	},
	Events = {
		Default = true
	},
	EventRewards = {
		Default = true
	},
	WaterLauncher = {
		Default = true
	},
	SummerIslandsEvent = {
		Default = true
	},
	ButterflyBaseChance = {
		Default = 5e-07
	},
	RefundNightmare = {
		Default = true
	},
	VisitorGift = {
		Default = true
	},
	VisitorFix = {
		Default = true
	},
	ClawMachine = {
		Default = true
	},
	ClawMachineRewards = {
		Default = true
	},
	TitanicCatBaseChance = {
		Default = 3e-08
	},
	ClawHugeSpawnChance = {
		Default = 0.0001
	},
	Claw50xSpawnChance = {
		Default = 1
	},
	Claw20xSpawnChance = {
		Default = 5
	},
	Claw10xSpawnChance = {
		Default = 10
	},
	Claw1xHugeChance = {
		Default = 0.02
	},
	Claw5xHugeChance = {
		Default = 0.1
	},
	Claw10xHugeChance = {
		Default = 0.2
	},
	Claw20xHugeChance = {
		Default = 0.4
	},
	Claw50xHugeChance = {
		Default = 1
	},
	AnniversaryGiftChance = {
		Default = 0.3
	},
	YeetRewards = {
		Default = true
	},
	AntiAFK = {
		Default = true
	},
	FixHugeAppleCapybara = {
		Default = false
	},
	FixHugeAppleCapybaraNEW = {
		Default = true
	},
	["DiamondPurchasables"] = {
		Default = true;
		Important = true;
	};
}

return settings  -  Editar
  04:54:13.723    -  Editar
  04:54:13.723  ----- [2193] ReplicatedStorage.Library.Modules.Pets -----  -  Editar
  04:54:13.723  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {MAX_OWNER_HISTORY_LENGTH = 2};
function table1.AddOwner(p1, _, p2) -- Line: 168
	--[[
		Upvalues:
			[1] = table1
	--]]
	local v1 = p2.h;
	if not v1 then
		local table2 = {
			n = 0,
			l = {}
		};
		v1 = table2;
		p2.h = table2;
	end
	assert(v1);
	local bool1 = true;
	if #v1.l > 0 and v1.l[1][1] == p1 then
		bool1 = false;
	end
	if bool1 then
		v1.n = v1.n + 1;
		table.insert(v1.l, 1, {
			p1,
			math.floor((os.time()))
		});
	end
	while #v1.l > table1.MAX_OWNER_HISTORY_LENGTH do
		table.remove(v1.l, #v1.l);
	end
end
return table1;
  -  Editar
  04:54:13.723    -  Editar
  04:54:13.723  ----- [2194] ReplicatedStorage.Library.Modules.DefaultStats -----  -  Editar
  04:54:13.723  local isStudio = game:GetService("RunService"):IsStudio()
local allowDeb = true  
local freePassesActive = require(game.ReplicatedStorage.Library.Client.Settings).FreeGamepasses
--
local defaultCurrency = allowDeb and isStudio and 10_000_000_000_000 or 0
local defaultBoosts = allowDeb and isStudio and {["Super Lucky"] = 999, ["Ultra Lucky"] = 999, ["Triple Coins"] = 999, ["Triple Damage"] = 999} or {}

return {
	["Pets"] = {}, 
	PetsEquipped = {}, 
	HardcorePetsEquipped = {}, 
	RidingPet = nil, 
	["Coins"] = defaultCurrency,
	["Diamonds"] = defaultCurrency,
	["Tech Coins"] = defaultCurrency,
	["Fantasy Coins"] = defaultCurrency,
	["Rainbow Coins"] = defaultCurrency,
	["Cartoon Coins"] = defaultCurrency,
	["Gingerbread"] = defaultCurrency,
	["Valentine Hearts"] = defaultCurrency,
	["Clover Coins"] = defaultCurrency,
	["Easter Coins"] = defaultCurrency,
	["Lucky Coins"] = defaultCurrency,
	["Popsicles"] = defaultCurrency,
	["Quest Points"] = defaultCurrency,
	["Stars"] = defaultCurrency,
	["Claw Tokens"] = defaultCurrency,
	["Yeet Coins"] = defaultCurrency,
	["Yeet Orbs"] = defaultCurrency,
	["Yeet Strength"] = defaultCurrency,
	["Paw Tokens"] = 1000000000000000000000000000000000000000000000000000000000,
	SpentPawTokens = 0,
	PurchasedPurchasables = {},
	RAP = 0, 
	GamepassesCompensated = false,
	Fruits = {}, 
	Quests = {}, 
	HardcoreQuests = {}, 
	QuestRewards = {}, 
	Rank = "Noob", 
	RankProgress = 0, 
	RankTimer = 0, 
	MaxSlots = 25, 
	MaxEquipped = 4, 
	World = "Spawn", 
	PositionData = {
		PlayerCFrame = nil, 
		CameraCFrame = nil, 
		CameraFocus = nil
	}, 
	AreasUnlocked = { "Shop", "Town" }, 
	EggsOpened = {}, 
	MasteryUnlocked = false, 
	Mastery = {}, 
	Collection = {}, 
	CollectionTier = 0, 
	MerchantLevel = 1, 
	MerchantSales = 0, 
	DarkMatterSlots = 6, 
	DarkMatterQueue = {}, 
	FreeGiftsRedeemed = {}, 
	FreeGiftsTime = 0, 
	FreeGiftsResetTime = 0, 
	ThanksForPlayingPet = nil, 
	ReturningPlayerPet = nil, 
	CollectedScavenger = {}, 
	ScavengerEggsCollected = {}, 
	HardcoreUnlocked = false, 
	HardcoreTutorial = false, 
	HardcoreCurrency = {
		Coins = defaultCurrency, 
		["Tech Coins"] = defaultCurrency, 
		["Fantasy Coins"] = defaultCurrency, 
		["Rainbow Coins"] = defaultCurrency, 
		["Cartoon Coins"] = defaultCurrency
	}, 
	Hardcore = {
		World = "Spawn", 
		AreasUnlocked = { "Shop", "Town" }, 
		TeleportsUnlocked = {}, 
		EggsOpened = {}, 
		OwnsDominusGate = false, 
		OwnsHackerGate = false, 
		HackerPortalUnlocked = false, 
		HackerPortalProgress = { 0, -1 }, 
		ProgressNotifications = {
			Areas = {}, 
			Eggs = {}, 
			Upgrades = {}
		}, 
		StPatricks2022Quest = { 0, -1 }, 
		Valentines2022Quest = { 0, -1 }, 
		AprilFools2023 = {
			Quest = {
				Progress = 0, 
				Stage = 1
			}
		}
	},
	Sandbox = {
		Coins = 99999999999999999, 
		["Tech Coins"] = 99999999999999999, 
		["Fantasy Coins"] = 99999999999999999, 
		["Rainbow Coins"] = 99999999999999999, 
		["Cartoon Coins"] = 99999999999999999,
		World = "Spawn", 
		AreasUnlocked = { "Shop", "Town" }, 
		TeleportsUnlocked = {}, 
		EggsOpened = {}, 
		OwnsDominusGate = false, 
		OwnsHackerGate = false, 
		HackerPortalUnlocked = false, 
		HackerPortalProgress = { 0, -1 }, 
		ProgressNotifications = {
			Areas = {}, 
			Eggs = {}, 
			Upgrades = {}
		}, 
		StPatricks2022Quest = { 0, -1 }, 
		Valentines2022Quest = { 0, -1 }, 
		AprilFools2023 = {
			Quest = {
				Progress = 0, 
				Stage = 1
			}
		}
	},
	DaycareTier = 0, 
	DaycareQueue = {}, 
	DaycareHardcoreQueue = {}, 
	DaycareLoot = {}, 
	DaycareHardcoreLoot = {}, 
	Settings = {
		Music = 1, 
		SFX = 1, 
		Trading = 1, 
		ShowOtherPets = 1, 
		EggSkip = 1, 
		ShowBoosts = 1, 
		PetsControl = 1, 
		PetSFX = 1, 
		Notifications = 1,
		MountingTitanics = 1
	}, 
	SelectedTradingBooth = nil, 
	TradingBoothStyles = {}, 
	BoothDiamondsEarned = 0, 
	UpdateGifts = {}, 
	Upgrades = {}, 
	Boosts = {}, 
	BoostsInventory = defaultBoosts, 
	Achievements = {}, 
	VIPCooldown = 0, 
	TwitterCodes = {}, 
	OwnsDominusGate = false, 
	TradeHistory2 = {}, 
	MailLog = {}, 
	TeleportsUnlocked = {}, 
	AutoDelete = {}, 
	OwnsOctupleEggs = freePassesActive, 
	AutoHatchSettings = {
		Enabled = true, 
		StopOnFailure = true, 
		TripleEggs = false, 
		OctupleEggs = false, 
		AlwaysKeep = {
			GoldPets = "Exclusive", 
			RainbowPets = "Exclusive", 
			ShinyPets = "Exclusive"
		}
	}, 
	FriendsBoost = 1, 
	OwnsTradingPlaza = false, 
	OwnsHugeMachine = false, 
	Hoverboards = {}, 
	EquippedHoverboard = "", 
	ChristmasEventQuest = {
		Progress = 0, 
		Stage = 1
	}, 
	Christmas2022 = {
		HasPlayedChristmas2022 = false, 
		PresentsFound = {}, 
		ElvesFound = {}, 
		ChristmasEventQuest = {
			Progress = 0, 
			Stage = 1
		}, 
		SantasDoor = false, 
		SantasHardcoreDoor = false
	}, 
	StPatricks2022Quest = { 0, -1 }, 
	Valentines2022Quest = { 0, -1 }, 
	AprilFools2023 = {
		Quest = {
			Progress = 0, 
			Stage = 1
		}
	}, 
	Easter2023 = {
		Participated = false, 
		ParticipatedHardcore = false, 
		LastHunt = nil, 
		FoundEggs = {}, 
		HasGift = false, 
		Time = 0, 
		Quest = { 0, -1 }
	}, 
	OwnsHackerGate = false, 
	HackerPortalUnlocked = false, 
	HackerPortalProgress = { 0, -1 }, 
	AprilFoolsUsed = 0, 
	InfPetsTimeStart = nil, 
	InfPetsEnabled = false, 
	HasAnniversaryGift = false, 
	CaveShinyBoost = false, 
	HasPlayedHalloween2022 = false, 
	HasHalloween2022Gift = false, 
	HalloweenGift2022Time = 0, 
	HalloweenEventQuest2022 = {
		Progress = 0, 
		Stage = 1
	}, 
	ChristmasLoginReward2022 = {
		Stage = 0, 
		LastClaim = nil
	}, 
	PickedStarter = false, 
	TutorialProgress = 0, 
	GroupReward = false, 
	ProgressNotifications = {
		Areas = {}, 
		Eggs = {}, 
		Upgrades = {}
	}, 
	InventoryNotifications = 0, 
	LastUpdateLog = 0, 
	ThanksgivingTime = nil, 
	HugePegasusAlert = false, 
	HugePegasusGiven = false, 
	CometData = {
		LastCometTime = 0,
		JobId = nil
	},
	DiamondMineData = {
		LastDiamondMineTeleport = 0,
		JobId = nil, 
		LastDay = nil,
		Earned = 0
	},
	IsFollowingOnTwitter = false, 
	TwitterUsername = nil, 
	Gamepasses = {}, 
	LastSaveTimestamp = 0, 
	PlayingSession = false, 
	SessionId = nil, 
	SafeSaveToken = nil, 
	LoginTime = nil, 
	Age = 0, 
	LastShopClick = 0,
	RobuxSpent = 0, 
	PaidPlayer = false, 
	HasPlayedBefore = false
};
  -  Editar
  04:54:13.723    -  Editar
  04:54:13.723  ----- [2195] ReplicatedStorage.Library.Modules.SmartCache -----  -  Editar
  04:54:13.723  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local table1 = {new = function(p1, p2, p3, p4) -- new (Line: 15)
	--[[
		Upvalues:
			[1] = RunService
	--]]
	assert(typeof(p1) == "number");
	assert(typeof(p2) == "number");
	assert(typeof(p3) == "number");
	assert(typeof(p4) == "function");
	local table2 = {};
	local bool1 = false;
	local table3 = {};
	function table2.get(p5, p6, p7, ...) -- Anonymous function at line 32
		--[[
			Upvalues:
				[1] = bool1
				[2] = p1
				[3] = table3
				[4] = p4
		--]]
		assert(p5 ~= nil);
		if p6 ~= nil then
			assert(typeof(p6) == "number");
			assert(p6 == p6);
			assert(p6 >= 0);
		end
		assert(p7 == nil and true or typeof(p7) == "boolean");
		assert(not bool1);
		local v1 = p6 or p1;
		local u2 = table3[p5];
		if not u2 then
			local table4 = {usedTimestamp = os.clock()};
			u2 = table4;
			table3[p5] = table4;
		else
			u2.usedTimestamp = os.clock();
		end
		if not p7 and (not u2.executeTimestamp or os.clock() - u2.executeTimestamp >= v1) then
			if not u2.executing then
				u2.executing = true;
				local os_clock_ret = nil;
				local success, pcall_ret2 = pcall(function(...) -- Line: 71
					--[[
						Upvalues:
							[1] = p4
							[2] = p5
							[3] = os_clock_ret
							[4] = u2
					--]]
					local v3, v4 = p4(p5, ...);
					if v3 then
						os_clock_ret = os.clock();
						assert(os_clock_ret);
						u2.valueTimestamp = os_clock_ret;
						u2.value = v4;
					end
				end, ...);
				if not os_clock_ret then
					os_clock_ret = os.clock();
				end
				assert(os_clock_ret);
				u2.executeTimestamp = os_clock_ret;
				u2.usedTimestamp = os_clock_ret;
				u2.executing = false;
				if not success then
					warn((("[Bank] SmartCache.get(%*, %*, %*, ...) failed: %*"):format(p5, v1, p7, (tostring(pcall_ret2)))));
				end
			else
				repeat
					task.wait();
				until u2.executing;
				u2.usedTimestamp = os.clock();
			end
		end
		return u2.value;
	end
	function table2.clear(p8) -- Anonymous function at line 104
		--[[
			Upvalues:
				[1] = bool1
				[2] = table3
		--]]
		assert(p8 ~= nil);
		assert(not bool1);
		table3[p8] = nil;
	end
	function table2.set(p9, p10, p11) -- Anonymous function at line 115
		--[[
			Upvalues:
				[1] = bool1
				[2] = table3
		--]]
		assert(p9 ~= nil);
		assert(not bool1);
		local os_clock_ret2 = os.clock();
		local v2 = table3[p9];
		if not v2 then
			local table5 = {usedTimestamp = os_clock_ret2};
			v2 = table5;
			table3[p9] = table5;
		else
			v2.usedTimestamp = os_clock_ret2;
		end
		if not p11 then
			v2.executeTimestamp = os_clock_ret2;
			v2.valueTimestamp = os_clock_ret2;
		end
		v2.value = p10;
	end
	function table2.gc() -- Anonymous function at line 144
		--[[
			Upvalues:
				[1] = bool1
				[2] = table3
				[3] = p2
		--]]
		if bool1 then return end
		local os_clock_ret3 = os.clock();
		for key1, val1 in pairs(table3) do
			if val1.executing or p2 > os_clock_ret3 - val1.usedTimestamp then continue end
			table3[key1] = nil;
		end
	end
	local Connect_ret = nil;
	local u1 = math.random() * p3;
	Connect_ret = RunService.Heartbeat:Connect(function(p12) -- Line: 159
		--[[
			Upvalues:
				[1] = bool1
				[2] = Connect_ret
				[3] = u1
				[4] = p3
				[5] = table2
		--]]
		if bool1 then
			if Connect_ret then
				Connect_ret:Disconnect();
			end
			return;
		end
		u1 = u1 + p12;
		if p3 <= u1 then
			u1 = 0;
			table2.gc();
		end
	end);
	function table2.destroy() -- Anonymous function at line 173
		--[[
			Upvalues:
				[1] = bool1
				[2] = Connect_ret
		--]]
		if bool1 then return end
		bool1 = true;
		if Connect_ret then
			Connect_ret:Disconnect();
		end
	end
	return table2;
end};
return table1;
  -  Editar
  04:54:13.723    -  Editar
  04:54:13.723  ----- [2196] ReplicatedStorage.Library.Modules.Mutex -----  -  Editar
  04:54:13.723  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {};
function table1.new() -- Line: 13
	--[[
		Upvalues:
			[1] = table1
	--]]
	local table2 = {
		destroyed = false,
		event = Instance.new("BindableEvent"),
		locked = false,
		counter = 0
	};
	local new_mt = setmetatable(table2, {__index = table1});
	return new_mt;
end
function table1.nextCounter(p1) -- Line: 24
	local t_counter = p1.counter;
	p1.counter = t_counter + 1;
	return t_counter;
end
function table1.getLock(p2) -- Line: 30
	return p2.lockHolder;
end
function table1.tryLock(p3) -- Line: 34
	assert(not p3.destroyed);
	if p3.lockHolder then
		return nil;
	end
	local nextCounter_ret = p3:nextCounter();
	p3.lockHolder = nextCounter_ret;
	return nextCounter_ret;
end
function table1.lock(p4) -- Line: 45
	local tryLock_ret;
	while true do
		tryLock_ret = p4:tryLock();
		if tryLock_ret then break end
		p4.event.Event:Wait();
	end
	return tryLock_ret;
end
function table1.unlock(p5, p6) -- Line: 55
	if p5.destroyed then return end
	assert(typeof(p6) == "number");
	assert(p6 == p5.lockHolder);
	p5.lockHolder = nil;
	p5.event:Fire();
end
function table1.wrun(p7, p8, ...) -- Line: 66
	local lock_ret = p7:lock();
	local tostring_ret = nil;
	local tostring_ret2 = nil;
	local table_pack_ret = table.pack(xpcall(p8, function(p15) -- Line: 75
		--[[
			Upvalues:
				[1] = tostring_ret
				[2] = tostring_ret2
		--]]
		tostring_ret = tostring(p15);
		tostring_ret2 = tostring(debug.traceback(nil, 3));
	end, ...));
	p7:unlock(lock_ret);
	if table_pack_ret[1] ~= true then
		warn((("[Mutex] %*\nStack Begin\n%*Stack End"):format(tostring(tostring_ret), (tostring(tostring_ret2)))));
	end
	return table.unpack(table_pack_ret);
end
function table1.run(p9, p10, ...) -- Line: 89
	local lock_ret2 = p9:lock();
	local tostring_ret3 = nil;
	local tostring_ret4 = nil;
	local table_pack_ret2 = table.pack(xpcall(p10, function(p16) -- Line: 98
		--[[
			Upvalues:
				[1] = tostring_ret3
				[2] = tostring_ret4
		--]]
		tostring_ret3 = tostring(p16);
		tostring_ret4 = tostring(debug.traceback(nil, 3));
	end, ...));
	p9:unlock(lock_ret2);
	if table_pack_ret2[1] ~= true then
		error((("[Mutex] %*\nStack Begin\n%*Stack End"):format(tostring(tostring_ret3), (tostring(tostring_ret4)))));
	end
	return table.unpack(table_pack_ret2, 2);
end
function table1.async(p11, p12, ...) -- Line: 112
	assert(not p11.destroyed);
	task.spawn(function(...) -- Line: 119
		--[[
			Upvalues:
				[1] = p11
				[2] = p12
		--]]
		local lock_ret3 = p11:lock();
		local tostring_ret5 = nil;
		local tostring_ret6 = nil;
		local success = xpcall(p12, function(p17) -- Line: 124
			--[[
				Upvalues:
					[1] = tostring_ret5
					[2] = tostring_ret6
			--]]
			tostring_ret5 = tostring(p17);
			tostring_ret6 = tostring(debug.traceback(nil, 3));
		end, ...);
		p11:unlock(lock_ret3);
		if success ~= true then
			error((("[Mutex] %*\nStack Begin\n%*Stack End"):format(tostring(tostring_ret5), (tostring(tostring_ret6)))));
		end
	end, ...);
end
function table1.isDestroyed(p13) -- Line: 137
	return p13.destroyed;
end
function table1.destroy(p14) -- Line: 141
	if p14.destroyed then
		return false;
	end
	p14.destroyed = true;
	local t_event = p14.event;
	p14.event = nil;
	if t_event then
		t_event:Destroy();
	end
	return true;
end
return table1;
  -  Editar
  04:54:13.724    -  Editar
  04:54:13.724  ----- [2197] ReplicatedStorage.Library.Modules.Random -----  -  Editar
  04:54:13.724  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

assert(-math.huge ~= -708.3964185322641);
local table1 = {};
function table1.new(p1) -- Line: 8
	--[[
		Upvalues:
			[1] = table1
	--]]
	local u1 = nil;
	if p1 ~= nil then
		if typeof(p1) == "number" then
			u1 = Random.new(p1);
		elseif typeof(p1) == "Random" then
			u1 = p1;
		else
			error("Unknown alternative seed type: " .. typeof(p1));
		end
	else
		u1 = Random.new();
	end
	local table2 = {
		new = table1.new,
		handle = function() -- Line: 26
			--[[
				Upvalues:
					[1] = u1
			--]]
			return u1;
		end,
		clone = function() -- Line: 30
			--[[
				Upvalues:
					[1] = table1
					[2] = u1
			--]]
			return table1.new(u1:Clone());
		end,
		seed = function(p2) -- Line: 34
			--[[
				Upvalues:
					[1] = u1
			--]]
			u1 = Random.new(p2);
		end,
		number = function(p3, p4) -- Line: 39
			--[[
				Upvalues:
					[1] = u1
			--]]
			return p3 and u1:NextNumber(p3, p4) or u1:NextNumber();
		end,
		boolean = function(p5) -- Line: 43
			--[[
				Upvalues:
					[1] = u1
			--]]
			return u1:NextNumber() < (p5 or 0.5);
		end,
		integer = function(p6, p7) -- Line: 47
			--[[
				Upvalues:
					[1] = u1
			--]]
			return u1:NextInteger(p6, p7);
		end,
		normal = function(p8, p9) -- Line: 56
			--[[
				Upvalues:
					[1] = u1
			--]]
			local v1 = math.sqrt(math.log((math.max(2.2250738585072014e-308, u1:NextNumber()))) * -2) * (p9 or 1);
			local v2 = u1:NextNumber() * (math.pi * 2);
			local v3 = p8 or 0;
			local v4 = v1 * math.cos(v2) + v3;
			return v4, v1 * math.sin(v2) + v3;
		end,
		Vector3 = function(p10) -- Line: 66
			--[[
				Upvalues:
					[1] = u1
			--]]
			return u1:NextUnitVector() * (p10 or 1);
		end,
		Vector2 = function(p11) -- Line: 70
			--[[
				Upvalues:
					[1] = u1
			--]]
			local v5 = math.pi * 2 * u1:NextNumber();
			return Vector2.new(math.cos(v5), (math.sin(v5))) * (p11 or 1);
		end
	};
	return table2;
end
table1.R = table1.new();
return table1;
  -  Editar
  04:54:13.724    -  Editar
  04:54:13.724  ----- [2198] ReplicatedStorage.Library.Modules.Areas -----  -  Editar
  04:54:13.724  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {
	Coins = 1,
	Diamonds = 2,
	Damage = 3
};
local table2 = {};
for key1, val1 in pairs(table1) do
	table2[val1] = key1;
end
local table3 = {
	"Diamond Bag Tier 1",
	"Diamond Bag Tier 2",
	"Diamond Bag Tier 3",
	"Diamond Bag Tier 4",
	"Diamond Bag Tier 5"
};
local table4 = {
	MAX_COIN_STAGE = 4,
	SPECIAL_BONUS_TYPES = table1,
	SPECIAL_BONUS_TYPE_NAMES = table2,
	DIAMOND_BAG_TIERS = table3
};
function table4.ComputeCoinStage(p1, p2, p3) -- Line: 178
	--[[
		Upvalues:
			[1] = table4
	--]]
	local v1 = 1;
	if p1.modelHasStages then
		p3 = math.clamp(p3, 0, p2.mh);
		local math_clamp_ret = math.clamp(math.floor((1 - p3 / p2.mh) * (table4.MAX_COIN_STAGE - 1)) + 1, 1, table4.MAX_COIN_STAGE);
		return math_clamp_ret;
	end
	if p3 <= 0 then
		v1 = table4.MAX_COIN_STAGE;
	end
	return v1;
end
function table4.CalcSpecialBonusMultiplier(b, rewType)  
	local v2 = 0;
    local bool1 = false;
    
    for _, val2 in ipairs(b.l) do
        if val2.t ~= rewType then
            continue
        end
        
        v2 = v2 + val2.m;
        
		bool1 = true;
    end
    
	if bool1 then
		return v2;
    end
    
	return nil;
end
function table4.CalcSpecialBonusCurrencyMultiplier(p6, p7) -- Line: 213
	--[[
		Upvalues:
			[1] = table4
			[2] = table1
	--]]
	return table4.CalcSpecialBonusMultiplier(p6, p7 == "Diamonds" and table1.Diamonds or table1.Coins);
end
return table4;
  -  Editar
  04:54:13.724    -  Editar
  04:54:13.724  ----- [2199] ReplicatedStorage.Library.Modules.Daycare -----  -  Editar
  04:54:13.724  local Daycare = {}

local Time = 21600
if game:GetService("RunService"):IsStudio() then
    Time = 15
end

Daycare.DURATION_SECONDS = Time

Daycare.ORIGINAL_DURATION_SECONDS = 21600

Daycare.ONLINE_SPEEDUP = 3

Daycare.SLOTS_FREE = 10

Daycare.SLOT_TIERS = { {
    Amount = 10, 
    Product = "Daycare Tier 1"
} }

local Slots = Daycare.SLOTS_FREE

for i, v in ipairs(Daycare.SLOT_TIERS) do
    Slots = Slots + v.Amount
end

Daycare.SLOTS_MAX = Slots

return Daycare
  -  Editar
  04:54:13.724    -  Editar
  04:54:13.724  ----- [2200] ReplicatedStorage.Library.Modules.Promise -----  -  Editar
  04:54:13.724  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {__mode = "k"};
local function isCallable(p1) -- Line: 10
	if type(p1) == "function" then
		return true;
	end
	if type(p1) == "table" then
		local metatable = getmetatable(p1);
		if metatable and type((rawget(metatable, "__call"))) == "function" then
			return true;
		end
	end
	return false;
end
local function makeEnum(p2, p3) -- Line: 28
	local table2 = {};
	for _, val1 in ipairs(p3) do
		table2[val1] = val1;
	end
	return setmetatable(table2, {
		__index = function(_, p129) -- __index (Line: 36)
			--[[
				Upvalues:
					[1] = p2
			--]]
			error(string.format("%s is not in %s!", p129, p2), 2);
		end,
		__newindex = function() -- __newindex (Line: 39)
			--[[
				Upvalues:
					[1] = p2
			--]]
			error(string.format("Creating new members in %s is not allowed!", p2), 2);
		end
	});
end
local table3 = {Kind = makeEnum("Promise.Error.Kind", {
	"ExecutionError",
	"AlreadyCancelled",
	"NotResolvedInTime",
	"TimedOut"
})};
table3.__index = table3;
function table3.new(p4, p5) -- Line: 64
	--[[
		Upvalues:
			[1] = table3
	--]]
	p4 = p4 or {};
	return setmetatable({
		error = tostring(p4.error) or "[This error has no error text.]",
		trace = p4.trace,
		context = p4.context,
		kind = p4.kind,
		parent = p5,
		createdTick = os.clock(),
		createdTrace = debug.traceback()
	}, table3);
end
function table3.is(p6) -- Line: 77
	if type(p6) == "table" then
		local metatable2 = getmetatable(p6);
		if type(metatable2) == "table" then
			local v40;
			if rawget(p6, "error") == nil then
				v40 = false;
			else
				v40 = type((rawget(metatable2, "extend"))) == "function";
			end
			return v40;
		end
	end
	return false;
end
function table3.isKind(p7, p8) -- Line: 89
	--[[
		Upvalues:
			[1] = table3
	--]]
	assert(p8 ~= nil, "Argument #2 to Promise.Error.isKind must not be nil");
	return table3.is(p7) and p7.kind == p8;
end
function table3.extend(p9, p10) -- Line: 95
	--[[
		Upvalues:
			[1] = table3
	--]]
	p10 = p10 or {};
	p10.kind = p10.kind or p9.kind;
	return table3.new(p10, p9);
end
function table3.getErrorChain(p11) -- Line: 103
	local table4 = {p11};
	while table4[#table4].parent do
		table.insert(table4, table4[#table4].parent);
	end
	return table4;
end
function table3.__tostring(p12) -- Line: 113
	local table5 = {string.format("-- Promise.Error(%s) --", p12.kind or "?")};
	for _, val2 in ipairs(p12:getErrorChain()) do
		table.insert(table5, table.concat({
			val2.trace or val2.error,
			val2.context
		}, "\n"));
	end
	return table.concat(table5, "\n");
end
local function pack(...) -- Line: 137
	return select("#", ...), {...};
end
local function packResult(p13, ...) -- Line: 144
	return p13, select("#", ...), {...};
end
local function makeErrorHandler(p14) -- Line: 148
	--[[
		Upvalues:
			[1] = table3
	--]]
	assert(p14 ~= nil, "traceback is nil");
	return function(p96) -- Line: 151
		--[[
			Upvalues:
				[1] = table3
				[2] = p14
		--]]
		if type(p96) == "table" then
			return p96;
		end
		return table3.new({
			error = p96,
			kind = table3.Kind.ExecutionError,
			trace = debug.traceback(tostring(p96), 2),
			context = "Promise created at:\n\n" .. p14
		});
	end;
end
local function runExecutor(p15, p16, ...) -- Line: 171
	--[[
		Upvalues:
			[1] = packResult
			[2] = table3
	--]]
	local v24 = packResult;
	local g_xpcall = xpcall;
	local v25 = p16;
	assert(p15 ~= nil, "traceback is nil");
	local function v26(p97) -- Anonymous function at line 151
		--[[
			Upvalues:
				[1] = table3
				[2] = p15
		--]]
		if type(p97) == "table" then
			return p97;
		end
		return table3.new({
			error = p97,
			kind = table3.Kind.ExecutionError,
			trace = debug.traceback(tostring(p97), 2),
			context = "Promise created at:\n\n" .. p15
		});
	end
	return v24(g_xpcall(v25, v26, ...));
end
local function createAdvancer(p17, p18, p19, p20) -- Line: 179
	--[[
		Upvalues:
			[1] = runExecutor
	--]]
	return function(...) -- Line: 180
		--[[
			Upvalues:
				[1] = runExecutor
				[2] = p17
				[3] = p18
				[4] = p19
				[5] = p20
		--]]
		local v37, v38, v39 = runExecutor(p17, p18, ...);
		if v37 then
			p19(unpack(v39, 1, v38));
			return;
		end
		p20(v39[1]);
	end;
end
local function isEmpty(p21) -- Line: 191
	return next(p21) == nil;
end
local table6 = {
	Error = table3,
	Status = makeEnum("Promise.Status", {
		"Started",
		"Resolved",
		"Rejected",
		"Cancelled"
	}),
	_getTime = os.clock,
	_timeEvent = game:GetService("RunService").Heartbeat,
	_unhandledRejectionCallbacks = {},
	prototype = {}
};
table6.__index = table6.prototype;
function table6._new(p22, p23, p24) -- Line: 230
	--[[
		Upvalues:
			[1] = table6
			[2] = table1
			[3] = runExecutor
	--]]
	if p24 ~= nil and not table6.is(p24) then
		error("Argument #2 to Promise.new must be a promise or nil", 2);
	end
	local table7 = {
		_thread = nil,
		_source = p22,
		_status = table6.Status.Started,
		_values = nil,
		_valuesLength = -1,
		_unhandledRejection = true,
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},
		_cancellationHook = nil,
		_parent = p24,
		_consumers = setmetatable({}, table1)
	};
	if p24 and p24._status == table6.Status.Started then
		p24._consumers[table7] = true;
	end
	setmetatable(table7, table6);
	local function resolve(...) -- Line: 278
		--[[
			Upvalues:
				[1] = table7
		--]]
		table7:_resolve(...);
	end
	local function reject(...) -- Line: 282
		--[[
			Upvalues:
				[1] = table7
		--]]
		table7:_reject(...);
	end
	local function onCancel(p98) -- Line: 286
		--[[
			Upvalues:
				[1] = table7
				[2] = table6
		--]]
		if p98 then
			if table7._status == table6.Status.Cancelled then
				p98();
			else
				table7._cancellationHook = p98;
			end
		end
		return table7._status == table6.Status.Cancelled;
	end
	table7._thread = coroutine.create(function() -- Line: 298
		--[[
			Upvalues:
				[1] = runExecutor
				[2] = table7
				[3] = p23
				[4] = resolve
				[5] = reject
				[6] = onCancel
		--]]
		local v41, _, v42 = runExecutor(table7._source, p23, resolve, reject, onCancel);
		if not v41 then
			reject(v42[1]);
		end
	end);
	task.spawn(table7._thread);
	return table7;
end
function table6.new(p25) -- Line: 349
	--[[
		Upvalues:
			[1] = table6
	--]]
	return table6._new(debug.traceback(nil, 2), p25);
end
function table6.__tostring(p26) -- Line: 353
	return string.format("Promise(%s)", p26._status);
end
function table6.defer(p27) -- Line: 375
	--[[
		Upvalues:
			[1] = table6
			[2] = runExecutor
	--]]
	local debug_traceback_ret = debug.traceback(nil, 2);
	local v27 = table6._new(debug_traceback_ret, function(p99, p100, p101) -- Line: 378
		--[[
			Upvalues:
				[1] = table6
				[2] = runExecutor
				[3] = debug_traceback_ret
				[4] = p27
		--]]
		local Connect_ret = nil;
		Connect_ret = table6._timeEvent:Connect(function() -- Line: 380
			--[[
				Upvalues:
					[1] = Connect_ret
					[2] = runExecutor
					[3] = debug_traceback_ret
					[4] = p27
					[5] = p99
					[6] = p100
					[7] = p101
			--]]
			Connect_ret:Disconnect();
			local v53, _, v54 = runExecutor(debug_traceback_ret, p27, p99, p100, p101);
			if not v53 then
				p100(v54[1]);
			end
		end);
	end);
	return v27;
end
table6.async = table6.defer;
function table6.resolve(...) -- Line: 418
	--[[
		Upvalues:
			[1] = pack
			[2] = table6
	--]]
	local u10, u11 = pack(...);
	return table6._new(debug.traceback(nil, 2), function(p102) -- Line: 420
		--[[
			Upvalues:
				[1] = u11
				[2] = u10
		--]]
		p102(unpack(u11, 1, u10));
	end);
end
function table6.reject(...) -- Line: 435
	--[[
		Upvalues:
			[1] = pack
			[2] = table6
	--]]
	local u12, u13 = pack(...);
	return table6._new(debug.traceback(nil, 2), function(_, p103) -- Line: 437
		--[[
			Upvalues:
				[1] = u13
				[2] = u12
		--]]
		p103(unpack(u13, 1, u12));
	end);
end
function table6._try(p28, p29, ...) -- Line: 446
	--[[
		Upvalues:
			[1] = pack
			[2] = table6
	--]]
	local u14, u15 = pack(...);
	return table6._new(p28, function(p104) -- Line: 449
		--[[
			Upvalues:
				[1] = p29
				[2] = u15
				[3] = u14
		--]]
		p104(p29(unpack(u15, 1, u14)));
	end);
end
function table6.try(p30, ...) -- Line: 477
	--[[
		Upvalues:
			[1] = table6
	--]]
	return table6._try(debug.traceback(nil, 2), p30, ...);
end
function table6._all(p31, p32, p33) -- Line: 486
	--[[
		Upvalues:
			[1] = table6
	--]]
	if type(p32) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.all"), 3);
	end
	for key3, val3 in pairs(p32) do
		if table6.is(val3) then continue end
		error(string.format("Non-promise value passed into %s at index %s", "Promise.all", tostring(key3)), 3);
	end
	if #p32 == 0 or p33 == 0 then
		return table6.resolve({});
	end
	return table6._new(p31, function(p105, p106, p107) -- Line: 504
		--[[
			Upvalues:
				[1] = p33
				[2] = p32
		--]]
		local table8 = {};
		local table9 = {};
		local u26 = 0;
		local u27 = 0;
		local bool1 = false;
		local function cancel() -- Line: 515
			--[[
				Upvalues:
					[1] = table9
			--]]
			for _, val17 in ipairs(table9) do
				val17:cancel();
			end
		end
		local function resolveOne(p130, ...) -- Line: 522
			--[[
				Upvalues:
					[1] = bool1
					[2] = u26
					[3] = p33
					[4] = table8
					[5] = p32
					[6] = p105
					[7] = table9
			--]]
			if bool1 then return end
			u26 = u26 + 1;
			if p33 == nil then
				table8[p130] = ...;
			else
				table8[u26] = ...;
			end
			if u26 >= (p33 or #p32) then
				bool1 = true;
				p105(table8);
				for _, val24 in ipairs(table9) do
					val24:cancel();
				end
			end
		end
		p107(cancel);
		for key9, val9 in ipairs(p32) do
			table9[key9] = val9:andThen(function(...) -- Line: 547
				--[[
					Upvalues:
						[1] = resolveOne
						[2] = key9
				--]]
				resolveOne(key9, ...);
			end, function(...) -- Line: 549
				--[[
					Upvalues:
						[1] = u27
						[2] = p33
						[3] = p32
						[4] = table9
						[5] = bool1
						[6] = p106
				--]]
				u27 = u27 + 1;
				if p33 == nil or #p32 - u27 < p33 then
					for _, val31 in ipairs(table9) do
						val31:cancel();
					end
					bool1 = true;
					p106(...);
				end
			end);
		end
		if bool1 then
			for _, val14 in ipairs(table9) do
				val14:cancel();
			end
		end
	end);
end
function table6.all(p34) -- Line: 591
	--[[
		Upvalues:
			[1] = table6
	--]]
	return table6._all(debug.traceback(nil, 2), p34);
end
function table6.fold(p35, p36, p37) -- Line: 620
	--[[
		Upvalues:
			[1] = table6
	--]]
	assert(type(p35) == "table", "Bad argument #1 to Promise.fold: must be a table");
	local bool2;
	while true do
		if type(p36) == "function" then
			bool2 = true;
		else
			if type(p36) == "table" then
				local metatable3 = getmetatable(p36);
				if metatable3 and type((rawget(metatable3, "__call"))) == "function" then
					bool2 = true;
					break;
				end
			end
			bool2 = false;
		end
		break;
	end
	assert(bool2, "Bad argument #2 to Promise.fold: must be a function");
	local u16 = table6.resolve(p37);
	local v28 = table6.each(p35, function(p108, p109) -- Line: 625
		--[[
			Upvalues:
				[1] = u16
				[2] = p36
		--]]
		u16 = u16:andThen(function(p133) -- Line: 626
			--[[
				Upvalues:
					[1] = p36
					[2] = p108
					[3] = p109
			--]]
			return p36(p133, p108, p109);
		end);
	end);
	return v28:andThen(function() -- Line: 629
		--[[
			Upvalues:
				[1] = u16
		--]]
		return u16;
	end);
end
function table6.some(p38, p39) -- Line: 653
	--[[
		Upvalues:
			[1] = table6
	--]]
	assert(type(p39) == "number", "Bad argument #2 to Promise.some: must be a number");
	return table6._all(debug.traceback(nil, 2), p38, p39);
end
function table6.any(p40) -- Line: 677
	--[[
		Upvalues:
			[1] = table6
	--]]
	return table6._all(debug.traceback(nil, 2), p40, 1):andThen(function(p110) -- Line: 678
		return p110[1];
	end);
end
function table6.allSettled(p41) -- Line: 699
	--[[
		Upvalues:
			[1] = table6
	--]]
	if type(p41) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.allSettled"), 2);
	end
	for key4, val4 in pairs(p41) do
		if table6.is(val4) then continue end
		error(string.format("Non-promise value passed into %s at index %s", "Promise.allSettled", tostring(key4)), 2);
	end
	if #p41 == 0 then
		return table6.resolve({});
	end
	return table6._new(debug.traceback(nil, 2), function(p111, _, p112) -- Line: 717
		--[[
			Upvalues:
				[1] = p41
		--]]
		local table10 = {};
		local table11 = {};
		local u29 = 0;
		local function resolveOne(p131, ...) -- Line: 727
			--[[
				Upvalues:
					[1] = u29
					[2] = table10
					[3] = p41
					[4] = p111
			--]]
			u29 = u29 + 1;
			table10[p131] = ...;
			if u29 >= #p41 then
				p111(table10);
			end
		end
		p112(function() -- Line: 737
			--[[
				Upvalues:
					[1] = table11
			--]]
			for _, val18 in ipairs(table11) do
				val18:cancel();
			end
		end);
		for key10, val10 in ipairs(p41) do
			table11[key10] = val10:finally(function(...) -- Line: 746
				--[[
					Upvalues:
						[1] = resolveOne
						[2] = key10
				--]]
				resolveOne(key10, ...);
			end);
		end
	end);
end
function table6.race(p42) -- Line: 777
	--[[
		Upvalues:
			[1] = table6
	--]]
	assert(type(p42) == "table", string.format("Please pass a list of promises to %s", "Promise.race"));
	for key5, val5 in pairs(p42) do
		assert(table6.is(val5), string.format("Non-promise value passed into %s at index %s", "Promise.race", tostring(key5)));
	end
	return table6._new(debug.traceback(nil, 2), function(p113, p114, p115) -- Line: 784
		--[[
			Upvalues:
				[1] = p42
		--]]
		local table12 = {};
		local bool3 = false;
		local function cancel() -- Line: 788
			--[[
				Upvalues:
					[1] = table12
			--]]
			for _, val19 in ipairs(table12) do
				val19:cancel();
			end
		end
		local function finalize(p132) -- Line: 794
			--[[
				Upvalues:
					[1] = table12
					[2] = bool3
			--]]
			return function(...) -- Line: 795
				--[[
					Upvalues:
						[1] = table12
						[2] = bool3
						[3] = p132
				--]]
				for _, val27 in ipairs(table12) do
					val27:cancel();
				end
				bool3 = true;
				return p132(...);
			end;
		end
		if p115(function(...) -- Line: 795
			--[[
				Upvalues:
					[1] = table12
					[2] = bool3
					[3] = p114
			--]]
			for _, val22 in ipairs(table12) do
				val22:cancel();
			end
			bool3 = true;
			return p114(...);
		end) then return end
		for key11, val11 in ipairs(p42) do
			local function v50(...) -- Anonymous function at line 795
				--[[
					Upvalues:
						[1] = table12
						[2] = bool3
						[3] = p113
				--]]
				for _, val25 in ipairs(table12) do
					val25:cancel();
				end
				bool3 = true;
				return p113(...);
			end
			local function v51(...) -- Anonymous function at line 795
				--[[
					Upvalues:
						[1] = table12
						[2] = bool3
						[3] = p114
				--]]
				for _, val26 in ipairs(table12) do
					val26:cancel();
				end
				bool3 = true;
				return p114(...);
			end
			table12[key11] = val11:andThen(v50, v51);
		end
		if bool3 then
			for _, val15 in ipairs(table12) do
				val15:cancel();
			end
		end
	end);
end
function table6.each(p43, p44) -- Line: 872
	--[[
		Upvalues:
			[1] = table6
			[2] = table3
	--]]
	assert(type(p43) == "table", string.format("Please pass a list of promises to %s", "Promise.each"));
	local bool4;
	while true do
		if type(p44) == "function" then
			bool4 = true;
		else
			if type(p44) == "table" then
				local metatable4 = getmetatable(p44);
				if metatable4 and type((rawget(metatable4, "__call"))) == "function" then
					bool4 = true;
					break;
				end
			end
			bool4 = false;
		end
		break;
	end
	assert(bool4, string.format("Please pass a handler function to %s!", "Promise.each"));
	return table6._new(debug.traceback(nil, 2), function(p116, p117, p118) -- Line: 876
		--[[
			Upvalues:
				[1] = p43
				[2] = table6
				[3] = table3
				[4] = p44
		--]]
		local table13 = {};
		local table14 = {};
		local bool5 = false;
		local function cancel() -- Line: 882
			--[[
				Upvalues:
					[1] = table14
			--]]
			for _, val20 in ipairs(table14) do
				val20:cancel();
			end
		end
		p118(function() -- Line: 888
			--[[
				Upvalues:
					[1] = bool5
					[2] = table14
			--]]
			bool5 = true;
			for _, val21 in ipairs(table14) do
				val21:cancel();
			end
		end);
		local table15 = {};
		for key12, val12 in ipairs(p43) do
			if table6.is(val12) then
				if val12:getStatus() == table6.Status.Cancelled then
					for _, val28 in ipairs(table14) do
						val28:cancel();
					end
					return p117(table3.new({
						error = "Promise is cancelled",
						kind = table3.Kind.AlreadyCancelled,
						context = string.format("The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s", key12, val12._source)
					}));
				end
				if val12:getStatus() == table6.Status.Rejected then
					for _, val29 in ipairs(table14) do
						val29:cancel();
					end
					return p117(select(2, val12:await()));
				end
				local andThen_ret = val12:andThen(function(...) -- Line: 921
					return ...;
				end);
				table.insert(table14, andThen_ret);
				table15[key12] = andThen_ret;
				continue;
			end
			table15[key12] = val12;
		end
		for key13, val13 in ipairs(table15) do
			if table6.is(val13) then
				local await_ret1_2, val13 = val13:await();
				if not await_ret1_2 then
					for _, val30 in ipairs(table14) do
						val30:cancel();
					end
					return p117(val13);
				end
			end
			if bool5 then return end
			local v52 = table6.resolve(p44(val13, key13));
			table.insert(table14, v52);
			local await_ret1, await_ret2 = v52:await();
			if not await_ret1 then
				for _, val23 in ipairs(table14) do
					val23:cancel();
				end
				return p117(await_ret2);
			end
			table13[key13] = await_ret2;
		end
		p116(table13);
	end);
end
function table6.is(p45) -- Line: 971
	--[[
		Upvalues:
			[1] = table6
	--]]
	if type(p45) ~= "table" then
		return false;
	end
	local metatable5 = getmetatable(p45);
	if metatable5 == table6 then
		return true;
	end
	if metatable5 == nil then
		local t_andThen = p45.andThen;
		if type(t_andThen) == "function" then
			return true;
		end
		if type(t_andThen) == "table" then
			local metatable7 = getmetatable(t_andThen);
			if metatable7 and type((rawget(metatable7, "__call"))) == "function" then
				return true;
			end
		end
		return false;
	end
	if type(metatable5) == "table" and type((rawget(metatable5, "__index"))) == "table" then
		local rawget_ret = rawget(rawget(metatable5, "__index"), "andThen");
		local bool6;
		while true do
			if type(rawget_ret) == "function" then
				bool6 = true;
			else
				if type(rawget_ret) == "table" then
					local metatable6 = getmetatable(rawget_ret);
					if metatable6 and type((rawget(metatable6, "__call"))) == "function" then
						bool6 = true;
						break;
					end
				end
				bool6 = false;
			end
			break;
		end
		if bool6 then
			return true;
		end
	end
	return false;
end
function table6.promisify(p46) -- Line: 1020
	--[[
		Upvalues:
			[1] = table6
	--]]
	return function(...) -- Line: 1021
		--[[
			Upvalues:
				[1] = table6
				[2] = p46
		--]]
		return table6._try(debug.traceback(nil, 2), p46, ...);
	end;
end
local u4 = nil;
local Connect_ret2 = nil;
function table6.delay(p47) -- Line: 1051
	--[[
		Upvalues:
			[1] = table6
			[2] = Connect_ret2
			[3] = u4
	--]]
	assert(type(p47) == "number", "Bad argument #1 to Promise.delay, must be a number.");
	if p47 < 1 / 60 or p47 == math.huge then
		p47 = 1 / 60;
	end
	return table6._new(debug.traceback(nil, 2), function(p119, _, p120) -- Line: 1059
		--[[
			Upvalues:
				[1] = table6
				[2] = p47
				[3] = Connect_ret2
				[4] = u4
		--]]
		local v44 = table6._getTime();
		local v45 = v44 + p47;
		local table16 = {
			resolve = p119,
			startTime = v44,
			endTime = v45
		};
		if Connect_ret2 == nil then
			u4 = table16;
			Connect_ret2 = table6._timeEvent:Connect(function() -- Line: 1071
				--[[
					Upvalues:
						[1] = table6
						[2] = u4
						[3] = Connect_ret2
				--]]
				local v64 = table6._getTime();
				while u4 ~= nil and u4.endTime < v64 do
					local v65 = u4;
					u4 = v65.next;
					if u4 == nil then
						Connect_ret2:Disconnect();
						Connect_ret2 = nil;
					else
						u4.previous = nil;
					end
					v65.resolve(table6._getTime() - v65.startTime);
				end
			end);
		elseif u4.endTime < v45 then
			local v55 = u4;
			local t_next2 = v55.next;
			while t_next2 ~= nil and t_next2.endTime < v45 do
				v55 = t_next2;
				t_next2 = t_next2.next;
			end
			v55.next = table16;
			table16.previous = v55;
			if t_next2 ~= nil then
				table16.next = t_next2;
				t_next2.previous = table16;
			end
		else
			table16.next = u4;
			u4.previous = table16;
			u4 = table16;
		end
		p120(function() -- Line: 1116
			--[[
				Upvalues:
					[1] = table16
					[2] = u4
					[3] = Connect_ret2
			--]]
			local t_next = table16.next;
			if u4 == table16 then
				if t_next == nil then
					Connect_ret2:Disconnect();
					Connect_ret2 = nil;
				else
					t_next.previous = nil;
				end
				u4 = t_next;
				return;
			end
			local t_previous = table16.previous;
			t_previous.next = t_next;
			if t_next ~= nil then
				t_next.previous = t_previous;
			end
		end);
	end);
end
local function timeout(p48, p49, p50) -- Line: 1180
	--[[
		Upvalues:
			[1] = table6
			[2] = table3
	--]]
	local debug_traceback_ret2 = debug.traceback(nil, 2);
	return table6.race({
		table6.delay(p49):andThen(function() -- Line: 1184
			--[[
				Upvalues:
					[1] = table6
					[2] = p50
					[3] = table3
					[4] = p49
					[5] = debug_traceback_ret2
			--]]
			return table6.reject(p50 == nil and table3.new({
				kind = table3.Kind.TimedOut,
				error = "Timed out",
				context = string.format("Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s", p49, debug_traceback_ret2)
			}) or p50);
		end),
		p48
	});
end
table6.prototype.timeout = timeout;
local function getStatus(p51) -- Line: 1204
	return p51._status;
end
table6.prototype.getStatus = getStatus;
local function _andThen(p52, p53, p54, p55) -- Line: 1213
	--[[
		Upvalues:
			[1] = table6
			[2] = runExecutor
	--]]
	p52._unhandledRejection = false;
	if p52._status == table6.Status.Cancelled then
		local v34 = table6.new(function() -- Line: 1218
		end);
		v34:cancel();
		return v34;
	end
	return table6._new(p53, function(p121, p122, p123) -- Line: 1225
		--[[
			Upvalues:
				[1] = p54
				[2] = p53
				[3] = runExecutor
				[4] = p55
				[5] = p52
				[6] = table6
		--]]
		local u31 = p121;
		if p54 then
			local u34 = p53;
			local u35 = p54;
			function u31(...) -- Anonymous function at line 180
				--[[
					Upvalues:
						[1] = runExecutor
						[2] = u34
						[3] = u35
						[4] = p121
						[5] = p122
				--]]
				local v57, v58, v59 = runExecutor(u34, u35, ...);
				if v57 then
					p121(unpack(v59, 1, v58));
					return;
				end
				p122(v59[1]);
			end
		end
		local u32 = p122;
		if p55 then
			local u36 = p53;
			local u37 = p55;
			function u32(...) -- Anonymous function at line 180
				--[[
					Upvalues:
						[1] = runExecutor
						[2] = u36
						[3] = u37
						[4] = p121
						[5] = p122
				--]]
				local v60, v61, v62 = runExecutor(u36, u37, ...);
				if v60 then
					p121(unpack(v62, 1, v61));
					return;
				end
				p122(v62[1]);
			end
		end
		if p52._status == table6.Status.Started then
			table.insert(p52._queuedResolve, u31);
			table.insert(p52._queuedReject, u32);
			p123(function() -- Line: 1244
				--[[
					Upvalues:
						[1] = p52
						[2] = table6
						[3] = u31
						[4] = u32
				--]]
				if p52._status == table6.Status.Started then
					table.remove(p52._queuedResolve, table.find(p52._queuedResolve, u31));
					table.remove(p52._queuedReject, table.find(p52._queuedReject, u32));
				end
			end);
		elseif p52._status == table6.Status.Resolved then
			u31(unpack(p52._values, 1, p52._valuesLength));
		elseif p52._status == table6.Status.Rejected then
			u32(unpack(p52._values, 1, p52._valuesLength));
		end
	end, p52);
end
table6.prototype._andThen = _andThen;
local function andThen(p56, p57, p58) -- Line: 1283
	local bool7 = true;
	while true do
		if p57 ~= nil then
			if type(p57) == "function" then
				bool7 = true;
			else
				if type(p57) == "table" then
					local metatable8 = getmetatable(p57);
					if metatable8 and type((rawget(metatable8, "__call"))) == "function" then
						bool7 = true;
						break;
					end
				end
				bool7 = false;
			end
		end
		break;
	end
	assert(bool7, string.format("Please pass a handler function to %s!", "Promise:andThen"));
	local bool8 = true;
	while true do
		if p58 ~= nil then
			if type(p58) == "function" then
				bool8 = true;
			else
				if type(p58) == "table" then
					local metatable9 = getmetatable(p58);
					if metatable9 and type((rawget(metatable9, "__call"))) == "function" then
						bool8 = true;
						break;
					end
				end
				bool8 = false;
			end
		end
		break;
	end
	assert(bool8, string.format("Please pass a handler function to %s!", "Promise:andThen"));
	return p56:_andThen(debug.traceback(nil, 2), p57, p58);
end
table6.prototype.andThen = andThen;
local function catch(p59, p60) -- Line: 1310
	local bool9 = true;
	while true do
		if p60 ~= nil then
			if type(p60) == "function" then
				bool9 = true;
			else
				if type(p60) == "table" then
					local metatable10 = getmetatable(p60);
					if metatable10 and type((rawget(metatable10, "__call"))) == "function" then
						bool9 = true;
						break;
					end
				end
				bool9 = false;
			end
		end
		break;
	end
	assert(bool9, string.format("Please pass a handler function to %s!", "Promise:catch"));
	return p59:_andThen(debug.traceback(nil, 2), nil, p60);
end
table6.prototype.catch = catch;
local function tap(p61, p62) -- Line: 1331
	--[[
		Upvalues:
			[1] = table6
			[2] = pack
	--]]
	local bool10;
	while true do
		if type(p62) == "function" then
			bool10 = true;
		else
			if type(p62) == "table" then
				local metatable11 = getmetatable(p62);
				if metatable11 and type((rawget(metatable11, "__call"))) == "function" then
					bool10 = true;
					break;
				end
			end
			bool10 = false;
		end
		break;
	end
	assert(bool10, string.format("Please pass a handler function to %s!", "Promise:tap"));
	return p61:_andThen(debug.traceback(nil, 2), function(...) -- Line: 1333
		--[[
			Upvalues:
				[1] = p62
				[2] = table6
				[3] = pack
		--]]
		local v46 = p62(...);
		if table6.is(v46) then
			local u38, u39 = pack(...);
			return v46:andThen(function() -- Line: 1338
				--[[
					Upvalues:
						[1] = u39
						[2] = u38
				--]]
				return unpack(u39, 1, u38);
			end);
		end
		return ...;
	end);
end
table6.prototype.tap = tap;
local function andThenCall(p63, p64, ...) -- Line: 1366
	--[[
		Upvalues:
			[1] = pack
	--]]
	local bool11;
	while true do
		if type(p64) == "function" then
			bool11 = true;
		else
			if type(p64) == "table" then
				local metatable12 = getmetatable(p64);
				if metatable12 and type((rawget(metatable12, "__call"))) == "function" then
					bool11 = true;
					break;
				end
			end
			bool11 = false;
		end
		break;
	end
	assert(bool11, string.format("Please pass a handler function to %s!", "Promise:andThenCall"));
	local u17, u18 = pack(...);
	return p63:_andThen(debug.traceback(nil, 2), function() -- Line: 1369
		--[[
			Upvalues:
				[1] = p64
				[2] = u18
				[3] = u17
		--]]
		return p64(unpack(u18, 1, u17));
	end);
end
table6.prototype.andThenCall = andThenCall;
local function andThenReturn(p65, ...) -- Line: 1396
	--[[
		Upvalues:
			[1] = pack
	--]]
	local u19, u20 = pack(...);
	return p65:_andThen(debug.traceback(nil, 2), function() -- Line: 1398
		--[[
			Upvalues:
				[1] = u20
				[2] = u19
		--]]
		return unpack(u20, 1, u19);
	end);
end
table6.prototype.andThenReturn = andThenReturn;
local function cancel(p66) -- Line: 1414
	--[[
		Upvalues:
			[1] = table6
	--]]
	if p66._status ~= table6.Status.Started then return end
	p66._status = table6.Status.Cancelled;
	if p66._cancellationHook then
		p66._cancellationHook();
	end
	coroutine.close(p66._thread);
	if p66._parent then
		p66._parent:_consumerCancelled(p66);
	end
	for v29 in pairs(p66._consumers) do
		v29:cancel();
	end
	p66:_finalize();
end
table6.prototype.cancel = cancel;
local function _consumerCancelled(p67, p68) -- Line: 1442
	--[[
		Upvalues:
			[1] = table6
	--]]
	if p67._status ~= table6.Status.Started then return end
	p67._consumers[p68] = nil;
	if next(p67._consumers) == nil then
		p67:cancel();
	end
end
table6.prototype._consumerCancelled = _consumerCancelled;
local function _finally(p69, p70, p71) -- Line: 1458
	--[[
		Upvalues:
			[1] = table6
	--]]
	p69._unhandledRejection = false;
	local v30 = table6._new(p70, function(p124, p125, p126) -- Line: 1461
		--[[
			Upvalues:
				[1] = p69
				[2] = p71
				[3] = table6
		--]]
		local u33 = nil;
		p126(function() -- Line: 1464
			--[[
				Upvalues:
					[1] = p69
					[2] = u33
			--]]
			p69:_consumerCancelled(p69);
			if u33 then
				u33:cancel();
			end
		end);
		local v47 = p71 and function(...) -- Line: 1477
			--[[
				Upvalues:
					[1] = p71
					[2] = table6
					[3] = u33
					[4] = p124
					[5] = p69
					[6] = p125
			--]]
			local v63 = p71(...);
			if table6.is(v63) then
				u33 = v63;
				local finally_ret = v63:finally(function(p134) -- Line: 1484
					--[[
						Upvalues:
							[1] = table6
							[2] = p124
							[3] = p69
					--]]
					if p134 ~= table6.Status.Rejected then
						p124(p69);
					end
				end);
				finally_ret:catch(function(...) -- Line: 1489
					--[[
						Upvalues:
							[1] = p125
					--]]
					p125(...);
				end);
				return;
			end
			p124(p69);
		end or p124;
		if p69._status == table6.Status.Started then
			table.insert(p69._queuedFinally, v47);
		else
			v47(p69._status);
		end
	end);
	return v30;
end
table6.prototype._finally = _finally;
local function finally(p72, p73) -- Line: 1559
	local bool12 = true;
	while true do
		if p73 ~= nil then
			if type(p73) == "function" then
				bool12 = true;
			else
				if type(p73) == "table" then
					local metatable13 = getmetatable(p73);
					if metatable13 and type((rawget(metatable13, "__call"))) == "function" then
						bool12 = true;
						break;
					end
				end
				bool12 = false;
			end
		end
		break;
	end
	assert(bool12, string.format("Please pass a handler function to %s!", "Promise:finally"));
	return p72:_finally(debug.traceback(nil, 2), p73);
end
table6.prototype.finally = finally;
local function finallyCall(p74, p75, ...) -- Line: 1573
	--[[
		Upvalues:
			[1] = pack
	--]]
	local bool13;
	while true do
		if type(p75) == "function" then
			bool13 = true;
		else
			if type(p75) == "table" then
				local metatable14 = getmetatable(p75);
				if metatable14 and type((rawget(metatable14, "__call"))) == "function" then
					bool13 = true;
					break;
				end
			end
			bool13 = false;
		end
		break;
	end
	assert(bool13, string.format("Please pass a handler function to %s!", "Promise:finallyCall"));
	local u21, u22 = pack(...);
	return p74:_finally(debug.traceback(nil, 2), function() -- Line: 1576
		--[[
			Upvalues:
				[1] = p75
				[2] = u22
				[3] = u21
		--]]
		return p75(unpack(u22, 1, u21));
	end);
end
table6.prototype.finallyCall = finallyCall;
local function finallyReturn(p76, ...) -- Line: 1599
	--[[
		Upvalues:
			[1] = pack
	--]]
	local u23, u24 = pack(...);
	return p76:_finally(debug.traceback(nil, 2), function() -- Line: 1601
		--[[
			Upvalues:
				[1] = u24
				[2] = u23
		--]]
		return unpack(u24, 1, u23);
	end);
end
table6.prototype.finallyReturn = finallyReturn;
local function awaitStatus(p77) -- Line: 1613
	--[[
		Upvalues:
			[1] = table6
	--]]
	p77._unhandledRejection = false;
	if p77._status == table6.Status.Started then
		local coroutine_running_ret = coroutine.running();
		local finally_ret2 = p77:finally(function() -- Line: 1620
			--[[
				Upvalues:
					[1] = coroutine_running_ret
			--]]
			task.spawn(coroutine_running_ret);
		end);
		finally_ret2:catch(function() -- Line: 1626
		end);
		coroutine.yield();
	end
	if p77._status == table6.Status.Resolved then
		return p77._status, unpack(p77._values, 1, p77._valuesLength);
	end
	if p77._status == table6.Status.Rejected then
		return p77._status, unpack(p77._values, 1, p77._valuesLength);
	end
	return p77._status;
end
table6.prototype.awaitStatus = awaitStatus;
local function awaitHelper(p78, ...) -- Line: 1641
	--[[
		Upvalues:
			[1] = table6
	--]]
	return p78 == table6.Status.Resolved, ...;
end
local function await(p79) -- Line: 1666
	--[[
		Upvalues:
			[1] = awaitHelper
	--]]
	return awaitHelper(p79:awaitStatus());
end
table6.prototype.await = await;
local function expectHelper(p80, ...) -- Line: 1670
	--[[
		Upvalues:
			[1] = table6
	--]]
	if p80 ~= table6.Status.Resolved then
		error(... == nil and "Expected Promise rejected with no value." or ..., 3);
	end
	return ...;
end
local function expect(p81) -- Line: 1703
	--[[
		Upvalues:
			[1] = expectHelper
	--]]
	return expectHelper(p81:awaitStatus());
end
table6.prototype.expect = expect;
table6.prototype.awaitValue = table6.prototype.expect;
local function _unwrap(p82) -- Line: 1717
	--[[
		Upvalues:
			[1] = table6
	--]]
	if p82._status == table6.Status.Started then
		error("Promise has not resolved or rejected.", 2);
	end
	local v31 = p82._status == table6.Status.Resolved;
	return v31, unpack(p82._values, 1, p82._valuesLength);
end
table6.prototype._unwrap = _unwrap;
local function _resolve(p83, ...) -- Line: 1727
	--[[
		Upvalues:
			[1] = table6
			[2] = table3
			[3] = pack
	--]]
	if p83._status ~= table6.Status.Started then
		if table6.is((...)) then
			(...):_consumerCancelled(p83);
		end
		return;
	end
	if not table6.is((...)) then
		p83._status = table6.Status.Resolved;
		local v35, v36 = pack(...);
		p83._valuesLength = v35;
		p83._values = v36;
		for _, val7 in ipairs(p83._queuedResolve) do
			coroutine.wrap(val7)(...);
		end
		p83:_finalize();
		return;
	end
	if select("#", ...) > 1 then
		local string_format_ret = string.format("When returning a Promise from andThen, extra arguments are " .. "discarded! See:\n\n%s", p83._source);
		warn(string_format_ret);
	end
	local u25 = ...;
	local andThen_ret2 = u25:andThen(function(...) -- Line: 1748
		--[[
			Upvalues:
				[1] = p83
		--]]
		p83:_resolve(...);
	end, function(...) -- Line: 1750
		--[[
			Upvalues:
				[1] = u25
				[2] = table3
				[3] = p83
		--]]
		local v48 = u25._error and table3.new({
			error = u25._error,
			kind = table3.Kind.ExecutionError,
			context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]"
		}) or u25._values[1];
		if table3.isKind(v48, table3.Kind.ExecutionError) then
			return p83:_reject(v48:extend({
				error = "This Promise was chained to a Promise that errored.",
				trace = "",
				context = string.format("The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n", p83._source)
			}));
		end
		p83:_reject(...);
	end);
	if andThen_ret2._status == table6.Status.Cancelled then
		p83:cancel();
		return;
	end
	if andThen_ret2._status == table6.Status.Started then
		p83._parent = andThen_ret2;
		andThen_ret2._consumers[p83] = true;
	end
end
table6.prototype._resolve = _resolve;
local function _reject(p84, ...) -- Line: 1798
	--[[
		Upvalues:
			[1] = table6
			[2] = pack
	--]]
	if p84._status ~= table6.Status.Started then return end
	p84._status = table6.Status.Rejected;
	local v32, v33 = pack(...);
	p84._valuesLength = v32;
	p84._values = v33;
	if next(p84._queuedReject) ~= nil then
		for _, val8 in ipairs(p84._queuedReject) do
			coroutine.wrap(val8)(...);
		end
	else
		local tostring_ret = tostring((...));
		local coroutine_wrap_ret = coroutine.wrap(function() -- Line: 1820
			--[[
				Upvalues:
					[1] = table6
					[2] = p84
					[3] = tostring_ret
			--]]
			table6._timeEvent:Wait();
			if not p84._unhandledRejection then return end
			local string_format_ret2 = string.format("Unhandled Promise rejection:\n\n%s\n\n%s", tostring_ret, p84._source);
			for _, val16 in ipairs(table6._unhandledRejectionCallbacks) do
				task.spawn(val16, p84, unpack(p84._values, 1, p84._valuesLength));
			end
			if table6.TEST then return end
			warn(string_format_ret2);
		end);
		coroutine_wrap_ret();
	end
	p84:_finalize();
end
table6.prototype._reject = _reject;
local function _finalize(p85) -- Line: 1852
	--[[
		Upvalues:
			[1] = table6
	--]]
	for _, val6 in ipairs(p85._queuedFinally) do
		coroutine.wrap(val6)(p85._status);
	end
	p85._queuedFinally = nil;
	p85._queuedReject = nil;
	p85._queuedResolve = nil;
	if not table6.TEST then
		p85._parent = nil;
		p85._consumers = nil;
	end
	task.defer(coroutine.close, p85._thread);
end
table6.prototype._finalize = _finalize;
local function now(p86, p87) -- Line: 1889
	--[[
		Upvalues:
			[1] = table6
			[2] = table3
	--]]
	local debug_traceback_ret3 = debug.traceback(nil, 2);
	if p86._status == table6.Status.Resolved then
		return p86:_andThen(debug_traceback_ret3, function(...) -- Line: 1892
			return ...;
		end);
	end
	return table6.reject(p87 == nil and table3.new({
		kind = table3.Kind.NotResolvedInTime,
		error = "This Promise was not resolved in time for :now()",
		context = ":now() was called at:\n\n" .. debug_traceback_ret3
	}) or p87);
end
table6.prototype.now = now;
function table6.retry(p88, p89, ...) -- Line: 1934
	--[[
		Upvalues:
			[1] = table6
	--]]
	local bool14;
	while true do
		if type(p88) == "function" then
			bool14 = true;
		else
			if type(p88) == "table" then
				local metatable15 = getmetatable(p88);
				if metatable15 and type((rawget(metatable15, "__call"))) == "function" then
					bool14 = true;
					break;
				end
			end
			bool14 = false;
		end
		break;
	end
	assert(bool14, "Parameter #1 to Promise.retry must be a function");
	assert(type(p89) == "number", "Parameter #2 to Promise.retry must be a number");
	local table17 = {...};
	local select_ret = select("#", ...);
	return table6.resolve(p88(...)):catch(function(...) -- Line: 1940
		--[[
			Upvalues:
				[1] = p89
				[2] = table6
				[3] = p88
				[4] = table17
				[5] = select_ret
		--]]
		if p89 > 0 then
			return table6.retry(p88, p89 - 1, unpack(table17, 1, select_ret));
		end
		return table6.reject(...);
	end);
end
function table6.retryWithDelay(p90, p91, p92, ...) -- Line: 1962
	--[[
		Upvalues:
			[1] = table6
	--]]
	local bool15;
	while true do
		if type(p90) == "function" then
			bool15 = true;
		else
			if type(p90) == "table" then
				local metatable16 = getmetatable(p90);
				if metatable16 and type((rawget(metatable16, "__call"))) == "function" then
					bool15 = true;
					break;
				end
			end
			bool15 = false;
		end
		break;
	end
	assert(bool15, "Parameter #1 to Promise.retry must be a function");
	assert(type(p91) == "number", "Parameter #2 (times) to Promise.retry must be a number");
	assert(type(p92) == "number", "Parameter #3 (seconds) to Promise.retry must be a number");
	local table18 = {...};
	local select_ret2 = select("#", ...);
	return table6.resolve(p90(...)):catch(function(...) -- Line: 1969
		--[[
			Upvalues:
				[1] = p91
				[2] = table6
				[3] = p92
				[4] = p90
				[5] = table18
				[6] = select_ret2
		--]]
		if p91 > 0 then
			table6.delay(p92):await();
			return table6.retryWithDelay(p90, p91 - 1, p92, unpack(table18, 1, select_ret2));
		end
		return table6.reject(...);
	end);
end
function table6.fromEvent(p93, p94) -- Line: 2004
	--[[
		Upvalues:
			[1] = table6
	--]]
	p94 = p94 or function() -- Line: 2005
		return true;
	end;
	return table6._new(debug.traceback(nil, 2), function(p127, _, p128) -- Line: 2009
		--[[
			Upvalues:
				[1] = p93
				[2] = p94
		--]]
		local Connect_ret3 = nil;
		local bool16 = false;
		local function disconnect() -- Line: 2013
			--[[
				Upvalues:
					[1] = Connect_ret3
			--]]
			Connect_ret3:Disconnect();
			Connect_ret3 = nil;
		end
		Connect_ret3 = p93:Connect(function(...) -- Line: 2022
			--[[
				Upvalues:
					[1] = p94
					[2] = p127
					[3] = Connect_ret3
					[4] = bool16
			--]]
			local v56 = p94(...);
			if v56 == true then
				p127(...);
				if Connect_ret3 then
					Connect_ret3:Disconnect();
					Connect_ret3 = nil;
					return;
				end
				bool16 = true;
				return;
			end
			if type(v56) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean");
			end
		end);
		if bool16 and Connect_ret3 then
			return disconnect();
		end
		p128(disconnect);
	end);
end
function table6.onUnhandledRejection(p95) -- Line: 2056
	--[[
		Upvalues:
			[1] = table6
	--]]
	table.insert(table6._unhandledRejectionCallbacks, p95);
	return function() -- Line: 2059
		--[[
			Upvalues:
				[1] = table6
				[2] = p95
		--]]
		local table_find_ret = table.find(table6._unhandledRejectionCallbacks, p95);
		if table_find_ret then
			table.remove(table6._unhandledRejectionCallbacks, table_find_ret);
		end
	end;
end
return table6;
  -  Editar
  04:54:13.725    -  Editar
  04:54:13.725  ----- [2201] ReplicatedStorage.Library.Modules.RBTreeList -----  -  Editar
  04:54:13.725  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {insertList = function(p1, _, p2, p3) -- insertList (Line: 19)
	if p1 then
		return p1;
	end
	local table2 = {
		color = true,
		key = p2,
		val = p3
	};
	return table2;
end};
return table1;
  -  Editar
  04:54:13.725    -  Editar
  04:54:13.725  ----- [2202] ReplicatedStorage.Library.Modules.LeftistHeap -----  -  Editar
  04:54:13.725  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {};
function _merge1(p1, p2, p3) -- Line: 26
	if not p2.left then
		p2.left = p3;
		return p2;
	end
	p2.right = _merge(p1, p2.right, p3);
	if p2.left.npl < p2.right.npl then
		local t_right = p2.right;
		local t_left = p2.left;
		p2.left = t_right;
		p2.right = t_left;
	end
	p2.npl = p2.right.npl + 1;
	return p2;
end
function _merge(p4, p5, p6) -- Line: 46
	if p5 then
		if p6 then
			if p4(p5.element, p6.element) < 0 then
				return _merge1(p4, p5, p6);
			end
			return _merge1(p4, p6, p5);
		end
		return p5;
	end
	return p6;
end
function table1.new(p7) -- Line: 59
	assert(typeof(p7) == "function");
	local table2 = {root = nil};
	local function insert(p8) -- Line: 82
		--[[
			Upvalues:
				[1] = table2
				[2] = p7
		--]]
		table2.root = _merge(p7, {
			element = p8,
			npl = 0
		}, table2.root);
	end
	local function min() -- Line: 93
		--[[
			Upvalues:
				[1] = table2
		--]]
		assert(table2.root);
		return table2.root.element;
	end
	local function tryMin() -- Line: 102
		--[[
			Upvalues:
				[1] = table2
		--]]
		if table2.root then
			return true, table2.root.element;
		end
		return false, nil;
	end
	local function pop() -- Line: 113
		--[[
			Upvalues:
				[1] = table2
				[2] = p7
		--]]
		assert(table2.root);
		local t_element = table2.root.element;
		table2.root = _merge(p7, table2.root.left, table2.root.right);
		return t_element;
	end
	local function tryPop() -- Line: 124
		--[[
			Upvalues:
				[1] = table2
				[2] = p7
		--]]
		if table2.root then
			local t_element2 = table2.root.element;
			table2.root = _merge(p7, table2.root.left, table2.root.right);
			return true, t_element2;
		end
		return false, nil;
	end
	local function popFast() -- Line: 137
		--[[
			Upvalues:
				[1] = table2
				[2] = p7
		--]]
		table2.root = _merge(p7, table2.root.left, table2.root.right);
	end
	local function empty() -- Line: 146
		--[[
			Upvalues:
				[1] = table2
		--]]
		return table2.root == nil;
	end
	local function clear() -- Line: 153
		--[[
			Upvalues:
				[1] = table2
		--]]
		table2.root = nil;
	end
	function table2.merge(p9) -- Line: 71
		--[[
			Upvalues:
				[1] = table2
				[2] = p7
		--]]
		if table2.root ~= p9.root then
			table2.root = _merge(p7, table2.root, p9.root);
			p9.root = nil;
		end
	end
	table2.insert = insert;
	table2.min = min;
	table2.tryMin = tryMin;
	table2.pop = pop;
	table2.tryPop = tryPop;
	table2.popFast = popFast;
	table2.empty = empty;
	table2.clear = clear;
	return table2;
end
return table1;
  -  Editar
  04:54:13.725    -  Editar
  04:54:13.725  ----- [2203] ReplicatedStorage.Library.Audio -----  -  Editar
  04:54:13.725  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Audio
	===========
	Play SFX and Music through a single module. Pretty basic stuff.
	You can cross-fade music tracks or edit all sound entities without using soundgroups - useful for lots of rapid fire sounds that
	would normally cause sound tearing. Bundled with tons of little random QOL features. Built-in garbage collection, too :D
	===========
		\\\ Play SFX
		Audio.Play(
			id / ids,				<-- |REQ|	Sound ID Supports link or just ID. (also supports array of IDs. Will pick one by random)
			parent / position,		<-- |REQ|	Sound parent or position (cf/v3)
			pitch,					<--			Sound pitch 										[defaults to: 1]
			volume,					<-- 		Sound volume										[defaults to: 0.5]
			max distance,			<-- 		Sound max distance in studs 						[defaults to: 100]
			sound group,			<-- 		Sound group											[defaults to: nil]
			looped,					<-- 		Sound looped 										[defaults to: false]
			start time				<-- 		Sound start time in seconds 						[defaults to: 0]
		)
		
		\\\ Play background music or ambience. Will automatically crossfade with any song that is already playing.
		Audio.PlayMusic(
			id,						<-- |REQ|	Music ID (without link)
			volume,					<-- 		Music volume										[defaults to: 1]
			speed,					<-- 		Crossfade speed in seconds							[defaults to: 1]
			sound group,			<-- 		Sound group											[defaults to: nil]
			looped,					<-- 		Music looped 										[defaults to: true]
			start time				<-- 		Music start time in seconds 						[defaults to: 0]
		)
		
		\\\ Stops any song that is currently playing.
		Audio.StopMusic(
			speed,					<-- 		Crossfade speed in seconds							[defaults to: 1]
		) 
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Functions = require(Library.Functions)
local Settings = require(ClientLibrary.Settings)
local Network = require(ClientLibrary.Network)
local Debug = require(ClientLibrary.Debug)

--------|       Top       |--------
local Audio = {}
--------|     Setting     |--------

--------|    Reference    |--------
local debris = game.Workspace.__DEBRIS
local musicFolder = Instance.new("Folder", script)
local rng = Random.new()
local RunService = game:GetService("RunService")

--------|    Variables    |--------
local garbage = {}
local isClient = RunService:IsClient()

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function Audio.Play(...) 
	--- If server, tell clients to play sound (to keep a secular soundscape)
	if not isClient then
		local Network = require(game:GetService("ServerScriptService"):WaitForChild("Library").Network)
		local args = {...}
		coroutine.wrap(function()
			network.FireAll("PlaySound", unpack(args))
		end)()
		return
	end
	
	--- Unpack
	local id, parent, pitch, volume, maxDistance, soundGroup, looped, startTime = unpack({...})
	
	--- Array of IDs support
	if type(id) == "table" then
		id = id[rng:NextInteger(1, #id)]
	end
	
	if pitch and type(pitch) == "table" then
		pitch = rng:NextNumber(unpack(pitch))
	end
	
	if volume and type(volume) == "table" then
		volume = rng:NextNumber(unpack(volume))
	end
	
	--- Sanity checks
	if not parent then
		--- Abort! Parent doesn't exist.
		warn("Parent cannot be nil", debug.traceback())
		return nil
	elseif id == 0 then
		--- Sound ID is 0 (removed error because console spamming issues)
		return nil
	end
	
	--- Missing link
	if type(id) == "number" or not string.find(id, "rbxassetid://", 1, true) then
		id = "rbxassetid://" .. id
	end
	
	--- Variables
	pitch = (pitch or 1)
	volume = (volume or 0.5)
	soundGroup = soundGroup and game.SoundService:FindFirstChild(soundGroup) or nil
	looped = (looped or false)
	maxDistance = (maxDistance or 100)
	startTime = (startTime == nil and 0 or startTime)
	--
	local rollOffMode = Enum.RollOffMode.Linear
	local name = "sound-" .. id
	local parentWasGenerated = false
	
	--- If parent is Vector3/CFrame - create sound part!
	if not pcall(function()  local x = parent.Parent  end) then
		local position = parent
		
		--- If Vector3, convert to CFrame
		pcall(function() 
			position = CFrame.new(position)
		end)
		
		--- Create host part for sound
		parent = Instance.new("Part")
		parent.Anchored = true
		parent.CanCollide = false
		parent.CFrame = position
		parent.Size = Vector3.new()
		parent.Transparency = 1
		parent.Parent = debris
		
		--- Flag parent for garbage collection
		parentWasGenerated = true
	end
	
	--- Create
	local sound = Instance.new("Sound")
	sound.SoundId = id
	sound.Name = name
	sound.Pitch = pitch
	sound.Volume = volume
	sound.SoundGroup = soundGroup
	sound.Looped = looped
	sound.MaxDistance = maxDistance
	sound.TimePosition = startTime
	sound.RollOffMode = rollOffMode
	sound.Parent = parent
	
	--- Muted?
	if not Settings.SoundsEnabled then
		sound:SetAttribute("CachedVolume", sound.Volume)
		sound.Volume = 0
	end
	
	--- Play sound
	sound:Play()
	
	--- Add to garbage collection
	AddToGarbageCollection(sound, parentWasGenerated)
	
	--
	return sound
end


function Audio.PlayMusic(id, volume, speed, soundGroup, looped, startTime) 
	--- Disable being called on server (compatibility reasons)
	if not isClient then
		warn("Cannot use this on the server!")
		return
	end
	
	--- Sanity checks
	if not Settings.MusicEnabled then
		--- Abort! Sounds are disabled in settings.
		warn("Music is disabled in settings module!")
		return
	elseif id == 0 then
		--- Sound ID is 0
		return 
	end
	
	--- Has link
	if type(id) == "number" or not string.find(id, "rbxassetid://", 1, true) then
		id = "rbxassetid://" .. id
	end
	
	--- Variables
	volume = (volume or 0.5)
	speed = (speed or 1)
	soundGroup = soundGroup and game.SoundService:FindFirstChild(soundGroup) or nil
	looped = (looped == nil and true or looped)
	startTime = (startTime == nil and 0 or startTime)
	--
	local name = "music-" .. id
	
	--- Create
	local music = Instance.new("Sound")
	music.SoundId = id
	music.Volume = 0
	music.Looped = looped
	music.SoundGroup = soundGroup
	music.Parent = musicFolder
	music:Play()
	
	--- Fade function
	local function Fade(song, newVolume) 
		Functions.Tween(song, {Volume = newVolume}, {speed})
	end
	
	--- Fade out
	for _, song in ipairs(musicFolder:GetChildren()) do
		Fade(song, 0)
	end
	
	--- Fade in
	Fade(music, volume)
	
	--
	AddToGarbageCollection(music)
	--
	return music
end


function Audio.StopMusic(speed) 
	--- Disable being called on server (compatibility reasons)
	if not isClient then
		warn("Cannot use this on the server!")
		return
	end
	
	--- Variables
	speed = (speed or 1)
	
	--- Fade function
	local function Fade(p12, p13) 
		Functions.Tween(p12, {Volume = p13}, {speed})
	end
	
	--- Stop current music
	for _, song in ipairs(musicFolder:GetChildren()) do
		Fade(song, 0)
	end
end


------------------------------------------------------------------------------------------------------------------------


--- Pile onto garbage collection
function AddToGarbageCollection(sound, parentWasGenerated)
	--- Add to garbage collection
	table.insert(garbage, {sound, parentWasGenerated or false})
end


--- Scan garbage collection for GARBAGE
function ScanGarbageCollection() 
	for i = #garbage, 1, -1 do
		if i%25 == 0 then
			RunService.Heartbeat:Wait()
		end
		
		--- Variables
		local garbageArray = garbage[i]
		local garbageItem = garbageArray[1]
		local garbageParentWasGenerated = garbageArray[2]
		local due = false
		
		--- Sanity check
		if not due then
			if (not garbageItem) or (not garbageItem.Parent) then
				due = true
			end
		end
		
		--- Stopped check #1
		if not due then
			local playing = garbageItem.Playing
			if not playing then
				due = true
			end
		end
		
		--- Empty sound check
		if not due then
			local soundId = garbageItem.SoundId
			if soundId == "" then
				due = true
			end
		end
		
		--- Remove if due
		if due then
			if garbageParentWasGenerated then
				if garbageItem.Parent then
					Functions.AddDebris(garbageItem.Parent, 0)
				end
			elseif garbageItem then
				Functions.AddDebris(garbageItem, 0)
			end
			table.remove(garbage, i)
		end
	end
	
	--- Debug
	if isClient then
		Debug.Track("Garbage #", "Audio", #garbage)
	end
end
coroutine.wrap(function()
	if isClient then
		while true do
			--- Wait
			wait(1)
			
			--- Scan garbage
			ScanGarbageCollection()
			
			--- Music debug
			local musicPlaying = false
			for _, music in ipairs(musicFolder:GetChildren()) do
				musicPlaying = true
				break
			end
			Debug.Track("Music Playing", "Audio", musicPlaying)
		end
	end
end)()


--- Disabled sounds
if isClient then
	coroutine.wrap(function() 
		local Settings = Settings
		local last = Settings.SoundsEnabled
		while wait() do
			if last ~= Settings.SoundsEnabled then
				last = Settings.SoundsEnabled
				
				--- Scan all active sounds
				for i, v in pairs(garbage) do
					local sound = v[1]
					if sound and sound.Parent ~= musicFolder then
						if not last then
							--- Mute sound and cache volume
							sound:SetAttribute("CachedVolume", sound.Volume)
							sound.Volume = 0
						elseif sound:GetAttribute("CachedVolume") then
							sound.Volume = sound:GetAttribute("CachedVolume")
							sound:SetAttribute("CachedVolume", nil)
						end	
					end
				end	
			end
		end
	end)()
end


--- Recieve sounds from server
if isClient then
	Network.Fired("PlaySound"):Connect(function(...) 
		Audio.Play(...)
	end)
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Audio  -  Editar
  04:54:13.726    -  Editar
  04:54:13.726  ----- [2204] ReplicatedStorage.Library.Print -----  -  Editar
  04:54:13.726  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Print
	===========
	All debug prints and warnings go down this funnel. Adds UTF8 support to messages, conformity, tags, etc. Removes most of the
	manual work and allows extremely easy change if needed. Automatically grabs the path and function print was called from via stack trace.
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")

-- | shared modules | --
local Functions = require(Library.Functions)

--------|       Top       |--------

--------|     Setting     |--------
--- If false, will default to normal printing
local enabled = true

--- Include tags
local tagsEnabled = true

--- Include emojis
local emojisEnabled = true

--- Enable warn color (includes timestamp)
local warnColorEnabled = true

--- Include the FULL path for Framework
local includeScriptPath = true

--- Include line # where print was executed
local includeLineNumber = true

--- Include 'Server' or 'Client'
local includeParentSub = true

--------|    Reference    |--------
local framework = game.ReplicatedStorage:WaitForChild("Framework")

--------|    Variables    |--------
local isStudio = game:GetService("RunService"):IsStudio()

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if not isStudio then
	enabled = false
end

return function(msg, isWarning)  
	if not enabled then
		msg = Functions.TextStyles(msg)
		if isWarning then
			warn(msg)
			return
		end
		print(msg)
		return
	end
	
	--- Variables
	local finalMsg = ""
	local tag
	local emoji
	
	--- Get script trace
	local tostring_ret = tostring(debug.traceback())
	local traceLine
	
	--- Get 3rd line of trace
	local i = 0
	for line in string.gmatch(tostring_ret, "[^\r\n]+") do
		i = i + 1
		if i == 2 then  
			traceLine = line
			break
		end
	end
	
	--- String manipulation
	local isFrameworkDescendant = (string.find(traceLine, "ReplicatedStorage.Framework.Modules.", 1, true) ~= nil)
	local tag
	--
	if isFrameworkDescendant then
		--- Framework modules
		local topHalf = string.gsub(traceLine, "ReplicatedStorage.Framework.Modules.", "")
		if not includeParentSub then
			topHalf = string.gsub(string.gsub(topHalf, "Client.", ""), "Server.", "")
		end
		local modulePath = string.gsub(topHalf, ":.+", "")
		local moduleFunc = string.find(topHalf, " function ") and string.gsub(topHalf, ".+:%d+ function ", "")
		modulePath = string.gsub(modulePath, "%d+ | ", "")
		tag = "_L." .. modulePath .. (moduleFunc and ("." .. moduleFunc) or "")
		
	else
		local withoutPath = traceLine
		if not includeScriptPath then
			repeat
				local beforeWithoutPath = withoutPath
				withoutPath = string.gsub(withoutPath, ".+%.", "")	
			until (withoutPath == beforeWithoutPath)
		end
		local withoutEnd = string.gsub(withoutPath, ":.+", "")
		tag = withoutEnd
	end
	--
	tag = "[bold]" .. tag .. "[/bold]"
	
	--- Line number
	if includeLineNumber then
		local lineNumber = string.gsub(string.gsub(tostring(string.match(traceLine, ":%d+")), "%s", ""), ":", "")
		tag = "[cursive]" .. lineNumber .. "[/cursive] | " .. tag
	end	

	--- Emoji tag
	if emojisEnabled then
		emoji = isWarning and "⚠" or "📌"
	end	
	
	--- Formatting and UTF8
	finalMsg = emoji .. " " .. tag .. " | " .. msg
	finalMsg = Functions.TextStyles(finalMsg)
	
	--- Print
	if isWarning and warnColorEnabled then
	    warn(finalMsg)
	else
		print(finalMsg)
	end
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -  Editar
  04:54:13.726    -  Editar
  04:54:13.727  ----- [2205] ReplicatedStorage.Library.Shared -----  -  Editar
  04:54:13.727  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Shared
	===========
	Crosses the client -> server boundry and allows you to share any data, variables, functions, etc.
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------|       Top       |--------
local Shared = {}

--------|     Setting     |--------

--------|    Reference    |--------
local Variables = require(script.Variables)
local Functions = require(script.Functions)

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

setmetatable(Variables, {__index = Functions})

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Variables
  -  Editar
  04:54:13.727    -  Editar
  04:54:13.727  ----- [2206] ReplicatedStorage.Library.Shared.Functions -----  -  Editar
  04:54:13.727  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local table1 = {
	PromptPurchase = require(script.PromptPurchase), 
	IsInTransaction = require(script.IsInTransaction), 
	ComputeSaveAge = require(script.ComputeSaveAge), 
	SignalStatUpdated = require(script.SignalStatUpdated), 
	MasteryLevelToXP = require(script.MasteryLevelToXP), 
	MasteryXPToLevel = require(script.MasteryXPToLevel), 
	GetMaxEquippedSlots = require(script.GetMaxEquippedSlots), 
	HasPetEquipped = require(script.HasPetEquipped), 
	GetPetEgg = require(script.GetPetEgg), 
	GetPetChance = require(script.GetPetChance), 
	PetInEgg = require(script.PetInEgg), 
	GetAllCollectablePets = require(script.GetAllCollectablePets), 
	GetPowerDir = require(script.GetPowerDir), 
	HasPower = require(script.HasPower), 
	GetDMSkipProduct = require(script.GetDMSkipProduct), 
	GetHugeMachineProduct = require(script.GetHugeMachineProduct), 
	ComputeHugeMachinePoints = require(script.ComputeHugeMachinePoints), 
	ComputeEventMachinePoints = require(script.ComputeEventMachinePoints), 
	ComputeEvolveMachinePets = require(script.ComputeEvolveMachinePets), 
	ApplyRarityColor = require(script.ApplyRarityColor), 
	PetTypeIndex = require(script.PetTypeIndex), 
	PetOrderBest = require(script.PetOrderBest), 
	PetOrderParty = require(script.PetOrderParty), 
	PetOrderInv = require(script.PetOrderInv), 
	SortPets = require(script.SortPets), 
	ValidateInteractable = require(script.ValidateInteractable), 
	ValidateEgg = require(script.ValidateEgg), 
	ValidateGate = require(script.ValidateGate), 
	ShowPetExists = require(script.ShowPetExists), 
	ValidateDistanceGeneric = require(script.ValidateDistanceGeneric), 
	ValidateCannon = require(script.ValidateCannon), 
	ValidateBooth = require(script.ValidateBooth), 
	HatchMessage = require(script.HatchMessage), 
	DaycareComparePossibleLoot = require(script.DaycareComparePossibleLoot), 
	DaycareComputeRemainingTime = require(script.DaycareComputeRemainingTime), 
	DaycareComputeSlotsForTier = require(script.DaycareComputeSlotsForTier), 
	ComputePetStrength = require(script.ComputePetStrength), 
	CanAuctionPet = require(script.CanAuctionPet), 
	CanAuctionPetDir = require(script.CanAuctionPetDir), 
	PetName = require(script.PetName), 
	PetNameShort = require(script.PetNameShort), 
	HasProTradingAccess = require(script.HasProTradingAccess), 
	ScavengerEggCFrameToString = require(script.ScavengerEggCFrameToString), 
	GetSave = require(script.GetSave), 
	CanAccessDiamondMine = require(script.CanAccessDiamondMine), 
	OwnsGamepass = require(script.OwnsGamepass),
	GetAllBloombergPets = require(script.GetAllBloombergPets),
	GetYeetPower = require(script.GetYeetPower),
	PetOrderYeet = require(script.PetOrderYeet)
};
local v1 = "";
for _, child1 in ipairs(script:GetChildren()) do
	if not child1:IsA("ModuleScript") or table1[child1.Name] ~= nil then continue end
	v1 = v1 .. string.format("%s = require(script.%s),\n", child1.Name, child1.Name);
end
if #v1 > 0 then
	warn(string.format("Unadded entries: \n\n%s\n", v1));
end
for key2, _ in pairs(table1) do
	if script:FindFirstChild(key2) then continue end
	warn(string.format("Unknown entry: %s", tostring(key2)));
end
for _, child3 in ipairs(script:GetChildren()) do
	if not child3:IsA("ModuleScript") or table1[child3.Name] ~= nil then continue end
	table1[child3.Name] = require(child3);
end
return table1;
  -  Editar
  04:54:13.727    -  Editar
  04:54:13.727  ----- [2207] ReplicatedStorage.Library.Shared.Functions.ApplyRarityColor -----  -  Editar
  04:54:13.727  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local UI = Assets:WaitForChild("UI");
local Raritys = UI:WaitForChild("Raritys");
return function(p1, p2) -- Line: 10
	--[[
		Upvalues:
			[1] = Raritys
	--]]
	local Clone_ret = Raritys:WaitForChild(p2):Clone();
	Clone_ret.Parent = p1;
end;
  -  Editar
  04:54:13.727    -  Editar
  04:54:13.727  ----- [2208] ReplicatedStorage.Library.Shared.Functions.ValidateInteractable -----  -  Editar
  04:54:13.727  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local m_FFlags = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	m_FFlags = require(ServerScriptService:WaitForChild("Library").FFlags);
end
local m_ValidateDistanceGeneric = require(script.Parent.ValidateDistanceGeneric);
return function(p1, p2, p3) -- Line: 15
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = m_ValidateDistanceGeneric
	--]]
	if not m_FFlags.Get(m_FFlags.Keys.DistanceChecksInteractable) then
		return true;
	end
	return m_ValidateDistanceGeneric(p1, p3, function(p4) -- Line: 21
		--[[
			Upvalues:
				[1] = p2
		--]]
		local Interactive = p4:FindFirstChild("Interactive");
		if not Interactive then
			return nil;
		end
		local FindFirstChild_ret = Interactive:FindFirstChild(p2);
		return FindFirstChild_ret;
	end);
end;
  -  Editar
  04:54:13.727    -  Editar
  04:54:13.727  ----- [2209] ReplicatedStorage.Library.Shared.Functions.GetAllCollectablePets -----  -  Editar
  04:54:13.728  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local m_Directory = require(ReplicatedStorage:WaitForChild("Library").Directory);
local m_PetInEgg = require(script.Parent.PetInEgg);
local u1 = nil;
return function() -- Line: 22
	--[[
		Upvalues:
			[1] = u1
			[2] = m_Directory
			[3] = m_PetInEgg
	--]]
	local v1 = u1;
	if v1 then
		return v1;
	end
	local table1 = {};
	for key1, val1 in pairs(m_Directory.Pets) do
		if val1.hidden or val1.isGift or val1.rarity ~= "Exclusive" and val1.rarity ~= "Event" and not m_PetInEgg(key1) and not val1.isVanity then continue end
		for index1 = 1, (val1.rarity == "Exclusive" or val1.rarity == "Event") and 1 or 4 do
			table.insert(table1, {
				petId = key1,
				isGolden = index1 == 2,
				isRainbow = index1 == 3,
				isDarkMatter = index1 == 4
			});
		end
	end
	u1 = table1;
	return table1;
end;
  -  Editar
  04:54:13.728    -  Editar
  04:54:13.728  ----- [2210] ReplicatedStorage.Library.Shared.Functions.ComputeHugeMachinePoints -----  -  Editar
  04:54:13.728  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Pets);
return function(p1, p2) -- Line: 11
	assert(p1);
	assert(p2);
	if p1.l then
		return nil;
	end
	if p2.ignoreConvert then
		return nil;
	end
	if p2.rarity ~= "Exclusive" then
		return nil;
	end
	if p2.huge then
		return nil;
	end
	if p2.titanic then
		return nil;
	end
	if p2.giftEggId then
		return nil;
	end
	if p2.extremelyRare then
		return nil;
	end
	local v1 = 0;
	if p2.convertPoints then
		v1 = v1 + p2.convertPoints;
	elseif p2.companionEnchantLevel then
		v1 = v1 + p2.companionEnchantLevel;
	end
	if v1 <= 0 then
		return nil;
	end
	if p1.g then
		v1 = v1 + 1;
	end
	if p1.r then
		v1 = v1 + 2;
	end
	if p1.sh then
		v1 = v1 + 3;
	end
	return v1;
end;
  -  Editar
  04:54:13.728    -  Editar
  04:54:13.728  ----- [2211] ReplicatedStorage.Library.Shared.Functions.GetMaxEquippedSlots -----  -  Editar
  04:54:13.728  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_Variables = require(script.Parent.Parent.Variables);
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").DefaultStats);
return function(p1) -- Line: 12
	--[[
		Upvalues:
			[1] = m_Variables
	--]]
	local v1 = 1;
	if m_Variables.IsHardcore then
		v1 = v1 * 2;
	end
	return p1.MaxEquipped * v1;
end;
  -  Editar
  04:54:13.728    -  Editar
  04:54:13.728  ----- [2212] ReplicatedStorage.Library.Shared.Functions.GetPetChance -----  -  Editar
  04:54:13.728  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_GetPetEgg = require(script.Parent.GetPetEgg);
local m_Variables = require(script.Parent.Parent.Variables);
return function(p1) -- Line: 7
	--[[
		Upvalues:
			[1] = m_GetPetEgg
			[2] = m_Variables
	--]]
	local v1, v2 = m_GetPetEgg(p1);
	if v1 and v2 then
		local v3 = 0;
		local v4 = 0;
		for _, val1 in ipairs(v2.drops) do
			if val1[3] and not m_Variables.IsHardcore then continue end
			v3 = v3 + val1[2];
			if val1[1] ~= p1 then continue end
			v4 = val1[2];
		end
		return v4 / v3;
	end
	return nil;
end;
  -  Editar
  04:54:13.728    -  Editar
  04:54:13.728  ----- [2213] ReplicatedStorage.Library.Shared.Functions.GetPetEgg -----  -  Editar
  04:54:13.728  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);
local m_Variables = require(script.Parent.Parent.Variables);
return function(p1) -- Line: 13
	--[[
		Upvalues:
			[1] = m_Directory
			[2] = m_Variables
	--]]
	for key1, val1 in pairs(m_Directory.Eggs) do
		if val1.disabled or val1.isGolden then continue end
		for _, val2 in ipairs(val1.drops) do
			if val2[1] ~= p1 or val2[2] <= 0 or val2[3] and not m_Variables.IsHardcore then continue end
			return key1, val1;
		end
	end
	return nil, nil;
end;
  -  Editar
  04:54:13.728    -  Editar
  04:54:13.729  ----- [2214] ReplicatedStorage.Library.Shared.Functions.GetPowerDir -----  -  Editar
  04:54:13.729  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
return function(p1, p2) -- Line: 11
	--[[
		Upvalues:
			[1] = m_Directory
	--]]
	local tonumber_ret = tonumber(p2);
	if not tonumber_ret then
		warn("GetPowerDir was given nil tier!!!!!");
		return nil, nil;
	end
	assert(tonumber_ret);
	local v1 = m_Directory.Powers[p1];
	if not v1 then
		return nil, nil;
	end
	assert(v1);
	local v2 = v1.tiers[tonumber_ret];
	if not v2 then
		return nil, nil;
	end
	assert(v2);
	return v2, v1;
end;
  -  Editar
  04:54:13.729    -  Editar
  04:54:13.729  ----- [2215] ReplicatedStorage.Library.Shared.Functions.ComputePetStrength -----  -  Editar
  04:54:13.729  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Pets);
local m_Variables = require(script.Parent.Parent.Variables);
return function(p1) -- Line: 12
	--[[
		Upvalues:
			[1] = m_Variables
	--]]
	local v1 = p1.s or 0;
	if p1.hc then
		if m_Variables.IsHardcore then
			v1 = v1 * m_Variables.HardcorePetMult;
		else
			local v3 = v1 * m_Variables.HardcorePetMultNormal;
			v1 = math.max(v3, m_Variables.HardcorePetMinPowerNormal);
		end
	end
	local math_round_ret = math.round(v1);
	local v2 = math.max(math_round_ret, 0);
	if v2 ~= v2 or v2 == math.huge then
		v2 = 0;
	end
	return v2;
end;
  -  Editar
  04:54:13.729    -  Editar
  04:54:13.729  ----- [2216] ReplicatedStorage.Library.Shared.Functions.HasPetEquipped -----  -  Editar
  04:54:13.729  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_Variables = require(script.Parent.Parent.Variables);
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local _ = require(Modules.DefaultStats);
local _ = require(Modules.Pets);
return function(p1, p2) -- Line: 13
	--[[
		Upvalues:
			[1] = m_Variables
	--]]
	if p2 and (m_Variables.IsHardcore and p1.HardcorePetsEquipped or p1.PetsEquipped)[p2.uid] then
		return true;
	end
	return false;
end;
  -  Editar
  04:54:13.729    -  Editar
  04:54:13.729  ----- [2217] ReplicatedStorage.Library.Shared.Functions.HasPower -----  -  Editar
  04:54:13.729  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Pets);
return function(p1, p2) -- Line: 11
	local t_powers = p1.powers;
	if t_powers then
		for _, val1 in ipairs(t_powers) do
			if val1[1] ~= p2 then continue end
			return true, val1[2];
		end
	end
	return false, 0;
end;
  -  Editar
  04:54:13.729    -  Editar
  04:54:13.729  ----- [2218] ReplicatedStorage.Library.Shared.Functions.MasteryLevelToXP -----  -  Editar
  04:54:13.729  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1) -- Line: 3
	return (p1 + -1) * 100 * (p1 + 1);
end;
  -  Editar
  04:54:13.729    -  Editar
  04:54:13.730  ----- [2219] ReplicatedStorage.Library.Shared.Functions.MasteryXPToLevel -----  -  Editar
  04:54:13.730  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1) -- Line: 3
	return math.floor(math.sqrt(p1 + 100) * 10 / 100);
end;
  -  Editar
  04:54:13.730    -  Editar
  04:54:13.730  ----- [2220] ReplicatedStorage.Library.Shared.Functions.PetInEgg -----  -  Editar
  04:54:13.730  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_GetPetEgg = require(script.Parent.GetPetEgg);
return function(p1) -- Line: 6
	--[[
		Upvalues:
			[1] = m_GetPetEgg
	--]]
	return m_GetPetEgg(p1) ~= nil;
end;
  -  Editar
  04:54:13.730    -  Editar
  04:54:13.730  ----- [2221] ReplicatedStorage.Library.Shared.Functions.PetOrderYeet -----  -  Editar
  04:54:13.730  -- Decompiled using Krnl
local v6 = require(script.Parent.Parent.Variables)
local v9 = (game:GetService("ReplicatedStorage")):WaitForChild("Library")
local v12 = v9:WaitForChild("Modules")
local v15 = require(v9.Directory)
local v18 = require(v12.Pets)
local v21 = require(v12.DefaultStats)
local v26 = require(script.Parent.HasPetEquipped)
local v29 = require(script.Parent.PetOrderBest)
local v32 = require(script.Parent.GetYeetPower)
return function(p1, p2, p3, p4, p5, p6, p7, p8)
	local v43 = v15.Pets[p2.id].yeetPower ~= nil
	if v43 ~= v15.Pets[p3.id].yeetPower ~= nil then
		if v43 then
			return -1
		end
		return 1
	end
	return v32(p3) - v32(p2)
end
  -  Editar
  04:54:13.730    -  Editar
  04:54:13.730  ----- [2222] ReplicatedStorage.Library.Shared.Functions.PetOrderInv -----  -  Editar
  04:54:13.730  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local _ = require(script.Parent.Parent.Variables);
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);
local _ = require(Modules.DefaultStats);
local m_HasPetEquipped = require(script.Parent.HasPetEquipped);
local m_PetOrderBest = require(script.Parent.PetOrderBest);
return function(p1, p2, p3, p4, p5, p6, p7, p8)  
	local v1 = m_Directory.Pets[p2.id];
	local v2 = m_Directory.Pets[p3.id];
	local v3 = v1.titanic == true;
	if v2.titanic == true ~= v3 then
		if v3 then
			return -1;
		end
		return 1;
	end
	if p1 and not p4 then
		local v5 = m_HasPetEquipped(p1, p2);
		if m_HasPetEquipped(p1, p3) ~= v5 then
			if v5 then
				return -1;
			end
			return 1;
		end
	end
	local v4 = v1.isGift == true;
	if v2.isGift == true ~= v4 then
		if v4 then
			return -1;
		end
		return 1;
	end
	if p5 == nil then
		p5 = true
	end
	return m_PetOrderBest(p2, p3, p5, p6, p7, p8);
end;
  -  Editar
  04:54:13.730    -  Editar
  04:54:13.731  ----- [2223] ReplicatedStorage.Library.Shared.Functions.PetOrderParty -----  -  Editar
  04:54:13.731  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);
local m_PetTypeIndex = require(script.Parent.PetTypeIndex);
local m_ComputePetStrength = require(script.Parent.ComputePetStrength);
return function(p1, p2) -- Line: 15
	--[[
		Upvalues:
			[1] = m_Directory
			[2] = m_ComputePetStrength
			[3] = m_PetTypeIndex
	--]]
	local t_id = p1.id;
	local t_id2 = p2.id;
	local v1 = m_Directory.Pets[t_id];
	local v2 = m_Directory.Pets[t_id2];
	local v3 = v1.titanic == true;
	if v2.titanic == true ~= v3 then
		if v3 then
			return -1;
		end
		return 1;
	end
	local v4 = v1.huge == true;
	if v2.huge == true ~= v4 then
		if v4 then
			return 1;
		end
		return -1;
	end
	local v5 = v1.companionEnchantLevel or 0;
	local v6 = v2.companionEnchantLevel or 0;
	if v5 ~= v6 then
		return v6 - v5;
	end
	if not v3 and not v4 and v5 == 0 then
		local v9 = m_ComputePetStrength(p1);
		local v10 = m_ComputePetStrength(p2);
		if v9 ~= v10 then
			return v10 - v9;
		end
	end
	local v7 = m_PetTypeIndex(p1);
	local v8 = m_PetTypeIndex(p2);
	if v7 ~= v8 then
		return v8 - v7;
	end
	if t_id ~= t_id2 then
		if t_id2 < t_id then
			return -1;
		end
		return 1;
	end
	return (p1.idt or 0) - (p2.idt or 0);
end;
  -  Editar
  04:54:13.731    -  Editar
  04:54:13.731  ----- [2224] ReplicatedStorage.Library.Shared.Functions.PetTypeIndex -----  -  Editar
  04:54:13.731  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Pets);
return function(p1) -- Line: 11
	local v1 = 0;
	if p1.dm == true then
		v1 = v1 + 8;
	end
	if p1.sh == true then
		v1 = v1 + 4;
	end
	if p1.r == true then
		v1 = v1 + 2;
	end
	if p1.g == true then
		v1 = v1 + 1;
	end
	return v1;
end;
  -  Editar
  04:54:13.731    -  Editar
  04:54:13.731  ----- [2225] ReplicatedStorage.Library.Shared.Functions.SortPets -----  -  Editar
  04:54:13.731  -- Decompiled using Krnl
local Modules = game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Modules")
local Pets = require(Modules.Pets)
local DefaultStats = require(Modules.DefaultStats)
local PetOrderInv = require(script.Parent.PetOrderInv)
return function(p1, p2, p3)
	table.sort(p2, function(p4, p5)
		return 0 > PetOrderInv(p1, p4, p5, p3)
	end)
	return p2
end
  -  Editar
  04:54:13.731    -  Editar
  04:54:13.731  ----- [2226] ReplicatedStorage.Library.Shared.Functions.IsInTransaction -----  -  Editar
  04:54:13.731  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local m_Signal = require(ReplicatedStorage:WaitForChild("Library").Signal);
return function(p1, p2) -- Line: 9
	--[[
		Upvalues:
			[1] = m_Signal
	--]]
	local v1;
	if typeof(p1) == "number" then
		v1 = p1;
	else
		assert(typeof(p1) == "Instance" and p1:IsA("Player") or false);
		v1 = p1.UserId;
	end
	local table1 = {
		booth = m_Signal.Invoke("Is In Booth Transaction", v1) == true,
		trade = m_Signal.Invoke("Is In Trade", v1) == true,
		generic = m_Signal.Invoke("Is In Generic Transaction", v1) == true
	};
	assert(p2 == nil and true or typeof(p2) == "string" and table1[string.lower(p2)] ~= nil or false);
	for key1, val1 in pairs(table1) do
		if p2 and string.lower(p2) == key1 or not val1 then continue end
		return true;
	end
	return false;
end;
  -  Editar
  04:54:13.731    -  Editar
  04:54:13.732  ----- [2227] ReplicatedStorage.Library.Shared.Functions.PromptPurchase -----  -  Editar
  04:54:13.732  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local MarketplaceService = game:GetService("MarketplaceService");
local Players = game:GetService("Players");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Client = Library:WaitForChild("Client");
local m_FFlags = nil;
local m_Message = nil;
local m_Gamepasses = nil;
if RunService:IsClient() then
	m_FFlags = require(Client.FFlags);
	m_Message = require(Client.Message);
	m_Gamepasses = require(Client.Gamepasses);
end
local m_Audio = require(Library.Audio);
local m_Signal = require(Library.Signal);
return function(p1, p2) -- Line: 22
	if not m_FFlags.Get(m_FFlags.Keys.Purchases) and not m_FFlags.CanBypass() then
		m_Message.New("Sorry! Roblox is having trouble so we have temporarily disabled purchases! Try back soon!");
		return;
	end
	if p1 == 0 then
		m_Message.New("Sorry! This product hasn't been uploaded yet! Come back soon!")
		return
	end
	if p2 then
		m_Audio.Play("rbxassetid://6926253319", script, 1.35, 0.6);
		m_Signal.Fire("Prompting Purchase");
		MarketplaceService:PromptProductPurchase(Players.LocalPlayer, p1);
		return;
	end
	local v1 = m_Gamepasses.Owns(p1);
	if not v1 then
		m_Audio.Play("rbxassetid://6926253319", script, 1.35, 0.6);
		m_Signal.Fire("Prompting Purchase");
		MarketplaceService:PromptGamePassPurchase(Players.LocalPlayer, p1);
	end
end;
  -  Editar
  04:54:13.732    -  Editar
  04:54:13.732  ----- [2228] ReplicatedStorage.Library.Shared.Functions.ValidateEgg -----  -  Editar
  04:54:13.732  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local m_FFlags = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	m_FFlags = require(ServerScriptService:WaitForChild("Library").FFlags);
end
local m_ValidateDistanceGeneric = require(script.Parent.ValidateDistanceGeneric);
return function(p1, p2, p3) -- Line: 15
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = m_ValidateDistanceGeneric
	--]]
	if not m_FFlags.Get(m_FFlags.Keys.DistanceChecksEgg) then
		return true;
	end
	return m_ValidateDistanceGeneric(p1, p3, function(p4) -- Line: 21
		--[[
			Upvalues:
				[1] = p2
		--]]
		local Eggs = p4:FindFirstChild("Eggs");
		if not Eggs then
			return nil;
		end
		for _, child1 in ipairs(Eggs:GetChildren()) do
			local Eggs2 = child1:FindFirstChild("Eggs");
			if not Eggs2 then continue end
			for _, child2 in ipairs(Eggs2:GetChildren()) do
				if child2:GetAttribute("ID") ~= p2 or not child2:IsA("PVInstance") then continue end
				return child2;
			end
		end
		return nil;
	end);
end;
  -  Editar
  04:54:13.732    -  Editar
  04:54:13.732  ----- [2229] ReplicatedStorage.Library.Shared.Functions.ValidateGate -----  -  Editar
  04:54:13.732  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local m_FFlags = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	m_FFlags = require(ServerScriptService:WaitForChild("Library").FFlags);
end
local m_ValidateDistanceGeneric = require(script.Parent.ValidateDistanceGeneric);
return function(p1, p2, p3) -- Line: 15
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = m_ValidateDistanceGeneric
	--]]
	if not m_FFlags.Get(m_FFlags.Keys.DistanceChecksGate) then
		return true;
	end
	return m_ValidateDistanceGeneric(p1, p3, function(p4) -- Line: 21
		--[[
			Upvalues:
				[1] = p2
		--]]
		local Gates = p4:FindFirstChild("Gates");
		
		if Gates then
			local FindFirstChild_ret2 = Gates:FindFirstChild(p2);
			if FindFirstChild_ret2 then
				if FindFirstChild_ret2:IsA("PVInstance") then
					return FindFirstChild_ret2;
				end
				local Gate = FindFirstChild_ret2:FindFirstChild("Gate");
				if Gate and Gate:IsA("PVInstance") then
					return Gate;
				end
			end
		end
		
		local Interactive = p4:FindFirstChild("Interactive");
		if Interactive then
			local Portals = Interactive:FindFirstChild("Portals");
			if Portals then
				local FindFirstChild_ret = Portals:FindFirstChild(p2);
				if FindFirstChild_ret and FindFirstChild_ret:IsA("PVInstance") then
					return FindFirstChild_ret;
				end
			end
		end
		
		warn("[ValidateGate] Nothing found for:", p2);
		return nil;
	end);
end;
  -  Editar
  04:54:13.732    -  Editar
  04:54:13.733  ----- [2230] ReplicatedStorage.Library.Shared.Functions.ShowPetExists -----  -  Editar
  04:54:13.733  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Pets);
local m_Directory = require(Library.Directory);
local m_Variables = require(script.Parent.Parent.Variables);
return function(p1) -- Line: 13
	--[[
		Upvalues:
			[1] = m_Variables
			[2] = m_Directory
	--]]
	if p1.merchData then
		return false;
	end
	if m_Variables.PetsForSale[p1.id] then
		return false;
	end
	local v1 = m_Directory.Pets[p1.id];
	if not v1 then
		return true;
	end
	if v1.isGift then
		return false;
	end
	return true;
end;
  -  Editar
  04:54:13.733    -  Editar
  04:54:13.733  ----- [2231] ReplicatedStorage.Library.Shared.Functions.ValidateDistanceGeneric -----  -  Editar
  04:54:13.733  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_Variables = require(script.Parent.Parent.Variables);
local RunService = game:GetService("RunService");
local m_Saving = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	local Library = ServerScriptService:WaitForChild("Library");
	local _ = require(Library.FFlags);
	m_Saving = require(Library.Saving);
end
return function(p1, p2, p3) -- Line: 17
	--[[
		Upvalues:
			[1] = m_Saving
			[2] = m_Variables
	--]]
	assert(typeof(p1) == "Instance" and p1:IsA("Player") or false);
	assert(typeof(p3) == "function");
	assert(p2 == nil and true or typeof(p2) == "number");
	local t_Character = p1.Character;
	if not t_Character then
		return false;
	end
	assert(t_Character);
	if not t_Character.PrimaryPart then
		return false;
	end
	local t_Position = t_Character:GetPivot().Position;
	local Safe = m_Saving.Get(p1) --m_Saving.GetSafe(p1);
	if not Safe then
		return false;
	end
	assert(Safe);
	local v1 = m_Variables.IsHardcore and Safe.Hardcore.World or Safe.World;
	if not v1 then
		return false;
	end
	local __WORLDS = game.ServerStorage:WaitForChild("__WORLDS");
	if not __WORLDS then
		return false;
	end
	local FindFirstChild_ret = __WORLDS:FindFirstChild(v1);
	if not FindFirstChild_ret then
		return false;
	end
	local MAP = FindFirstChild_ret:FindFirstChild("MAP");
	if not MAP then
		return false;
	end
	local v2 = p3(MAP);
	if not v2 then
		return false;
	end
	assert(v2);
	local t_Position2;
	if v2:IsA("Model") then
		if not v2.PrimaryPart then
			warn("[ValidateDistanceGeneric] No PrimaryPart on ", v1, v2.Name);
			return false;
		end
		t_Position2 = v2:GetPivot().Position;
	else
		if not v2:IsA("BasePart") then
			return false;
		end
		t_Position2 = v2:GetPivot().Position;
	end
	if (p2 or 100) < (t_Position - t_Position2).Magnitude then
		return false;
	end
	return true;
end;
  -  Editar
  04:54:13.733    -  Editar
  04:54:13.733  ----- [2232] ReplicatedStorage.Library.Shared.Functions.ValidateCannon -----  -  Editar
  04:54:13.733  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local m_FFlags = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	m_FFlags = require(ServerScriptService:WaitForChild("Library").FFlags);
end
local m_ValidateDistanceGeneric = require(script.Parent.ValidateDistanceGeneric);
return function(p1, p2, p3) -- Line: 15
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = m_ValidateDistanceGeneric
	--]]
	if not m_FFlags.Get(m_FFlags.Keys.DistanceChecksCannon) then
		return true;
	end
	return m_ValidateDistanceGeneric(p1, p3, function(p4) -- Line: 21
		--[[
			Upvalues:
				[1] = p2
		--]]
		local Cannons = p4:FindFirstChild("Cannons");
		if not Cannons then
			return nil;
		end
		assert(Cannons);
		local FindFirstChild_ret = Cannons:FindFirstChild(p2);
		if not FindFirstChild_ret then
			return nil;
		end
		assert(FindFirstChild_ret);
		return FindFirstChild_ret;
	end);
end;
  -  Editar
  04:54:13.733    -  Editar
  04:54:13.733  ----- [2233] ReplicatedStorage.Library.Shared.Functions.ValidateBooth -----  -  Editar
  04:54:13.734  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local m_FFlags = nil;
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	m_FFlags = require(ServerScriptService:WaitForChild("Library").FFlags);
end
local m_ValidateDistanceGeneric = require(script.Parent.ValidateDistanceGeneric);
return function(p1, p2, p3) -- Line: 15
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = m_ValidateDistanceGeneric
	--]]
	if not m_FFlags.Get(m_FFlags.Keys.DistanceChecksEgg) then
		return true;
	end
	return m_ValidateDistanceGeneric(p1, p3, function(p4) -- Line: 21
		--[[
			Upvalues:
				[1] = p2
		--]]
		local BoothSpawns = p4:FindFirstChild("BoothSpawns");
		if not BoothSpawns then
			return nil;
		end
		for _, child1 in ipairs(BoothSpawns:GetChildren()) do
			if child1:GetAttribute("ID") ~= p2 then continue end
			return child1;
		end
		return nil;
	end);
end;
  -  Editar
  04:54:13.734    -  Editar
  04:54:13.734  ----- [2234] ReplicatedStorage.Library.Shared.Functions.GetDMSkipProduct -----  -  Editar
  04:54:13.734  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_Variables = require(script.Parent.Parent.Variables);
return function(p1) -- Line: 6
	--[[
		Upvalues:
			[1] = m_Variables
	--]]
	for _, val1 in ipairs(m_Variables.DarkMatterSkipProducts) do
		if p1 > val1.timeLeft then continue end
		return val1.productId;
	end
	return nil;
end;
  -  Editar
  04:54:13.734    -  Editar
  04:54:13.734  ----- [2235] ReplicatedStorage.Library.Shared.Functions.GetHugeMachineProduct -----  -  Editar
  04:54:13.734  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_Variables = require(script.Parent.Parent.Variables);
return function(p1, p2) -- Line: 6
	--[[
		Upvalues:
			[1] = m_Variables
	--]]
	local v1 = p2 or m_Variables.HugeMachineMaxPetPoints - 1;
	local v2 = nil;
	for _, val1 in ipairs(m_Variables.HugeMachineUseProducts) do
		if val1.pointsMin > p1 or v2 and v2.pointsMin >= val1.pointsMin or p1 > val1.pointsMax + v1 then continue end
		v2 = val1;
	end
	return v2;
end;
  -  Editar
  04:54:13.735    -  Editar
  04:54:13.735  ----- [2236] ReplicatedStorage.Library.Shared.Functions.HatchMessage -----  -  Editar
  04:54:13.735  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);

local table2 = {
	Basic = {
		Message = function(p3, p4, p5)  
			return ("%* hatched a %* %*!"):format(p3, p4, p5);
		end,
		Color = Color3.fromRGB(122, 122, 122),
		Announce = false
	},
	Rare = {
		Message = function(p6, p7, p8) 
			return ("%* hatched a %* %*!"):format(p6, p7, p8);
		end,
		Color = Color3.fromRGB(75, 255, 90),
		Announce = false
	},
	Epic = {
		Message = function(p9, p10, p11)  
			return ("%* hatched an %* %*!"):format(p9, p10, p11);
		end,
		Color = Color3.fromRGB(255, 234, 71),
		Announce = false
	},
	Legendary = {
		Message = function(p12, p13, p14)
			return ("%* hatched a %* %*!"):format(p12, p13, p14);
		end,
		Color = Color3.fromRGB(255, 69, 246),
		Announce = false
	},
	Mythical = {
		Message = function(p15, p16, p17)  
			return ("WOW! %* hatched a %* %*!"):format(p15, p16:upper(), p17);
		end,
		Color = Color3.fromRGB(255, 140, 0),
		Announce = true
	},
	Secret = {
		Message = function(p18, p19, p20) 
			return ("OMG! %* hatched a %* %*!"):format(p18, p19:upper(), p20);
		end,
		Color = Color3.fromRGB(34, 34, 34),
		Announce = true
	},
	Event = {
		Message = function(p21, p22, p23)  
			return ("Nice! %* hatched an %* %*!"):format(p21, p22:upper(), p23);
		end,
		Color = Color3.fromRGB(213, 115, 255),
		Announce = true
	},
	Exclusive = {
		Message = function(p24, p25, p26)  
			return ("%* hatched an %* %*! CONGRATS!"):format(p24, p25:upper(), p26);
		end,
		Color = Color3.fromRGB(213, 115, 255),
		Announce = true
	}
};
return function(p1, p2) 
	local v1 = m_Directory.Pets[p1.id];
	local table3 = {};
	if p1.sh then
		table.insert(table3, "Shiny");
	end
	if p1.r then
		table.insert(table3, "Rainbow");
	elseif p1.g then
		table.insert(table3, "Golden");
	end
	local v2 = table.concat(table3, " ");
	if #table3 > 0 then
		v2 = v2 .. " ";
	end
	local v3 = v2 .. v1.name;
	local t_DisplayName = p2.DisplayName;
	local t_rarity = v1.rarity;
	local v4 = table2[t_rarity] or table2["Basic"];
	return v4.Message(t_DisplayName, t_rarity, v3), v4.Color, v4.Announce;
end;

   -  Editar
  04:54:13.735    -  Editar
  04:54:13.735  ----- [2237] ReplicatedStorage.Library.Shared.Functions.DaycareComparePossibleLoot -----  -  Editar
  04:54:13.735  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").Daycare);
local m_PetOrderBest = require(script.Parent.PetOrderBest);
local table1 = {
	"Diamonds",
	"Valentine Hearts",
	"Clover Coins",
	"Easter Coins",
	"Gingerbread",
	"Halloween Candy",
	"Cartoon Coins",
	"Fantasy Coins",
	"Tech Coins",
	"Rainbow Coins",
	"Coins"
};
local table2 = {};
for key1, val1 in ipairs(table1) do
	table2[val1] = key1;
end
local table3 = {
	"Triple Damage",
	"Triple Coins",
	"Ultra Lucky",
	"Super Lucky"
};
local table4 = {};
for key2, val2 in ipairs(table3) do
	table4[val2] = key2;
end
local table5 = {
	"Currency",
	"Boost",
	"Pet"
};
local table6 = {};
for key3, val3 in ipairs(table5) do
	table6[val3] = key3;
end
local table7 = {
	Currency = function(p3, p4) -- Line: 61
		--[[
			Upvalues:
				[1] = table2
		--]]
		local v3 = table2[p3.Data];
		local v4 = table2[p4.Data];
		if v3 < v4 then
			return -1;
		end
		if v4 < v3 then
			return 1;
		end
		return 0;
	end,
	Boost = function(p5, p6) -- Line: 67
		--[[
			Upvalues:
				[1] = table4
		--]]
		local v5 = table4[p5.Data];
		local v6 = table4[p6.Data];
		if v5 < v6 then
			return -1;
		end
		if v6 < v5 then
			return 1;
		end
		return 0;
	end,
	Pet = function(p7, p8) -- Line: 73
		--[[
			Upvalues:
				[1] = m_PetOrderBest
		--]]
		return m_PetOrderBest(p7.Data, p8.Data);
	end
};
return function(p1, p2) -- Line: 79
	--[[
		Upvalues:
			[1] = table6
			[2] = table7
	--]]
	local v1 = table6[p1.Category];
	local v2 = table6[p2.Category];
	if v1 < v2 then
		return -1;
	end
	if v2 < v1 then
		return 1;
	end
	return table7[p1.Category](p1, p2);
end;
  -  Editar
  04:54:13.736    -  Editar
  04:54:13.736  ----- [2238] ReplicatedStorage.Library.Shared.Functions.ComputeSaveAge -----  -  Editar
  04:54:13.736  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").DefaultStats);
return function(p1, p2) -- Line: 10
	local v1 = p1.Age or 0;
	local t_LoginTime = p1.LoginTime;
	if t_LoginTime then
		v1 = v1 + math.max(0, (p2 or workspace:GetServerTimeNow()) - t_LoginTime);
	end
	return v1;
end;
  -  Editar
  04:54:13.736    -  Editar
  04:54:13.736  ----- [2239] ReplicatedStorage.Library.Shared.Functions.DaycareComputeRemainingTime -----  -  Editar
  04:54:13.736  local l__Modules__1 = game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Modules");
local v2 = require(l__Modules__1.DefaultStats);
local u1 = require(script.Parent.ComputeSaveAge);
local u2 = require(l__Modules__1.Daycare);
return function(p1, p2, p3)
    local v3 = p3 or workspace:GetServerTimeNow();
    local v = u1(p1, v3)
    --warn(v, p2.CreationAge)
    local v4 = math.max(0, v - p2.CreationAge);
    local test = math.max(0, v3 - p2.CreationTime - v4)
    --warn(v4)
    --warn(test)
    local vt = (v4 * u2.ONLINE_SPEEDUP + test)
    --warn(vt)
    local r = math.max(0, u2.DURATION_SECONDS - vt)
   -- warn(r)
    return r;
end;

  -  Editar
  04:54:13.736    -  Editar
  04:54:13.736  ----- [2240] ReplicatedStorage.Library.Shared.Functions.DaycareComputeSlotsForTier -----  -  Editar
  04:54:13.736  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local m_Daycare = require(Library:WaitForChild("Modules").Daycare);
return function(p1) -- Line: 10
	--[[
		Upvalues:
			[1] = m_Daycare
	--]]
	local v1 = m_Daycare.SLOTS_FREE;
	for index1 = 1, p1 do
		v1 = v1 + m_Daycare.SLOT_TIERS[index1].Amount;
	end
	return v1;
end;
  -  Editar
  04:54:13.736    -  Editar
  04:54:13.736  ----- [2241] ReplicatedStorage.Library.Shared.Functions.CanAuctionPetDir -----  -  Editar
  04:54:13.737  -- Decompiled using Krnl
local v6 = game:GetService("ReplicatedStorage"):WaitForChild("Library")
local v12 = require(v6.Directory)
local v15 = require(v6:WaitForChild("Modules").Pets)
return function(p1)
	if not p1 then
		return false
	end
	if not p1.tradeable then
		return false
	end
	if p1.canAuction ~= nil then
		return p1.canAuction
	end
	if p1.titanic then
		return true
	end
	if p1.huge then
		return true
	end
	if p1.extremelyRare then
		return true
	end
	if p1.rarity == "Exclusive" then
		return true
	end
	return false
end
  -  Editar
  04:54:13.737    -  Editar
  04:54:13.737  ----- [2242] ReplicatedStorage.Library.Shared.Functions.PetName -----  -  Editar
  04:54:13.737  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);
local table1 = {
	Name = function(p2, p3) -- Name (Line: 21)
		return ("%* %*!"):format(p2, p3);
	end,
	Prefix = "a",
	Color = Color3.fromRGB(122, 122, 122),
	Announce = false
};
local table2 = {
	Basic = table1,
	Rare = {
		Name = function(p4, p5) -- Name (Line: 30)
			return ("%* %*"):format(p4, p5);
		end,
		Prefix = "a",
		Color = Color3.fromRGB(75, 255, 90),
		Announce = false
	},
	Epic = {
		Name = function(p6, p7) -- Name (Line: 36)
			return ("%* %*"):format(p6, p7);
		end,
		Prefix = "an",
		Color = Color3.fromRGB(255, 234, 71),
		Announce = false
	},
	Legendary = {
		Name = function(p8, p9) -- Name (Line: 42)
			return ("%* %*"):format(p8, p9);
		end,
		Prefix = "a",
		Color = Color3.fromRGB(255, 69, 246),
		Announce = false
	},
	Mythical = {
		Name = function(p10, p11) -- Name (Line: 48)
			return ("%* %*"):format(p10:upper(), p11);
		end,
		Prefix = "a",
		Color = Color3.fromRGB(255, 140, 0),
		Announce = true
	},
	Secret = {
		Name = function(p12, p13) -- Name (Line: 54)
			return ("%* %*"):format(p12:upper(), p13);
		end,
		Prefix = "a",
		Color = Color3.fromRGB(34, 34, 34),
		Announce = true
	},
	Event = {
		Name = function(p14, p15) -- Name (Line: 60)
			return ("%* %*"):format(p14:upper(), p15);
		end,
		Prefix = "an",
		Color = Color3.fromRGB(213, 115, 255),
		Announce = true
	},
	Exclusive = {
		Name = function(p16, p17) -- Name (Line: 66)
			return ("%* %*"):format(p16:upper(), p17);
		end,
		Prefix = "an",
		Color = Color3.fromRGB(213, 115, 255),
		Announce = true
	}
};
return function(p1) -- Line: 74
	--[[
		Upvalues:
			[1] = m_Directory
			[2] = table2
			[3] = table1
	--]]
	local v1 = m_Directory.Pets[p1.id];
	local table3 = {};
	if p1.sh then
		table.insert(table3, "Shiny");
	end
	if p1.r then
		table.insert(table3, "Rainbow");
	elseif p1.g then
		table.insert(table3, "Golden");
	end
	local v2 = table.concat(table3, " ");
	if #table3 > 0 then
		v2 = v2 .. " ";
	end
	local v3 = v2 .. v1.name;
	local t_rarity = v1.rarity;
	local v4 = table2[t_rarity] or table1;
	local v5 = v4.Name(t_rarity, v3);
	local format_ret = ("%* %*"):format(v4.Prefix, v5);
	return v5, format_ret, v4.Color, v4.Announce;
end;
  -  Editar
  04:54:13.737    -  Editar
  04:54:13.737  ----- [2243] ReplicatedStorage.Library.Shared.Functions.PetNameShort -----  -  Editar
  04:54:13.737  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.Pets);
return function(p1) -- Line: 13
	--[[
		Upvalues:
			[1] = m_Directory
	--]]
	local v1 = m_Directory.Pets[p1.id];
	local table1 = {};
	if p1.sh then
		table.insert(table1, "Shiny");
	end
	if p1.r then
		table.insert(table1, "Rainbow");
	elseif p1.g then
		table.insert(table1, "Golden");
	end
	local v2 = table.concat(table1, " ");
	if #table1 > 0 then
		v2 = v2 .. " ";
	end
	return v2 .. v1.name;
end;
  -  Editar
  04:54:13.737    -  Editar
  04:54:13.737  ----- [2244] ReplicatedStorage.Library.Shared.Functions.HasProTradingAccess -----  -  Editar
  04:54:13.737  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local Players = game:GetService("Players");
local Library = ReplicatedStorage:WaitForChild("Library");
local Modules = Library:WaitForChild("Modules");
local m_Directory = require(Library.Directory);
local _ = require(Modules.DefaultStats);
function test(p1, p2) -- Line: 20
	--[[
		Upvalues:
			[1] = m_Directory
	--]]
	if p1.UserId == 19717956 or p1.UserId == 653248807 or p1.UserId == 660900011 then
		return true;
	end
	if p1.UserId == 2882755487 or p1.UserId == 2213470865 or p1.UserId == 2878290231 or p1.UserId == 13365322 or p1.UserId == 1210210 then
		return true;
	end
	if p2 then
		local v2 = 0;
		for _, val1 in ipairs(p2.Pets) do
			local v3 = m_Directory.Pets[val1.id];
			if not v3 then continue end
			if v3.titanic then
				v2 = v2 + 10;
			end
			if not v3.huge then continue end
			v2 = v2 + 1;
		end
		if v2 >= 10 then
			return true;
		end
	end
	return false;
end
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	local m_Saving = require(ServerScriptService:WaitForChild("Library").Saving);
	return function(p4) -- Line: 59
		--[[
			Upvalues:
				[1] = m_Saving
		--]]
		assert(p4);
		return test(p4, m_Saving.Get(p4));
	end;
end
local m_Save = require(Library:WaitForChild("Client").Save);
return function(p3) -- Line: 68
	--[[
		Upvalues:
			[1] = Players
			[2] = m_Save
	--]]
	local v1 = p3 or Players.LocalPlayer;
	return test(v1, m_Save.Get(v1));
end;
  -  Editar
  04:54:13.737    -  Editar
  04:54:13.737  ----- [2245] ReplicatedStorage.Library.Shared.Functions.ScavengerEggCFrameToString -----  -  Editar
  04:54:13.737  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

return function(p1) -- Line: 1
	local table1 = {p1:GetComponents()};
	local v1 = "";
	for key1, val1 in ipairs(table1) do
		if key1 > 3 then break end
		if key1 > 1 then
			v1 = v1 .. ",";
		end
		v1 = v1 .. tostring(val1);
	end
	return string.sub(v1, 1, 100);
end;
  -  Editar
  04:54:13.738    -  Editar
  04:54:13.738  ----- [2246] ReplicatedStorage.Library.Shared.Functions.CanAuctionPet -----  -  Editar
  04:54:13.738  -- Decompiled using Krnl
local v6 = game:GetService("ReplicatedStorage"):WaitForChild("Library")
local v12 = require(v6.Directory)
local v15 = require(v6:WaitForChild("Modules").Pets)
local v20 = require(script.Parent.CanAuctionPetDir)
return function(p1)
	local v23 = v12.Pets
	local v24 = v23[p1.id]
	if not v24 then
		v23 = false
		return v23
	end
	assert(v24)
	return v20(v24)
end
  -  Editar
  04:54:13.738    -  Editar
  04:54:13.738  ----- [2247] ReplicatedStorage.Library.Shared.Functions.SignalStatUpdated -----  -  Editar
  04:54:13.738  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Players = game:GetService("Players");
local RunService = game:GetService("RunService");
local m_Signal = require(ReplicatedStorage:WaitForChild("Library").Signal);

if RunService:IsServer() then
	return function(p3, p4) -- Line: 12
		m_Signal.Fire("Stat Changed", p3, p4);
		m_Signal.Fire("Stats Changed", p3);
	end;
end

return function(p1, p2) -- Line: 18
	local v1 = p1 == Players.LocalPlayer;
	if v1 then
		m_Signal.Fire("Stat Changed", p2);
	else
		m_Signal.Fire("Other Stat Changed", p1, p2);
	end
	if v1 then
		m_Signal.Fire("Stats Changed");
		return;
	end
	m_Signal.Fire("Other Stats Changed", p1);
end;
  -  Editar
  04:54:13.738    -  Editar
  04:54:13.738  ----- [2248] ReplicatedStorage.Library.Shared.Functions.CanAccessDiamondMine -----  -  Editar
  04:54:13.738  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local m_Directory = require(ReplicatedStorage:WaitForChild("Library").Directory);
local m_GetSave = require(script.Parent.GetSave);
local m_OwnsGamepass = require(script.Parent.OwnsGamepass);
local t_ID = m_Directory.Gamepasses.VIP.ID;
return function(p1) -- Line: 14
	--[[
		Upvalues:
			[1] = m_GetSave
			[2] = m_OwnsGamepass
			[3] = t_ID
	--]]
	local v1 = m_GetSave(p1);
	if not v1 then
		return false;
	end
	if game.PrivateServerOwnerId ~= 0 and game.PrivateServerOwnerId ~= p1.UserId and p1.MembershipType ~= Enum.MembershipType.Premium and not m_OwnsGamepass(p1, t_ID) then
		return false;
	end
	return true;
end;
  -  Editar
  04:54:13.738    -  Editar
  04:54:13.738  ----- [2249] ReplicatedStorage.Library.Shared.Functions.GetSave -----  -  Editar
  04:54:13.738  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local _ = require(Library:WaitForChild("Modules").DefaultStats);
if RunService:IsServer() then
	local ServerScriptService = game:GetService("ServerScriptService");
	local m_Saving = require(ServerScriptService:WaitForChild("Library").Saving);
	return function(p2) -- Line: 18
		--[[
			Upvalues:
				[1] = m_Saving
		--]]
		return m_Saving.Get(p2, nil, true);
	end;
end
local m_Save = require(Library:WaitForChild("Client").Save);
return function(p1) -- Line: 26
	--[[
		Upvalues:
			[1] = m_Save
	--]]
	return m_Save.Get(p1);
end;
  -  Editar
  04:54:13.738    -  Editar
  04:54:13.739  ----- [2250] ReplicatedStorage.Library.Shared.Functions.OwnsGamepass -----  -  Editar
  04:54:13.739  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local m_GetSave = require(script.Parent.GetSave);
return function(p1, p2) -- Line: 5
	--[[
		Upvalues:
			[1] = m_GetSave
	--]]
	local v1 = m_GetSave(p1);
	if not v1 then
		return false;
	end
	return table.find(v1.Gamepasses, p2) ~= nil;
end;
  -  Editar
  04:54:13.739    -  Editar
  04:54:13.739  ----- [2251] ReplicatedStorage.Library.Shared.Functions.ComputeEventMachinePoints -----  -  Editar
  04:54:13.739  -- Decompiled with the Synapse X Luau decompiler.

local v1 = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Modules").Pets);
return function(p1, p2)
	assert(p1);
	assert(p2);
	if p1.l then
		return nil;
	end;
	if p2.ignoreConvert then
		return nil;
	end;
	if p2.rarity ~= "Event" then
		return nil;
	end;
	if p2.huge then
		return nil;
	end;
	if p2.titanic then
		return nil;
	end;
	if p2.giftEggId then
		return nil;
	end;
	if p2.extremelyRare then
		return nil;
	end;
	local v2 = 0;
	if p2.convertPoints then
		v2 = v2 + p2.convertPoints;
	elseif p2.companionEnchantLevel then
		v2 = v2 + p2.companionEnchantLevel;
	end;
	if v2 <= 0 then
		return nil;
	end;
	if p1.g then
		v2 = v2 + 1;
	end;
	if p1.r then
		v2 = v2 + 2;
	end;
	if p1.sh then
		v2 = v2 + 3;
	end;
	return v2;
end;
  -  Editar
  04:54:13.739    -  Editar
  04:54:13.739  ----- [2252] ReplicatedStorage.Library.Shared.Functions.ComputeEvolveMachinePets -----  -  Editar
  04:54:13.739  -- Decompiled with the Synapse X Luau decompiler.

local l__Library__1 = game:GetService("ReplicatedStorage"):WaitForChild("Library");
local v2 = require(l__Library__1:WaitForChild("Modules").Pets);
local u1 = require(l__Library__1.Directory);
return function(p1)
	assert(p1);
	local v3 = {};
	if #p1 > 5 then
		return nil;
	end;
	for v4, v5 in ipairs(p1) do
		local v7 = u1.Pets[v5.id];
		if not v7 then
			return nil;
		end;
		if v5.l then
			return nil;
		end;
		if v7.ignoreConvert then
			return nil;
		end;
		if not v7.evolve then
			return nil;
		end;
		if not v3[v7.evolve] then
			v3[v7.evolve] = 0;
		end;
		local l__evolve__8 = v7.evolve;
		v3[l__evolve__8] = v3[l__evolve__8] + 20;	
	end;
	return v3;
end;
  -  Editar
  04:54:13.739    -  Editar
  04:54:13.739  ----- [2253] ReplicatedStorage.Library.Shared.Functions.GetAllBloombergPets -----  -  Editar
  04:54:13.740  --[[
    @ BIG Copies - localonex
--]]

-- | top | --
local BloombergPets = {}

-- | load library | --
local Library = game:GetService("ReplicatedStorage"):WaitForChild("Library")

-- | shared modules | --
local Directory = require(Library.Directory)

return function()
	if BloombergPets then
		return BloombergPets
	end
	
	for petId, petData in pairs(Directory.Pets) do
		--[[if not petData.hidden then
			if not petData.huge then
				if not petData.titanic then
					if petData.companionEnchantLevel then
						if 0 < petData.companionEnchantLevel then
						end
					end
				end
			end
		end]]--
		
		if not petData.hidden then
			table.insert(BloombergPets, {petId = petId, id = petId, uid = "id00000000000000000000000000000000", idt = 0, s = 0})
		end	
	end
	
	return BloombergPets
end  -  Editar
  04:54:13.740    -  Editar
  04:54:13.740  ----- [2254] ReplicatedStorage.Library.Shared.Functions.GetYeetPower -----  -  Editar
  04:54:13.740  -- OneX was here --


-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | load modules | --
local Directory = require(Library.Directory)
local Pets = require(Modules.Pets)
local Variables = require(Library.Shared.Variables)

-- Calculate Yeet Power based on strength
local function CalculateYeetPowerFromStrength(strength)
	local normalizedStrength = strength / 3e16
	local scaledStrength = normalizedStrength * 1000000
	return math.max(25000, math.round(scaledStrength))
end

-- Calculate Yeet Power of a pet
local function GetYeetPower(pet, companions)
	local petData = Directory.Pets[pet.id]
	local companionPower = 0
	
	if not petData then
		return 0
	end
	
	if companions then
		for _, companion in ipairs(companions) do
			local companionData = Directory.Pets[companion.id]
			if not companionData.huge and not companionData.titanic and not companionData.companionEnchantLevel then
				local companionYeetPower = GetYeetPower(companion)
				companionPower = math.max(companionPower, companionYeetPower)
			end
		end
	end	
	
	if petData.companionEnchantLevel then
		if not companions then
			return 0
		end

		local enchantLevelFactors = {0.2, 0.3, 0.5}
		local enchantFactor = enchantLevelFactors[petData.companionEnchantLevel]
		return math.max(25000, math.round(companionPower * enchantFactor))
	elseif petData.huge then
		if not companions then
			return 0
		end
 
		return math.max(25000, math.round(companionPower * 0.7))
	elseif petData.titanic then
		if not companions then
			return 0
		end

		return math.max(25000, math.round(companionPower * 0.85))
	elseif petData.yeetPower then
		local yeetPower = petData.yeetPower
		if pet.g then
			yeetPower = yeetPower * Variables.PetTypeMult.Golden
		elseif pet.r then
			yeetPower = yeetPower * Variables.PetTypeMult.Rainbow
		elseif pet.dm then
			yeetPower = yeetPower * Variables.PetTypeMult["Dark Matter"]
		end
		if pet.sh then
			yeetPower = yeetPower * Variables.PetTypeMult.Shiny
		end
		return yeetPower
	end
	--
	return CalculateYeetPowerFromStrength(pet.s or 0)
end

return GetYeetPower  -  Editar
  04:54:13.740    -  Editar
  04:54:13.740  ----- [2255] ReplicatedStorage.Library.Shared.Functions.PetOrderBest -----  -  Editar
  04:54:13.740  -- Decompiled with the Synapse X Luau decompiler.

local l__Library__1 = game:GetService("ReplicatedStorage"):WaitForChild("Library");
local v2 = require(l__Library__1:WaitForChild("Modules").Pets);
local u1 = require(l__Library__1.Directory);
local Signal = require(l__Library__1.Signal)
local Functions = require(l__Library__1.Functions)
local u2 = require(script.Parent.ComputePetStrength);
local u3 = require(script.Parent.PetTypeIndex);
local v35 = require(script.Parent.CanAuctionPetDir)
local v38 = require(script.Parent.ShowPetExists)
local v42 = require(script.Parent.Parent.Variables)
local u4 = require(l__Library__1.Functions);
local v44 = game:GetService("RunService"):IsServer()
if v44 then
	local v50 = require(game:GetService("ServerScriptService"):WaitForChild("Library").RAP)
	v43 = function(p1)
		local v53, v54 = v50.Get(p1)
		if v54 then
			v53 = nil
		end
		return v53
	end
else
	v43 = require(l__Library__1:WaitForChild("Client").RAPCmds).Get
end
if v44 then
	v56 = function(p2)
		return Signal.Invoke("Get Pet Rarity", p2.id)
	end
else
	v56 = function(p3)
		return Signal.Invoke("Get Pet Rarity", p3.id)
	end
end
return function(p1, p2, p3, p4, p8, p9, p10)
	local l__id__4 = p1.id;
	local l__id__5 = p2.id;
	local v6 = u1.Pets[l__id__4];
	local v7 = u1.Pets[l__id__5];
	if p10 then
		local v160 = p10(p1)
		local v77 = p10(p2)
		if v160 ~= v77 then
			return v77 - v160
		end
	end
	local v8 = v6.titanic == true;
	if v8 ~= (v7.titanic == true) then
		if v8 then
			return -1;
		else
			return 1;
		end;
	end;
	local v9 = v6.huge == true;
	if v9 ~= (v7.huge == true) then
		if v9 then
			return -1;
		else
			return 1;
		end;
	end;
	local v10 = v6.companionEnchantLevel or 0;
	local v11 = v7.companionEnchantLevel or 0;
	if p3 then
		if v10 ~= v11 then
			return v11 - v10;
		end;
	end;
	if p4 then
		local v12 = p1.hc == true;
		if v12 ~= (p2.hc == true) then
			if v12 then
				return -1;
			else
				return 1;
			end;
		end;
	end;
	if not v8 and not v9 and v10 == 0 then
		local v13 = u2(p1);
		local v14 = u2(p2);
		if v13 ~= v14 then
			return v14 - v13;
		end;
	end;
	local v99 = v42.PetRarityNumbers[v7.rarity]
	local v93 = v42.PetRarityNumbers[v6.rarity]
	if v93 ~= v99 then
		return v99 - v93
	end
	local v15 = u3(p1);
	local v16 = u3(p2);
	if v15 ~= v16 then
		return v16 - v15;
	end;
	if p8 then
		local v112 = v35(v6)
		if v112 ~= v35(v7) then
			if v112 then
				return -1
			end
			return 1
		end
		if v112 then
			local v120 = v43(p1) or -1
			local v123 = v43(p2) or -1
			if v120 ~= v123 then
				return v123 - v120
			end
		end
	end
	if p9 then
		local v112 = v38(p1)
		if v112 ~= v38(p2) then
			if v112 then
				return -1
			end
			return 1
		end
		local v131 = v56(p1) or math.huge
		local v134 = v56(p2) or math.huge
		if v131 ~= v134 then
			return v131 - v134
		end
	end
	if l__id__4 ~= l__id__5 then
		if l__id__5 < l__id__4 then
			return -1;
		else
			return 1;
		end;
	end;
	if p1.cv then
		if v6.colorVariants then
			if p2.cv then
				if v7.colorVariants then 
					local v143 = v6.colorVariants[p1.cv].Chance
					local v144 = v7.colorVariants[p2.cv].Chance
					if not v143 or not v144 then
						return -1
					end	
					local v177 = v143 - v144
					if v177 ~= 0 then
						return v177
					end	
					if p2.cv then
						if v7.colorVariants then
							return 1
						end
					end
				end
			end
		end
	end
	local l__vc__17 = p1.vc;
	local v3 = p2.vc;
	if l__vc__17 then
		if not v3 then
			return -1;
		end;
		local v18 = u4.CompareColor(Color3.new(table.unpack(l__vc__17)), Color3.new(table.unpack(v3)));
		if v18 ~= 0 then
			return v18;
		end;
		if v3 then
			return 1;
		end;
	end	
	return (p1.idt or 0) - (p2.idt or 0);
end;
  -  Editar
  04:54:13.740    -  Editar
  04:54:13.741  ----- [2256] ReplicatedStorage.Library.Shared.Variables -----  -  Editar
  04:54:13.741  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Assets = ReplicatedStorage:WaitForChild("Assets")
local Variables = {}

Variables.BloombergCost = 50000
Variables.ExclusiveEggSpacingRadius = 5
Variables.ExclusiveEggRadiusRange = Vector2.new(10, 50)
Variables.ExclusiveEggRadiusStep = 1
Variables.ExclusiveEggRadiusBuffer = 5
Variables.ExclusiveEggMaxHeight = 15
Variables.ExclusiveEggHeightOffset = 10
Variables.ExclusiveEggMaxHeightBuffer = 5
Variables.ExclusiveEggOpenAmounts = { 1, 3, 8 }
Variables.ShopNumber = 1
Variables.PetsForSale = {
    ["239"] = true,
    ["515"] = true,
    ["2078"] = true,
    ["3013"] = true,
    ["2104"] = true,
    ["564"] = true,
    ["565"] = true,
    ["566"] = true,
    ["2106"] = true,
    ["2107"] = true,
    ["3014"] = true
}

Variables.ExclusiveEggCosts = {
	[1] = 35000000,
	[3] = 105000000,
	[10] = 280000000,
	[100] = 2800000000
}

Variables.BoostsCosts = {
	["Triple Coins"] = 75000000,
	["Triple Damage"] = 75000000,
	["Super Lucky"] = 75000000,
	["Ultra Lucky"] = 75000000,
	["Pack"] = 240000000
}

-- all purchasables are the psx price divided by 20!
Variables.Purchasables = {
	["Triple Coins"] = {
		Cost = 2,
		class = "Boost",
		inf = true
	},
	["Triple Damage"] = {
		Cost = 2,
		class = "Boost",
		inf = true
	},
	["Super Lucky"] = {
		Cost = 1,
		class = "Boost",
		inf = true
	},
	["Ultra Lucky"] = {
		Cost = 8,
		class = "Boost",
		inf = true
	},
	["The Boost Bundle"] = {
		Cost = 25,
		class = "BoostBundle",
		inf = true
	},
	["Lucky"] = {
		Cost = 20,
		class = "Gamepass"
	},
	["Auto Hatch"] = {
		Cost = 8,
		class = "Gamepass"
	},
	["Mythical Hunter"] = {
		Cost = 90,
		class = "Gamepass"
	},
	["Shiny Hunter"] = {
		Cost = 65,
		class = "Gamepass"
	},
	["Octuple Egg Open"] = {
		Cost = 85,
		class = "Product",
		Requires = "Triple Egg Open"
	},
	["VIP"] = {
		Cost = 20,
		class = "Gamepass"
	},
	["Super Pet Storage"] = {
		Cost = 20,
		class = "Gamepass"
	},
	["Teleport"] = {
		Cost = 10,
		class = "Gamepass"
	},
	["Magic Eggs"] = {
		Cost = 65,
		class = "Gamepass"
	},
	["Hoverboard"] = {
		Cost = 13,
		class = "Gamepass"
	},
	["Triple Egg Open"] = {
		Cost = 40,
		class = "Gamepass"
	},
	["15 Pets Equipped"] = {
		Cost = 110,
		class = "Product",
		Requires = "8 Pets Equipped"
	},
	["Secret Hunter"] = {
		Cost = 125,
		class = "Gamepass"
	},
	["Pet Storage"] = {
		Cost = 5,
		class = "Gamepass"
	},
	["Skip Egg Open"] = {
		Cost = 6,
		class = "Gamepass"
	},
	["Magnet"] = {
		Cost = 20,
		class = "Gamepass"
	},
	["8 Pets Equipped"] = {
		Cost = 18,
		class = "Gamepass"
	}, 
	["Exclusive1"] = {
		Cost = 20,
		class = "ExclusiveEgg",
		Amount = 1,
		inf = true
	},
	["Exclusive3"] = {
		Cost = 60,
		class = "ExclusiveEgg",
		Amount = 3,
		inf = true
	},
	["Exclusive10"] = {
		Cost = 160,
		class = "ExclusiveEgg",
		Amount = 10,
		inf = true
	},
	["Exclusive100"] = {
		Cost = 1600,
		class = "ExclusiveEgg",
		Amount = 100,
		inf = true
	},
}

Variables.UpdateLogId = 53
Variables.HardcorePetMult = 10000000000000
Variables.HardcorePetMultNormal = 1.5
Variables.HardcorePetMinPowerNormal = 1000000000
Variables.PetTypeMult = {
	Golden = 3,
	Rainbow = 7,
	["Dark Matter"] = 20,
	Shiny = 2.5
}
Variables.FreeGiftsResetTime = 43200
Variables.BankMaxPetsPerTransaction = 50
Variables.TitanicMult = {
	Default = 7.5,
	Golden = 8.75,
	Rainbow = 11.25
}
Variables.BestFriendMult = {
	Default = 1.5,
	Golden = 1.75,
	Rainbow = 2.25
}
Variables.GoldMachineOdds = {
	Normal = {
		{
			chance = 13,
			cost = 250
		},
		{
			chance = 29,
			cost = 400
		},
		{
			chance = 47,
			cost = 600
		},
		{
			chance = 63,
			cost = 800
		},
		{
			chance = 88,
			cost = 1000
		},
		{
			chance = 100,
			cost = 1250
		}
	},
	Hardcore = {
		[1] = {
			chance = 8,
			cost = 5000
		},
		[2] = {
			chance = 17,
			cost = 8000
		},
		[3] = {
			chance = 29,
			cost = 12000
		},
		[4] = {
			chance = 37,
			cost = 16000
		},
		[5] = {
			chance = 46,
			cost = 20000
		},
		[6] = {
			chance = 55,
			cost = 25000
		},
		[7] = {
			chance = 67,
			cost = 30000
		},
		[8] = {
			chance = 78,
			cost = 35000
		},
		[9] = {
			chance = 88,
			cost = 40000
		},
		[10] = {
			chance = 100,
			cost = 50000
		}
	}
}
Variables.RainbowMachineOdds = {
	Normal = {
		[1] = {
			chance = 13,
			cost = 400
		},
		[2] = {
			chance = 29,
			cost = 700
		},
		[3] = {
			chance = 47,
			cost = 1050
		},
		[4] = {
			chance = 63,
			cost = 1400
		},
		[5] = {
			chance = 88,
			cost = 1750
		},
		[6] = {
			chance = 100,
			cost = 2250
		}
	},
	Hardcore = {
		[1] = {
			chance = 8,
			cost = 8000
		},
		[2] = {
			chance = 17,
			cost = 14000
		},
		[3] = {
			chance = 29,
			cost = 22500
		},
		[4] = {
			chance = 37,
			cost = 28000
		},
		[5] = {
			chance = 46,
			cost = 35000
		},
		[6] = {
			chance = 55,
			cost = 45000
		},
		[7] = {
			chance = 67,
			cost = 55000
		},
		[8] = {
			chance = 78,
			cost = 65000
		},
		[9] = {
			chance = 88,
			cost = 80000
		},
		[10] = {
			chance = 100,
			cost = 100000
		}
	}
}
Variables.DarkMatterMachineSettings = {
	Normal = {
		[1] = {
			waitTime = 432000,
			cost = 37500
		},
		[2] = {
			waitTime = 259200,
			cost = 50000
		},
		[3] = {
			waitTime = 129600,
			cost = 62500
		},
		[4] = {
			waitTime = 43200,
			cost = 75000
		},
		[5] = {
			waitTime = 18000,
			cost = 87500
		},
		[6] = {
			waitTime = 1800,
			cost = 100000
		}
	},
	Hardcore = {
		[1] = {
			waitTime = 1036800,
			cost = 750000
		},
		[2] = {
			waitTime = 691200,
			cost = 1000000
		},
		[3] = {
			waitTime = 432000,
			cost = 1250000
		},
		[4] = {
			waitTime = 259200,
			cost = 1500000
		},
		[5] = {
			waitTime = 129600,
			cost = 2000000
		},
		[6] = {
			waitTime = 43200,
			cost = 2500000
		},
		[7] = {
			waitTime = 18000,
			cost = 3000000
		},
		[8] = {
			waitTime = 1800,
			cost = 5000000
		}
	}
}
Variables.EnchantCost = 10000
Variables.EnchantHardcoreCost = 500000
Variables.FusePetsCost = 5000
Variables.FuseMaxPets = 12
Variables.FuseMinPets = 3
Variables.FuseHardcoreCost = 250000
Variables.BoostsInfo = {
	["Triple Coins"] = {
		icon = "rbxassetid://7599296296",
		desc = "3x Coins"
	},
	["Triple Damage"] = {
		icon = "rbxassetid://7599295886",
		desc = "3x Damage"
	},
	["Triple Diamonds"] = {
		icon = "rbxassetid://13132216780",
		desc = "3x Diamonds"
	},
	Lucky = {
		icon = "rbxassetid://7599295493",
		desc = "Lucky"
	},
	["Super Lucky"] = {
		icon = "rbxassetid://7599296041",
		desc = "Super Lucky"
	},
	["Ultra Lucky"] = {
		icon = "rbxassetid://7599295656",
		desc = "Ultra Lucky"
	},
	["Magic Eggs"] = {
		icon = "rbxassetid://7599295118",
		desc = "Magic Eggs"
	},
	["Mythical Hunter"] = {
		icon = "rbxassetid://7599295312",
		desc = "Mythical Hunter"
	},
	["Secret Hunter"] = {
		icon = "rbxassetid://12147083097",
		desc = "Secret Hunter"
	},
	["Shiny Hunter"] = {
		icon = "rbxassetid://12147120003",
		desc = "Shiny Hunter"
	},
	Verified = {
		icon = "rbxassetid://7599327451",
		desc = "+50% XP"
	},
	VIP = {
		icon = "rbxassetid://7599327584",
		desc = "+100% XP"
	},
	["Coins Event"] = {
		icon = "rbxassetid://7599296480",
		desc = "2x Coins Event"
	},
	["Luck Event"] = {
		icon = "rbxassetid://9502727028",
		desc = "Luck Event"
	},
	Friends = {
		icon = "rbxassetid://7621017602",
		desc = "Coin Mult"
	},
	Pineapple = {
		icon = "rbxassetid://12959517117",
		desc = "{mult}x Speed"
	},
	Orange = {
		icon = "rbxassetid://12959517323",
		desc = "{mult}x Diamonds"
	},
	Pear = {
		icon = "rbxassetid://12959517211",
		desc = "{mult}x Coins"
	},
	Banana = {
		icon = "rbxassetid://12959517469",
		desc = "+{mult}x Luck"
	},
	Apple = {
		icon = "rbxassetid://12959517558",
		desc = "{mult}x Damage"
	}
}
Variables.ServerBoostsInfo = {
	["Triple Coins"] = {
		icon = "rbxassetid://7599296296",
		desc = "Server 3x Coins",
		tripleIcon = true
	},
	["Triple Damage"] = {
		icon = "rbxassetid://7599295886",
		desc = "Server 3x Damage",
		tripleIcon = true
	},
	["Super Lucky"] = {
		icon = "rbxassetid://7599296041",
		desc = "Server Super Lucky",
		tripleIcon = true
	},
	["Super Breaker"] = {
		icon = "rbxassetid://7599295886",
		desc = "Server 25x Damage",
		loginAnnounce = true,
		msg = "All pet damage does an additional 25x damage!"
	},
	["Insane Luck"] = {
		icon = "rbxassetid://7599295656",
		desc = "Server 25x Luck",
		loginAnnounce = true,
		msg = "All egg luck has been increased by 25x luck!"
	}
}
Variables.DarkMatterSkipProducts = {
	{
		timeLeft = 3600,
		productId = 1204613049
	},
	{
		timeLeft = 21600,
		productId = 1204613391
	},
	{
		timeLeft = 43200,
		productId = 1204613486
	},
	{
		timeLeft = 129600,
		productId = 1204613518
	},
	{
		timeLeft = 259200,
		productId = 1204613532
	},
	{
		timeLeft = 432000,
		productId = 1204613550
	},
	{
		timeLeft = 691200,
		productId = 1291342229
	},
	{
		timeLeft = 864000,
		productId = 1291342377
	},
	{
		timeLeft = math.huge,
		productId = 1291342457
	}
}
Variables.HugeMachineUseProducts = {
	{
		pointsMin = 50,
		pointsMax = 74,
		productId = 1592680774,
		price = 50
	},
	{
		pointsMin = 75,
		pointsMax = 99,
		productId = 1592680619,
		price = 19
	},
	{
		pointsMin = 100,
		pointsMax = 100
	}
}
Variables.HugeMachineMaxPetPoints = 8
Variables.MerchantLevelReq = {
	[1] = 0,
	[2] = 8,
	[3] = 20
}
Variables.AchievementDifficulty = {
	[1] = {
		Name = "EZPZ :)",
		Color = Color3.fromRGB(180, 180, 180)
	},
	[2] = {
		Name = "Easy",
		Color = Color3.fromRGB(59, 180, 255)
	},
	[3] = {
		Name = "Medium",
		Color = Color3.fromRGB(255, 184, 62)
	},
	[4] = {
		Name = "Hard",
		Color = Color3.fromRGB(255, 60, 60)
	},
	[5] = {
		Name = "Insane",
		Color = Color3.fromRGB(153, 64, 255)
	}
}
Variables.PetCollectionTiers = {
	[1] = 150,
	[2] = 250,
	[3] = 350,
	[4] = 500,
	[5] = 650,
	[6] = 800,
	[7] = 1000
}
Variables.RankChart = {
	[1] = "Noob",
	[2] = "Starter",
	[3] = "Basic",
	[4] = "Pro",
	[5] = "Elite",
	[6] = "Hero",
	[7] = "Champion",
	[8] = "Master",
	[9] = "Legend",
	[10] = "Immortal",
	[11] = "Godlike",
	[12] = "Impossible",
	[13] = "Hacker",
	[14] = "Insane Hacker",
	[15] = "The Best",
	[16] = "The Very Best",
	[17] = "PET GOD",
	[18] = "PET OVERLORD",
	[19] = "CREATOR OF PETS",
	[20] = "PET CELESTIAL"
}
Variables.PetRarityNumbers = {
	Basic = 1,
	Rare = 2,
	Epic = 3,
	Legendary = 4,
	Mythical = 5,
	Secret = 6,
	Event = 7,
	Exclusive = 8
}
Variables.PetRarityList = {}
for key2, _ in pairs(Variables.PetRarityNumbers) do
	table.insert(Variables.PetRarityList, key2)
end
Variables.FanArt = {
	{
		"rbxassetid://7249691240",
		"prec1osa"
	},
	{
		"rbxassetid://7249691383",
		"VitaminSe_a"
	},
	{
		"rbxassetid://7249691487",
		"Fragman_100"
	},
	{
		"rbxassetid://7249691593",
		"minimini61234"
	},
	{
		"rbxassetid://7249691698",
		"Jones_vedita"
	},
	{
		"rbxassetid://7249691856",
		"abridayyy"
	},
	{
		"rbxassetid://7249691950",
		"SneakyThiefy"
	},
	{
		"rbxassetid://7249692052",
		"Sketchiko"
	},
	{
		"rbxassetid://7249692135",
		"Oburnt"
	},
	{
		"rbxassetid://7249692223",
		"Crxmsey"
	},
	{
		"rbxassetid://7249692321",
		"alex0r23"
	},
	{
		"rbxassetid://7626524975",
		"Alper_XxX"
	},
	{
		"rbxassetid://7626525350",
		"Luminous_Vybe"
	},
	{
		"rbxassetid://7626525557",
		"Y666_666Y"
	},
	{
		"rbxassetid://7626525901",
		"TrayNotPH"
	},
	{
		"rbxassetid://7626526268",
		"6gls"
	},
	{
		"rbxassetid://7626526626",
		"Axyndey"
	},
	{
		"rbxassetid://7626526871",
		"OfficialSando"
	},
	{
		"rbxassetid://7626527112",
		"mylli128"
	},
	{
		"rbxassetid://7626527487",
		"AverageGirl170"
	},
	{
		"rbxassetid://8994062774",
		"GirlyProGamer1235"
	},
	{
		"rbxassetid://8994066065",
		"Cookie33335"
	},
	{
		"rbxassetid://8994071134",
		"Cookie33335"
	},
	{
		"rbxassetid://8994074573",
		"SlayedSorcerer"
	},
	{
		"rbxassetid://8994076079",
		"Cookie33335"
	},
	{
		"rbxassetid://8994077585",
		"Cookie33335"
	},
	{
		"rbxassetid://8994079163",
		"Cookie33335"
	},
	{
		"rbxassetid://8994084615",
		"HerixHelios"
	},
	{
		"rbxassetid://8994087971",
		"Cookie33335"
	},
	{
		"rbxassetid://8994093709",
		"Cookie33335"
	},
	{
		"rbxassetid://12653750753",
		"TheBabyFireDragon"
	},
	{
		"rbxassetid://12653750916",
		"TheBabyFireDragon"
	},
	{
		"rbxassetid://12653750840",
		"TheBabyFireDragon"
	},
	{
		"rbxassetid://12653751620",
		"sooty"
	},
	{
		"rbxassetid://12653751724",
		"SlayedSorcerer"
	},
	{
		"rbxassetid://12653751871",
		"SlayedSorcerer"
	},
	{
		"rbxassetid://12653752087",
		"Sir_Bingus"
	},
	{
		"rbxassetid://12653752313",
		"Sir_Bingus"
	},
	{
		"rbxassetid://12653752226",
		"Sir_Bingus"
	},
	{
		"rbxassetid://12653752405",
		"Setrah99"
	},
	{
		"rbxassetid://12653752580",
		"seinzie"
	},
	{
		"rbxassetid://12653752688",
		"seinzie"
	},
	{
		"rbxassetid://12653752812",
		"seinzie"
	},
	{
		"rbxassetid://12653752965",
		"seinzie"
	},
	{
		"rbxassetid://12653753124",
		"seinzie"
	},
	{
		"rbxassetid://12653753260",
		"seinzie"
	},
	{
		"rbxassetid://12653753433",
		"seinzie"
	},
	{
		"rbxassetid://12653753570",
		"seinzie"
	},
	{
		"rbxassetid://12653753727",
		"seinzie"
	},
	{
		"rbxassetid://12653753887",
		"seinzie"
	},
	{
		"rbxassetid://12653754019",
		"seinzie"
	},
	{
		"rbxassetid://12653754129",
		"seinzie"
	},
	{
		"rbxassetid://12653754295",
		"seinzie"
	},
	{
		"rbxassetid://12653754454",
		"seinzie"
	},
	{
		"rbxassetid://12653754536",
		"seinzie"
	},
	{
		"rbxassetid://12653754667",
		"seinzie"
	},
	{
		"rbxassetid://12653754820",
		"mooshibee"
	},
	{
		"rbxassetid://12653754936",
		"seinzie"
	},
	{
		"rbxassetid://12653755063",
		"SaDboyTo_11"
	},
	{
		"rbxassetid://12653755168",
		"mylli128"
	},
	{
		"rbxassetid://12653755314",
		"mooshibee"
	},
	{
		"rbxassetid://12653755429",
		"MissGxrgie"
	},
	{
		"rbxassetid://12653755524",
		"JustPlayinForFuns"
	},
	{
		"rbxassetid://12653755660",
		"IrisTheGamerr"
	},
	{
		"rbxassetid://12653755841",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653755957",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756073",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756189",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756392",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756506",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756664",
		"I'mMiMi"
	},
	{
		"rbxassetid://12653756846",
		"hu5p"
	},
	{
		"rbxassetid://12653757031",
		"HueyAcc"
	},
	{
		"rbxassetid://12653757208",
		"HerixHelios"
	},
	{
		"rbxassetid://12653757299",
		"HerixHelios"
	},
	{
		"rbxassetid://12653757299",
		"Hamikee"
	},
	{
		"rbxassetid://12653757581",
		"Hakdog050406"
	},
	{
		"rbxassetid://12653757763",
		"Hakdog050406"
	},
	{
		"rbxassetid://12653757834",
		"ExpertGamings_YT"
	},
	{
		"rbxassetid://12653757987",
		"drift6480"
	},
	{
		"rbxassetid://12653758120",
		"Cookie33335"
	},
	{
		"rbxassetid://12653758376",
		"celi_mimi"
	},
	{
		"rbxassetid://12653758448",
		"AzealySnek"
	},
	{
		"rbxassetid://12653758552",
		"Alashaaaaaaaahhh"
	},
	{
		"rbxassetid://12653759255",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653759440",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653759541",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653759663",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653759823",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653759898",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653760012",
		"Sylzagoon"
	},
	{
		"rbxassetid://12653760112",
		"InniIili"
	},
	{
		"rbxassetid://12653760214",
		"HueyAcc"
	},
	{
		"rbxassetid://12653760363",
		"cherryygyu"
	},
	{
		"rbxassetid://12671813804",
		"GalliChanx"
	},
	{
		"rbxassetid://12695931160",
		"michaleku0"
	}
}

Variables.Nicknames = {
	"OneX",
	"OneX",
	"OneX",
	"Nither",
	"WorthLess",
	"Bwee", 
	"Ethan",
	"Bella",
	"Luna",
	"Charlie",
	"Lucy",
	"Cooper",
	"Max",
	"Bailey",
	"Daisy",
	"Sadie",
	"Lola",
	"Buddy",
	"Molly",
	"Stella",
	"Tucker",
	"Bear",
	"Zoey",
	"Duke",
	"Harley",
	"Jax",
	"Bentley",
	"Milo",
	"Oscar",
	"Oliver",
	"Riley",
	"Rocky",
	"Penny",
	"Sophie",
	"Chloe",
	"Jack",
	"Lily",
	"Nala",
	"Zues",
	"Ellie",
	"Winston",
	"Toby",
	"Loki",
	"Roxy",
	"Coco",
	"Rosie",
	"Teddy",
	"Ruby",
	"Gracie",
	"Leo",
	"Finn",
	"Scout",
	"Dexter",
	"Ollie",
	"Koda",
	"Isaac",
	"Rob",
	"Stefan",
	"Claudia",
	"Mitchell",
	"Conner",
	"Adam",
	"Joey",
	"Tony",
	"Saad",
	"Lexi"
}
Variables.SettingsInfo = {
	Music = {
		title = "Music",
		options = {
			[1] = "On",
			[2] = "Off"
		},
		sort = 2
	},
	SFX = {
		title = "SFX",
		options = {
			[1] = "On",
			[2] = "Off"
		},
		sort = 3
	},
	PetSFX = {
		title = "Pet SFX",
		options = {
			[1] = "On",
			[2] = "Off"
		},
		sort = 4
	},
	Trading = {
		title = "Trading",
		options = {
			[1] = "All",
			[2] = "Friends",
			[3] = "Disabled"
		},
		sort = 1
	},
	Notifications = {
		title = "Notifications",
		options = {
			[1] = "Enabled",
			[2] = "Disabled"
		},
		sort = 5
	},
	ShowOtherPets = {
		title = "Show Other Pets",
		options = {
			[1] = "Yes",
			[2] = "No"
		},
		sort = 6
	},
	PetsControl = {
		title = "Pet Sending",
		options = {
			[1] = "Single",
			[2] = "All"
		},
		sort = 7
	},
	ShowBoosts = {
		title = "Show Boosts",
		options = {
			[1] = "Yes",
			[2] = "No"
		},
		sort = 8
	},
	MountingTitanics = {
		title = "Mounting Titanics",
		options = {
			[1] = "On",
			[2] = "Off"
		},
		sort = 9
	},
	EggSkip = {
		title = "Egg Skip",
		options = {
			[1] = "Basic Pets",
			[2] = "Rare Pets",
			[3] = "Epic Pets",
			[4] = "All Pets"
		},
		sort = 15
	}
}
Variables.ChristmasEventQuests = {
	[1] = {
		Desc = "Break 100 Candy Canes",
		Type = "Candycane",
		Needed = 100,
		Reward = {
			"Gingerbread",
			1000000
		}
	},
	[2] = {
		Desc = "Break 2 Gingerbread Chests",
		Type = "GingerbreadChest",
		Needed = 2,
		Reward = {
			"Triple Coins Boost",
			8
		}
	},
	[3] = {
		Desc = "Earn 20,000,000 Gingerbread",
		Type = "Gingerbread",
		Needed = 20000000,
		Reward = {
			"Diamonds",
			250000
		}
	},
	[4] = {
		Desc = "Break 1,250 Candy Canes",
		Type = "Candycane",
		Needed = 1250,
		Reward = {
			"Diamonds",
			1000000
		}
	},
	[5] = {
		Desc = "Break 40 Gingerbread Chests",
		Type = "GingerbreadChest",
		Needed = 40,
		Reward = {
			"Santas Sleigh",
			1
		}
	}
}
Variables.ChristmasEventQuests2022 = {
	[1] = {
		Desc = "Find today's Elf on a Shelf",
		Type = "ElfOnShelf",
		Needed = 1,
		Reward = {
			"Gingerbread",
			5000000
		}
	},
	[2] = {
		Desc = "Break 100 Candy Canes",
		Type = "Candycane",
		Needed = 100,
		Reward = {
			"Triple Coins Boost",
			25
		}
	},
	[3] = {
		Desc = "Participate in Santa Paws Event",
		Type = "SantaPaws",
		Needed = 1,
		Reward = {
			"Diamonds",
			1000000
		}
	},
	[4] = {
		Desc = "Find all 20 Hidden Presents",
		Type = "Presents",
		Needed = 20,
		Reward = {
			"Triple Damage Boost",
			30
		}
	},
	[5] = {
		Desc = "Break 1,250 Candy Canes",
		Type = "Candycane",
		Needed = 1250,
		Reward = {
			"Gingerbread",
			500000000
		}
	},
	[6] = {
		Desc = "Participate in Grinch Theft Event",
		Type = "GrinchTheft",
		Needed = 1,
		Reward = {
			"Diamonds",
			5000000
		}
	},
	[7] = {
		Desc = "Open 500 Christmas Eggs",
		Type = "ChristmasEggs",
		Needed = 500,
		Reward = {
			"Ultra Lucky Boost",
			50
		}
	},
	[8] = {
		Desc = "Unlock Santa Paw's Cottage",
		Type = "Cottage",
		Needed = 1,
		Reward = {
			"Diamonds",
			25000000
		}
	},
	[9] = {
		Desc = "Break 50 Gingerbread Chests",
		Type = "GingerbreadChest",
		Needed = 50,
		Reward = {
			"Diamonds",
			100000000
		}
	},
	[10] = {
		Desc = "Break 10 Golden Gingerbread Chests",
		Type = "GoldGingerbreadChest",
		Needed = 10,
		Reward = {
			"Rudolph Hoverboard",
			1
		}
	}
}
Variables.HalloweenEventQuests = {
	[1] = {
		Desc = "Open 10 Pumpkin Eggs",
		Type = "PumpkinEggs",
		Needed = 10,
		Reward = {
			"Halloween Candy",
			250000
		}
	},
	[2] = {
		Desc = "Collect 3 million Candy",
		Type = "CandyCurrency",
		Needed = 3000000,
		Reward = {
			"Triple Coins Boost",
			10
		}
	},
	[3] = {
		Desc = "Earn 25 Cursed Eggs",
		Type = "CursedEggs",
		Needed = 25,
		Reward = {
			"Diamonds",
			10000000
		}
	},
	[4] = {
		Desc = "Break 5 Giant Pumpkins",
		Type = "GiantPumpkin",
		Needed = 5,
		Reward = {
			"Hoverboard",
			1
		}
	}
}
Variables.ChristmasLoginRewards2022 = {
	[1] = {
		RequiredTime = 30,
		Reward = {
			"Pet",
			"430",
			{r = true}
		}
	},
	[2] = {
		RequiredTime = 900,
		Reward = {
			"Gingerbread",
			5000000
		}
	},
	[3] = {
		RequiredTime = 900,
		Reward = {
			"Pet",
			"262",
			{g = true}
		}
	},
	[4] = {
		RequiredTime = 900,
		Reward = {
			"Boosters",
			{
				"Ultra Lucky",
				100
			}
		}
	},
	[5] = {
		RequiredTime = 900,
		Reward = {
			"Booth",
			"Christmas Booth"
		}
	},
	[6] = {
		RequiredTime = 900,
		Reward = {
			"Diamonds",
			300000000
		}
	},
	[7] = {
		RequiredTime = 900,
		Reward = {
			"Pet",
			"264",
			{r = true}
		}
	},
	[8] = {
		RequiredTime = 900,
		Reward = {
			"Pet",
			"1014"
		}
	}
}
Variables.Valentines2022Quests = {
	[1] = 100,
	[2] = 25,
	[3] = 150
}
Variables.StPatricks2022Quests = {
	[1] = 150,
	[2] = 50,
	[3] = 1
}
Variables.AprilFools2023Quests = {
	[1] = {
		Desc = "Say 'April Fools' in Chat",
		Type = "ChatAprilFools",
		Needed = 1,
		Reward = {
			"Triple Coins Boost",
			100
		}
	},
	[2] = {
		Desc = "Eat 30 Healthy Fruits",
		Type = "Fruit",
		Needed = 30,
		Reward = {
			"Diamonds",
			1000000
		}
	},
	[3] = {
		Desc = "Break 20 Error Chests",
		Type = "AprilFoolsChests",
		Needed = 20,
		Reward = {
			"April Fools PS1",
			1
		}
	}
}
Variables.StPatricks2022GateToStage = {
	["Leprechaun Village"] = 1,
	["Rainbow Heights"] = 2,
	["Lucky Castle"] = 3
}
Variables.Easter2023Quests = {
	[1] = 200,
	[2] = 30,
	[3] = 100
}
Variables.HackerPortalQuests = {[1] = 3}
Variables.TradeRatingRequirement = 5
--[[Variables.PlaceIds = {
    [4491159178] = {
        Main = math.huge,
		Hardcore = math.huge,
        Trading = math.huge,
        VoiceTrading = math.huge,
        ProTrading = math.huge,
        Holding = math.huge
	},
}]]--

-- incase not added on upload --
--[[if not Variables.PlaceIds[game.GameId] then
    Variables.PlaceIds[game.GameId] = {
        Main = game.PlaceId,
        Hardcore = math.huge,
        Trading = math.huge,
        VoiceTrading = math.huge,
        ProTrading = math.huge,
        Holding = math.huge
    }
end]]--

Variables.LocalPlaceIds = {} --Variables.PlaceIds[game.GameId]
Variables.GameIds = {
    Production = math.huge,
	Staging = math.huge,
    Development = 4491159178,
    Playground = math.huge
}

local HardcoreID = 14990212282

Variables.IsVoiceTradingPlaza =  false --game.PlaceId == Variables.LocalPlaceIds.VoiceTrading
Variables.IsProTradingPlaza =    false --game.PlaceId == Variables.LocalPlaceIds.ProTrading
Variables.IsTradingPlaza =       false --game.PlaceId == Variables.LocalPlaceIds.Trading and true or Variables.IsVoiceTradingPlaza or Variables.IsProTradingPlaza
Variables.IsHardcore =           game.PlaceId == HardcoreID --game.PlaceId == Variables.LocalPlaceIds.Hardcore
Variables.IsDevelopment =        false  --game.GameId == Variables.GameIds.Development
Variables.IsProduction =         false  --game.GameId == Variables.GameIds.Production

return Variables
  -  Editar
  04:54:13.741    -  Editar
  04:54:13.741  ----- [2257] ReplicatedStorage.Library.Asserts -----  -  Editar
  04:54:13.741  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Asserts
	===========
	TODO: Throw a error if the provided value is false or nil
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Functions = require(Library.Functions)

--------|       Top       |--------
local Asserts = {
	optional = {},
	array = {},
	custom = {}
}
--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- General assertion function
local function cassert(condition, errorMessage)
	if not condition then
		error("assertion failed!", (errorMessage or 0) + 3)
	end
end

-- Assertion function for defined values
function Asserts.defined(value, errorMessage)
	cassert(value ~= nil, errorMessage)
end

-- Assertion function for boolean values
function Asserts.boolean(value, errorMessage)
	cassert(typeof(value) == "boolean", errorMessage)
end

-- Helper function to assert if a value is an optional boolean (can be nil or boolean)
local function optionalBoolean(value, errorMessage)
	cassert(value == nil or typeof(value) == "boolean", errorMessage)
end
Asserts.optional.boolean = optionalBoolean

-- Assertion function for number values
function Asserts.number(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
end

-- Helper function to assert if a value is an optional number (can be nil or number)
local function optionalNumber(value, errorMessage)
	cassert(value == nil or typeof(value) == "number", errorMessage)
end
Asserts.optional.number = optionalNumber

-- Assertion function for real (non-NaN) numbers
function Asserts.real(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(not Functions.IsNaN(value), errorMessage)
end

-- Helper function to assert if a value is an optional real number (can be nil or non-NaN number)
local function optionalReal(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(not Functions.IsNaN(value), errorMessage)
	end
end
Asserts.optional.real = optionalReal

-- Assertion function for finite numbers
function Asserts.finite(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(Functions.IsFinite(value), errorMessage)
end

-- Helper function to assert if a value is an optional finite number (can be nil or finite number)
local function optionalFinite(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(Functions.IsFinite(value), errorMessage)
	end
end
Asserts.optional.finite = optionalFinite

-- Assertion function for finite non-negative numbers
function Asserts.finiteNonNegative(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(Functions.IsFinite(value), errorMessage)
	cassert(value >= 0, errorMessage)
end

-- Helper function to assert if a value is an optional finite non-negative number (can be nil or finite non-negative number)
local function optionalFiniteNonNegative(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(Functions.IsFinite(value), errorMessage)
		cassert(value >= 0, errorMessage)
	end
end
Asserts.optional.finiteNonNegative = optionalFiniteNonNegative

-- Assertion function for integers
function Asserts.integer(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(Functions.IsFinite(value), errorMessage)
	cassert(math.floor(value) == value, errorMessage)
end

-- Helper function to assert if a value is an optional integer (can be nil or integer)
local function optionalInteger(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(Functions.IsFinite(value), errorMessage)
		cassert(math.floor(value) == value, errorMessage)
	end
end
Asserts.optional.integer = optionalInteger

-- Assertion function for non-negative integers
function Asserts.integerNonNegative(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(Functions.IsFinite(value), errorMessage)
	cassert(math.floor(value) == value, errorMessage)
	cassert(value >= 0, errorMessage)
end

-- Helper function to assert if a value is an optional non-negative integer (can be nil or non-negative integer)
local function optionalIntegerNonNegative(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(Functions.IsFinite(value), errorMessage)
		cassert(math.floor(value) == value, errorMessage)
		cassert(value >= 0, errorMessage)
	end
end
Asserts.optional.integerNonNegative = optionalIntegerNonNegative

-- Assertion function for natural numbers
function Asserts.natural(value, errorMessage)
	cassert(typeof(value) == "number", errorMessage)
	cassert(Functions.IsFinite(value), errorMessage)
	cassert(math.floor(value) == value, errorMessage)
	cassert(value > 0, errorMessage)
end

-- Helper function to assert if a value is an optional natural number (can be nil or natural number)
local function optionalNatural(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "number", errorMessage)
		cassert(Functions.IsFinite(value), errorMessage)
		cassert(math.floor(value) == value, errorMessage)
		cassert(value > 0, errorMessage)
	end
end
Asserts.optional.natural = optionalNatural

-- Assertion function for strings
function Asserts.string(value, errorMessage)
	cassert(typeof(value) == "string", errorMessage)
end

-- Helper function to assert if a value is an optional string (can be nil or string)
local function optionalString(value, errorMessage)
	cassert(value == nil or typeof(value) == "string", errorMessage)
end
Asserts.optional.string = optionalString

-- Assertion function for ASCII strings
function Asserts.ascii(value, errorMessage)
	cassert(typeof(value) == "string", errorMessage)
	cassert(Functions.IsASCII(value), errorMessage)
end

-- Helper function to assert if a value is an optional ASCII string (can be nil or ASCII string)
local function optionalAscii(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "string", errorMessage)
		cassert(Functions.IsASCII(value), errorMessage)
	end
end
Asserts.optional.ascii = optionalAscii

-- Assertion function for UUID strings
function Asserts.uuid(value, errorMessage)
	cassert(typeof(value) == "string", errorMessage)
	cassert(#value == 36, errorMessage)
	cassert(value:find("^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil, errorMessage)
end

-- Helper function to assert if a value is an optional UUID string (can be nil or UUID string)
local function optionalUuid(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "string", errorMessage)
		cassert(#value == 36, errorMessage)
		cassert(value:find("^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil, errorMessage)
	end
end
Asserts.optional.uuid = optionalUuid

-- Assertion function for stripped UUID strings
function Asserts.uuidStripped(value, errorMessage)
	cassert(typeof(value) == "string", errorMessage)
	cassert(#value == 32, errorMessage)
	cassert(value:find("^%x+$") ~= nil, errorMessage)
end

-- Helper function to assert if a value is an optional stripped UUID string (can be nil or stripped UUID string)
local function optionalUuidStripped(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "string", errorMessage)
		cassert(#value == 32, errorMessage)
		cassert(value:find("^%x+$") ~= nil, errorMessage)
	end
end
Asserts.optional.uuidStripped = optionalUuidStripped

-- Assertion function for functions
function Asserts.func(value, errorMessage)
	cassert(typeof(value) == "function", errorMessage)
end

-- Helper function to assert if a value is an optional function (can be nil or function)
local function optionalFunc(value, errorMessage)
	cassert(value == nil or typeof(value) == "function", errorMessage)
end
Asserts.optional.func = optionalFunc

-- Assertion function for tables
function Asserts.table(value, errorMessage)
	cassert(typeof(value) == "table", errorMessage)
end

-- Helper function to assert if a value is an optional table (can be nil or table)
local function optionalTable(value, errorMessage)
	cassert(value == nil or typeof(value) == "table", errorMessage)
end
Asserts.optional.table = optionalTable

-- Generic assertion function for tables with a specific value type
local function genericArray(value, valueType, errorMessage)
	cassert(typeof(value) == "table", errorMessage)
	local count = #value
	if count > 0 then
		local index = 0
		for key, val in pairs(value) do
			index = index + 1
			cassert(key == index, errorMessage)
			cassert(typeof(val) == valueType, errorMessage)
		end
		cassert(index == count, errorMessage)
		return
	end
	cassert(next(value) == nil, errorMessage)
end
Asserts.array.generic = genericArray

-- Custom assertion function for tables with custom value type
local function customArray(value, customAssertion, errorMessage)
	cassert(typeof(value) == "table", errorMessage)
	local count = #value
	if count > 0 then
		local index = 0
		for key, val in pairs(value) do
			index = index + 1
			cassert(key == index, errorMessage)
			customAssertion(val, (errorMessage or 0) + 1)
		end
		cassert(index == count, errorMessage)
		return
	end
	cassert(next(value) == nil, errorMessage)
end
Asserts.array.custom = customArray

-- Assertion function for arrays of UUID strings
function Asserts.array.uuid(value, errorMessage)
	customArray(value, Asserts.uuid, (errorMessage or 0) + 1)
end

-- Assertion function for arrays of stripped UUID strings
function Asserts.array.uuidStripped(value, errorMessage)
	customArray(value, Asserts.uuidStripped, (errorMessage or 0) + 1)
end

-- Assertion function for arrays of unique UUID strings
function Asserts.array.uniqueUUID(value, errorMessage)
	customArray(value, Asserts.uuid, (errorMessage or 0) + 1)
	local seenValues = {}
	for _, val in ipairs(value) do
		cassert(not seenValues[val], errorMessage)
		seenValues[val] = true
	end
end

-- Assertion function for arrays of unique stripped UUID strings
function Asserts.array.uniqueUUIDStripped(value, errorMessage)
	customArray(value, Asserts.uuidStripped, (errorMessage or 0) + 1)
	local seenValues = {}
	for _, val in ipairs(value) do
		cassert(not seenValues[val], errorMessage)
		seenValues[val] = true
	end
end

-- Assertion function for arrays of boolean values
function Asserts.array.boolean(value, errorMessage)
	genericArray(value, "boolean", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of number values
function Asserts.array.number(value, errorMessage)
	genericArray(value, "number", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of string values
function Asserts.array.string(value, errorMessage)
	genericArray(value, "string", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of table values
function Asserts.array.table(value, errorMessage)
	genericArray(value, "table", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of Vector2 values
function Asserts.array.Vector2(value, errorMessage)
	genericArray(value, "Vector2", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of finite Vector2 values
function Asserts.array.finiteVector2(value, errorMessage)
	customArray(value, Asserts.finiteVector2, (errorMessage or 0) + 1)
end

-- Assertion function for arrays of Vector3 values
function Asserts.array.Vector3(value, errorMessage)
	genericArray(value, "Vector3", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of finite Vector3 values
function Asserts.array.finiteVector3(value, errorMessage)
	customArray(value, Asserts.finiteVector3, (errorMessage or 0) + 1)
end

-- Assertion function for arrays of CFrame values
function Asserts.array.CFrame(value, errorMessage)
	genericArray(value, "CFrame", (errorMessage or 0) + 1)
end

-- Assertion function for arrays of finite CFrame values
function Asserts.array.finiteCFrame(value, errorMessage)
	customArray(value, Asserts.finiteCFrame, (errorMessage or 0) + 1)
end

-- Assertion function for Vector2 values
function Asserts.Vector2(value, errorMessage)
	cassert(typeof(value) == "Vector2", errorMessage)
end

-- Helper function to assert if a value is an optional Vector2 (can be nil or Vector2)
local function optionalVector2(value, errorMessage)
	cassert(value == nil or typeof(value) == "Vector2", errorMessage)
end
Asserts.optional.Vector2 = optionalVector2

-- Assertion function for finite Vector2 values
function Asserts.finiteVector2(value, errorMessage)
	cassert(typeof(value) == "Vector2", errorMessage)
	cassert(Functions.IsFiniteVec2(value), errorMessage)
end

-- Helper function to assert if a value is an optional finite Vector2 (can be nil or finite Vector2)
local function optionalFiniteVector2(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "Vector2", errorMessage)
		cassert(Functions.IsFiniteVec2(value), errorMessage)
	end
end
Asserts.optional.finiteVector2 = optionalFiniteVector2

-- Assertion function for Vector3 values
function Asserts.Vector3(value, errorMessage)
	cassert(typeof(value) == "Vector3", errorMessage)
end

-- Helper function to assert if a value is an optional Vector3 (can be nil or Vector3)
local function optionalVector3(value, errorMessage)
	cassert(value == nil or typeof(value) == "Vector3", errorMessage)
end
Asserts.optional.Vector3 = optionalVector3

-- Assertion function for finite Vector3 values
function Asserts.finiteVector3(value, errorMessage)
	cassert(typeof(value) == "Vector3", errorMessage)
	cassert(Functions.IsFiniteVec(value), errorMessage)
end

-- Helper function to assert if a value is an optional finite Vector3 (can be nil or finite Vector3)
local function optionalFiniteVector3(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "Vector3", errorMessage)
		cassert(Functions.IsFiniteVec(value), errorMessage)
	end
end
Asserts.optional.finiteVector3 = optionalFiniteVector3

-- Assertion function for CFrame values
function Asserts.CFrame(value, errorMessage)
	cassert(typeof(value) == "CFrame", errorMessage)
end

-- Helper function to assert if a value is an optional CFrame (can be nil or CFrame)
local function optionalCFrame(value, errorMessage)
	cassert(value == nil or typeof(value) == "CFrame", errorMessage)
end
Asserts.optional.CFrame = optionalCFrame

-- Assertion function for finite CFrame values
function Asserts.finiteCFrame(value, errorMessage)
	cassert(typeof(value) == "CFrame", errorMessage)
	cassert(Functions.IsFiniteCFrame(value), errorMessage)
end

-- Helper function to assert if a value is an optional finite CFrame (can be nil or finite CFrame)
local function optionalFiniteCFrame(value, errorMessage)
	if value ~= nil then
		cassert(typeof(value) == "CFrame", errorMessage)
		cassert(Functions.IsFiniteCFrame(value), errorMessage)
	end
end
Asserts.optional.finiteCFrame = optionalFiniteCFrame

-- Assertion function for Instance values
function Asserts.Instance(value, errorMessage)
	cassert(typeof(value) == "Instance", errorMessage)
end

-- Helper function to assert if a value is an optional Instance (can be nil or Instance)
local function optionalInstance(value, errorMessage)
	cassert(value == nil or typeof(value) == "Instance", errorMessage)
end
Asserts.optional.Instance = optionalInstance

-- Assertion function for Player values
function Asserts.Player(value, errorMessage)
	cassert(typeof(value) == "Instance" and value.ClassName == "Player", errorMessage)
end

-- Helper function to assert if a value is an optional Player (can be nil or Player)
local function optionalPlayer(value, errorMessage)
	cassert(value == nil or (typeof(value) == "Instance" and value.ClassName == "Player"), errorMessage)
end
Asserts.optional.Player = optionalPlayer

-- Assertion function for Model values
function Asserts.Model(value, errorMessage)
	cassert(typeof(value) == "Instance" and value.ClassName == "Model", errorMessage)
end

-- Helper function to assert if a value is an optional Model (can be nil or Model)
local function optionalModel(value, errorMessage)
	cassert(value == nil or (typeof(value) == "Instance" and value.ClassName == "Model"), errorMessage)
end
Asserts.optional.Model = optionalModel

-- Custom assertion function for petId
function Asserts.custom.petId(value, errorMessage)
	cassert(typeof(value) == "string", errorMessage)
	cassert(#value == 34, errorMessage)
	cassert(value:find("^id[%x]+$") ~= nil, errorMessage)
end

-- Assertion function for arrays of unique petIds
function Asserts.custom.uniquePetIds(value, errorMessage)
	customArray(value, Asserts.custom.petId, (errorMessage or 0) + 1)
	local seenValues = {}
	for _, val in ipairs(value) do
		cassert(not seenValues[val], errorMessage)
		seenValues[val] = true
	end
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Asserts  -  Editar
  04:54:13.741    -  Editar
  04:54:13.741  ----- [2258] ReplicatedStorage.Library.RAPShared -----  -  Editar
  04:54:13.742  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.RAPShared
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local Modules = Library:WaitForChild("Modules")

-- | shared modules | --
local Asserts = require(Library.Asserts)
local Directory = require(Library.Directory)
local ModulePets = require(Modules.Pets)

--------|       Top       |--------
local RAPShared = {}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


function RAPShared.EncodeKey(pet)  
	local encode = pet.id
	
	if pet.hc then
		encode = encode .. "/hc"
	end
	
	if pet.sh then
		encode = encode .. "/sh"
	end
	
	if pet.dm then
		return encode .. "/dm"
	end
	
	if pet.r then
		return encode .. "/r"
	end
	
	if pet.g then
		encode = encode .. "/g"
	end
	
	return encode
end

function RAPShared.CreateKey(pet)  
	Asserts.table(pet)
	Asserts.string(pet.id)
	
	local key = table.clone(pet)
	key.encoded = RAPShared.EncodeKey(key)
	
	return key
end

function RAPShared.ParseKey(key)  
	local parsedKey = {
		encoded = "",
		id = "",
		hc = false,
		sh = false,
		dm = false,
		r = false,
		g = false
	}
	
	for i in key:gmatch("[^/]+") do
		if #parsedKey.id == 0 then
			assert(tonumber(i))
			parsedKey.id = i
			continue
		end
		
		assert(parsedKey[i] ~= nil)
		
		local deb = (i == "encoded" and false) or i ~= "id"
		assert(deb)
		
		parsedKey[i] = true
	end
	
	assert(#parsedKey.id > 0)
	
	parsedKey.encoded = RAPShared.EncodeKey(parsedKey)
	return parsedKey
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return RAPShared
  -  Editar
  04:54:13.742    -  Editar
  04:54:13.742  ----- [2259] ReplicatedStorage.Library.Types -----  -  Editar
  04:54:13.742  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Types
	===========
	And in-house library of helpful Types down to things that aren't already
	implemented natively by Roblox like ScaleModel. The Types individually can be found as children under this module.
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------|       Top       |--------
local Types = {
	Banks = require(script.Banks), 
	Fruits = require(script.Fruits), 
	Quests = require(script.Quests), 
	Currency = require(script.Currency),
	Yeet = require(script.Yeet)
}

--------|     Setting     |--------


--------|    Reference    |--------

--------|    Variables    |--------
local unaddedEntries = ""

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and Types[module.Name] == nil then
		unaddedEntries = unaddedEntries .. string.format("%s = require(script.%s),\n", module.Name, module.Name)
	end	
end

if #unaddedEntries > 0 then
	warn(string.format("Unadded entries: \n\n%s\n", unaddedEntries))
end

for index, v in pairs(Types) do
	if not script:FindFirstChild(index) then
		warn(string.format("Unknown entry: %s", tostring(index)))
	end	
end

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and Types[module.Name] == nil then
		Types[module.Name] = require(module)
	end	
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Types
  -  Editar
  04:54:13.742    -  Editar
  04:54:13.742  ----- [2260] ReplicatedStorage.Library.Types.Banks -----  -  Editar
  04:54:13.742  -- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Pets = require(Modules.Pets)

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--[[
	
	Holds bank data types
	
--]]

return {
	HISTORY_MAX = 100,
	HISTORY_ENUM = {
		DEPOSIT = 1,
		WITHDRAW = 2,
		INVITE = 3,
		KICK = 4,
		LEAVE = 5,
		JOIN = 6,
		TIER = 7,
		INTEREST = 8,
		DUPE = 9
	}
}  -  Editar
  04:54:13.742    -  Editar
  04:54:13.742  ----- [2261] ReplicatedStorage.Library.Types.Fruits -----  -  Editar
  04:54:13.742  --------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--[[
	
	Holds fruit data types
	
--]]

return {
	Compute = function(dir, data, saveAge, masteryMult)
		local amount = data.Amount
		if amount <= 0 then
			return 0
		end
		
		local age = saveAge - data.LastUpdated
		local decayRate = dir.DecayRate
		if masteryMult then
			decayRate = decayRate * masteryMult
		end
		
		if age < -decayRate then
			return 0
		end
		
		local computed = amount - math.max(0, age) / decayRate
		if not (computed <= 0) and computed == computed and computed ~= math.huge then
			return computed
		end
		
		return 0
	end
};
  -  Editar
  04:54:13.742    -  Editar
  04:54:13.743  ----- [2262] ReplicatedStorage.Library.Types.Currency -----  -  Editar
  04:54:13.743  --------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--[[
	
	Holds currency data types
	
--]]

local Types = {
	Premium = {
		Name = ""
	}, 
	World = {
		Name = ""
	}, 
	Event = {
		Name = ""
	}, 
	Other = {
		Name = ""
	}
}

for name, data in pairs(Types) do
	data.Name = name
end

return {
	Types = Types, 
	Visibility = {
		Hidden = 0, 
		Always = 1, 
		Selective = 2
	}
}  -  Editar
  04:54:13.743    -  Editar
  04:54:13.743  ----- [2263] ReplicatedStorage.Library.Types.Quests -----  -  Editar
  04:54:13.743  -- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local v3 = require(Modules.Areas)
local v4 = require(Modules.Pets)
local u2 = require(Library.Functions);

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--[[
	
	Holds fruit data types
	
--]]

local v5 = {
	Easy = {
		Name = "", 
		DisplayName = "Easy", 
		Points = 40
	}, 
	Medium = {
		Name = "", 
		DisplayName = "Medium", 
		Points = 100
	}, 
	Hard = {
		Name = "", 
		DisplayName = "Hard", 
		Points = 250
	}
};
for v6, v7 in pairs(v5) do
	v7.Name = v6;
end;
function JoinPattern(p1, p2)
	local v8 = nil;
	if p2 then
		return p2;
	end;
	if typeof(p1) == "table" then

	else
		return p1;
	end;
	local v9 = #p1;
	if v9 == 0 then
		return "";
	end;
	if v9 == 1 then
		return p1[1];
	end;
	if v9 == 2 then
		return p1[1] .. " or " .. p1[2];
	end;
	v8 = "";
	local v10 = v9 - 1;
	local v11 = 1 - 1;
	while true do
		v8 = v8 .. p1[v11] .. ", ";
		if 0 <= 1 then
			if v11 < v10 then

			else
				break;
			end;
		elseif v10 < v11 then

		else
			break;
		end;
		v11 = v11 + 1;	
	end;
	return v8 .. "or " .. p1[v9];
end;
local u1 = {
	DefaultData = {
		v = 0
	}, 
	Tiers = v5, 
	DefaultDescriptions = {
		Coin = function(p3)
			local l__Coin__13 = p3.Coin;
			assert(l__Coin__13);
			if p3.AnyArea then
				if l__Coin__13.Pattern then
					return "Break {Amount} {Coin.Pattern}s!";
				else
					return "Break {Amount} coins!";
				end;
			end;
			if l__Coin__13.Pattern then
				return "Break {Amount} {Coin.Pattern}s in {Area.Name}!";
			end;
			return "Break {Amount} coins in {Area.Name}!";
		end, 
		Egg = function(p4)
			local l__Egg__14 = p4.Egg;
			assert(l__Egg__14);
			if p4.AnyArea then
				if l__Egg__14.Pattern then
					return "Hatch {Amount}{Egg.Attributes}{Egg.Rarity} Pets!";
				else
					return "Hatch {Amount}{Egg.Attributes}{Egg.Rarity} Pets!";
				end;
			end;
			if l__Egg__14.Pattern then
				return "Hatch {Amount}{Egg.Attributes}{Egg.Rarity} Pets from {Egg.Pattern} Eggs!";
			end;
			return "Hatch {Amount}{Egg.Attributes}{Egg.Rarity} Pets from {Area.Name} Eggs!";
		end, 
		Spend = function(p5)
			assert(p5.Spend);
			return "Spend {Amount.Short} {Spend.Pattern}!";
		end, 
		Collect = function(p6)
			assert(p6.Collect);
			return "Collect {Amount.Short} {Collect.Pattern}!";
		end
	}
};
function u1.ComputeDescription(p7, p8, p9)
	local v15 = p7.Description;
	if not v15 then
		local v16 = nil;
		if p7.Coin then
			v16 = "Coin";
		elseif p7.Egg then
			v16 = "Egg";
		elseif p7.Spend then
			v16 = "Spend";
		elseif p7.Collect then
			v16 = "Collect";
		else
			error((("Missing Quest Description: (\"%*\", \"%*\")"):format(p7.AreaId, p7.Name)));
		end;
		local v17 = u1.DefaultDescriptions[v16];
		assert(v17);
		v15 = v17(p7);
	end;
	assert(v15);
	local v18 = p9 or p7.Amount;
	local l__name__19 = p8.name;
	assert(l__name__19);
	local v20 = {
		Amount = u2.Commas(v18), 
		["Amount.Short"] = u2.NumberShorten(v18), 
		["Area.Name"] = l__name__19
	};
	local l__Coin__21 = p7.Coin;
	if l__Coin__21 then
		local l__Pattern__22 = l__Coin__21.Pattern;
		if l__Pattern__22 then
			v20["Coin.Pattern"] = JoinPattern(l__Pattern__22, l__Coin__21.PatternDescription);
		end;
	end;
	local l__Egg__23 = p7.Egg;
	if l__Egg__23 then
		local l__Pattern__24 = l__Egg__23.Pattern;
		if l__Pattern__24 then
			v20["Egg.Pattern"] = JoinPattern(l__Pattern__24, l__Egg__23.PatternDescription);
		end;
		local l__Attributes__25 = l__Egg__23.Attributes;
		local v26 = {};
		if l__Attributes__25 then
			if l__Attributes__25.sh then
				table.insert(v26, "Shiny");
			end;
			if l__Attributes__25.r then
				table.insert(v26, "Rainbow");
			elseif l__Attributes__25.g then
				table.insert(v26, "Golden");
			end;
		end;
		local v27 = table.concat(v26, " ");
		if #v26 > 0 then
			v27 = " " .. v27;
		end;
		v20["Egg.Attributes"] = v27;
		local l__Rarity__28 = l__Egg__23.Rarity;
		local v29
		if l__Rarity__28 then
			v29 = " " .. l__Rarity__28;
		else
			v29 = "";
		end;
		assert(v29);
		v20["Egg.Rarity"] = v29;
	end;
	local l__Spend__30 = p7.Spend;
	if l__Spend__30 then
		local l__Pattern__31 = l__Spend__30.Pattern;
		if l__Pattern__31 then
			v20["Spend.Pattern"] = JoinPattern(l__Pattern__31, l__Spend__30.PatternDescription);
		end;
	end;
	local l__Collect__32 = p7.Collect;
	if l__Collect__32 then
		local l__Pattern__33 = l__Collect__32.Pattern;
		if l__Pattern__33 then
			v20["Collect.Pattern"] = JoinPattern(l__Pattern__33, l__Collect__32.PatternDescription);
		end;
	end;
	return v15:gsub("{(.-)}", function(p10)
		local v34 = v20[p10];
		if not v34 then
			error((("Missing Quest Description Variable: (\"%*\", \"%*\"): %*"):format(p7.AreaId, p7.Name, p10)));
		end;
		return v34;
	end);
end;
return u1;
  -  Editar
  04:54:13.743    -  Editar
  04:54:13.743  ----- [2264] ReplicatedStorage.Library.Types.Yeet -----  -  Editar
  04:54:13.743  -- Decompiled using Krnl
local v7 = require(game.ReplicatedStorage.Library.Modules.Pets)
local v8 = {
	["Upgrades"] =  {
		["Yeet Egg Luck"] = {
			[1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, 
			[9] = 9, [10] = 10
		},
		["Yeet Egg Price"] =  {
			0.95, 0.9 ,0.85, 0.8, 0.75, 0.7, 0.65, 0.55, 0.5
		},
		["Yeet Orb Power"] = {
			[1] = 100, [2] = 250, [3] = 500, [4] = 800, [5] = 1000, [6] = 1500, [7] = 2500, [8] = 3500, 
			[9] = 3500, [10] = 4000
		}
	}
}
return v8
  -  Editar
  04:54:13.743    -  Editar
  04:54:13.743  ----- [2265] ReplicatedStorage.Library.Client -----  -  Editar
  04:54:13.743  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Client
	===========
	Holds everything under client Modules.
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------|       Top       |--------
Client = {
	Loaded = false,
	Network = require(script.Network),
	Settings = require(script.Settings),
	FFlags = require(script.FFlags),
	Debug = require(script.Debug),
	GUI = require(script.GUI),
	GUIParticles = require(script.GUIParticles),
	Language = require(script.Language),
	ChatMsg = require(script.ChatMsg),
	Controller = require(script.Controller),
	GIF = require(script.GIF),
	Save = require(script.Save),
	Shake = require(script.Shake),
	Interact = require(script.Interact),
	InfoOverlay = require(script.InfoOverlay),
	GUIFX = require(script.GUIFX),
	Gamepasses = require(script.Gamepasses),
	Message = require(script.Message),
	WorldFX = require(script.WorldFX),
	WorldCmds = require(script.WorldCmds),
	ServerBoosts = require(script.ServerBoosts),
	PetUI = require(script.PetUI),
	PetCmds = require(script.PetCmds),
	RAPCmds = require(script.RAPCmds),
	FruitCmds = require(script.FruitCmds),
	QuestCmds = require(script.QuestCmds)
}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Load modules asynchronously
task.spawn(function()
	local lateLoading = false

	-- Iterate through all child modules
	for _, moduleScript in ipairs(script:GetChildren()) do
		-- Check if the module is a ModuleScript and not already loaded
		if moduleScript:IsA("ModuleScript") and Client[moduleScript.Name] == nil then
			if not lateLoading then
				-- Delay the first late-loading module by one frame to improve performance
				lateLoading = true
				task.wait()
			end

			print("Library (Client) - Late loading: ", moduleScript)
			Client[moduleScript.Name] = require(moduleScript)
		end
	end

	-- Fetch player data after modules are loaded
	Client.Save.FetchPlayer(game:GetService("Players").LocalPlayer)
	Client.Loaded = true
end)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Client  -  Editar
  04:54:13.743    -  Editar
  04:54:13.744  ----- [2266] ReplicatedStorage.Library.Client.FruitCmds -----  -  Editar
  04:54:13.744  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.FruitCmds
	===========
	Handles all client stuff for Fruits.
    ===========
    \\\ Get player fruits
		FruitCmds.Get(
			player,			<-- |REQ|
			dir,			<-- |REQ|	
		)
	\\\ Gets fruit bonus given from a certain fruit
		FruitCmds.GetBonus(
			player,			<-- |REQ|
			dir,			<-- |REQ|	
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Asserts = require(Library.Asserts)
local Directory = require(Library.Directory)
local Save = require(ClientLibrary.Save)
local Shared = require(Library.Shared)
local FFlags = require(ClientLibrary.FFlags)
local Fruits = require(Types.Fruits)
local Network = require(ClientLibrary.Network)

--------|       Top       |--------
local FruitCmds = {}

--------|     Setting     |--------

--------|    Reference    |--------
local Players = game:GetService("Players")

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FruitCmds.Directory = Directory.Fruits

function HasPerk(player, perk)
	local save = Save.Get(player)
	local level 
	if not save then
		level = 0
	else
		assert(save)
		if not save then
			level = 1
		else
			assert(save)
			local l__Fruits__8 = save.Mastery.Fruits
			if l__Fruits__8 then
				level = Shared.MasteryXPToLevel(l__Fruits__8)
			else
				level = 1
			end
		end
	end
	
	local perks = Directory.Mastery.Fruits.perks[perk]
	if perks then
		if perks.level <= level then
			return true
		end
	end
	
	return false
end

function FruitCmds.Get(player, dir)
	assert(dir == FruitCmds.Directory[dir.Name])
	if not FFlags.Get(FFlags.Keys.Fruit) then
		return 0
	end
	
	local save = Save.Get(player)
	if not save then
		return 0
	end
	assert(save)
	
	local playerFruitD = save.Fruits[dir.Name]
	if not playerFruitD then
		return 0
	end
	assert(playerFruitD)
	
	local mult = 1
	if HasPerk(player, 1) then
		mult = 1.2
	elseif HasPerk(player, 2) then
		mult = 1.5
	end
	
	return Fruits.Compute(dir, playerFruitD, Shared.ComputeSaveAge(save), mult)
end

function FruitCmds.GetBonus(player, dir)
	local mult = 1
	if HasPerk(player, 3) then
		mult = 1.3
	end
	
	return dir.Bonus((math.ceil((FruitCmds.Get(player, dir))))) * mult
end

Network.Fired("Fruits: Update"):Connect(function(player, fruit, newData)
	local save = Save.Get(player)
	if not save then
		return
	end
	assert(save)
	
	save.Fruits[fruit] = newData
	Shared.SignalStatUpdated(player, "Fruits")
end)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return FruitCmds
  -  Editar
  04:54:13.744    -  Editar
  04:54:13.744  ----- [2267] ReplicatedStorage.Library.Client.Settings -----  -  Editar
  04:54:13.744  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Settings
	===========
	Holds all client settings	
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local Settings = {
	FreeGamepasses = false, -- PASSESSS [ KEEP ENABLED UNLESS MONEY ] - onex
	CoinGrabDistance = 300,
	PetGrabDistance = 300,
	ShowPetDebug = false,
	MountingTitanicsEnabled = true,
	MusicEnabled = true,
	SoundsEnabled = true,
	SupportsVR = false,
	SupportsPortrait = false,
	ForcedPortrait = false,
	Scale9Slice = true,
	ScaleStrokes = true,
	ScalePadding = false,
	ScaleLists = false,
	ScaleGrids = false,
	UIEasingStyle = "Sine",
	StatsNoFreeze = {
		Hardcore = true,
		PetsEquipped = true,
		HardcorePetsEquipped = true,
		Pets = true,
		Settings = true,
		AutoDelete = true,
		AutoHatchSettings = true,
		Valentines2022Quest = true,
		DaycareQueue = true,
		DaycareHardcoreQueue = true,
		Fruits = true,
		Quests = true,
		Events = true,
		EventsRewardStage = true,
		DiamondMineData = true,
		LastShopClick = true
	},
	DiamondMineCooldown = 240,
	DiamondMineMaxEarn = 50_000_000_000
}

return Settings  -  Editar
  04:54:13.744    -  Editar
  04:54:13.744  ----- [2268] ReplicatedStorage.Library.Client.FFlags -----  -  Editar
  04:54:13.744  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Players = game:GetService("Players");
local Library = ReplicatedStorage:WaitForChild("Library");
local Client = Library:WaitForChild("Client");
local Modules = Library:WaitForChild("Modules");
local m_Functions = require(Library.Functions);
local m_Signal = require(Library.Signal);
local m_Network = require(Client.Network);
local m_FFlags = require(Modules.FFlags);
local table1 = {
	Options = m_FFlags.Options,
	Keys = m_FFlags.Keys,
	currentData = {},
	currentDataSaved = {}
};
function table1.Get(p1) -- Line: 23
	--[[
		Upvalues:
			[1] = m_FFlags
			[2] = table1
	--]]
	if typeof(p1) ~= "string" then
		error(string.format("Key must be string (was '%s')", (typeof(p1))));
	end
	local v1 = m_FFlags.Options[p1];
	if not v1 then
		error(string.format("Missing key: %s", p1));
	end
	local v2 = table1.currentData[p1];
	if v2 == nil and not v1.Nullable then
		v2 = v1.Default;
	end
	return v2;
end
local table2 = {};
function table1.CanBypass(p2) -- Line: 39
	--[[
		Upvalues:
			[1] = Players
			[2] = table2
			[3] = m_FFlags
	--]]
	assert(p2 == nil and true or typeof(p2) == "Instance" and p2:IsA("Player") or false);
	local u1 = p2 or Players.LocalPlayer;
	local v3 = table2[u1];
	if v3 ~= nil then
		return v3;
	end
	local bool1 = false;
	pcall(function() -- Line: 47
		--[[
			Upvalues:
				[1] = m_FFlags
				[2] = u1
				[3] = bool1
				[4] = table2
		--]]
		if m_FFlags.Admins[u1.UserId] then
			bool1 = true;
		end
		table2[u1] = bool1;
	end);
	return bool1;
end
m_Network.Fired("FFlags Changed"):Connect(function(p3) -- Line: 60
	--[[
		Upvalues:
			[1] = table1
			[2] = m_Functions
			[3] = m_Signal
	--]]
	local v4 = table1;
	local v5 = table1;
	local v6 = m_Functions.DeepCopyUnsafe(p3);
	local v7 = m_Functions.DeepCopyUnsafe(p3);
	v4.currentData = v6;
	v5.currentDataSaved = v7;
	task.spawn(function() -- Line: 62
		--[[
			Upvalues:
				[1] = m_Signal
				[2] = m_Functions
				[3] = p3
		--]]
		m_Signal.Fire("FFlags Changed", m_Functions.DeepCopyUnsafe(p3));
	end);
end);
return table1;
  -  Editar
  04:54:13.744    -  Editar
  04:54:13.744  ----- [2269] ReplicatedStorage.Library.Client.Debug -----  -  Editar
  04:54:13.744  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Debug
	===========
	Tool to ease debugging and watch variables live using F2 debug viewer (admins only)
	Supports basic tables, dictionaries, and colors
	===========
		\\\ Update/Start tracking variable on debug interface
		Debug.Track(
			variable name,			<-- |REQ|	Name for variable
			category,				<-- |REQ|	Category variable is under (module name, script, etc.)
			variable value,			<-- |REQ|	Value for variable
		)
		
		\\\ Remove tracked variable
		Debug.Track(
			variable name,			<-- |REQ|	Name for variable
			category,				<-- |REQ|	Category variable is under (module name, script, etc.)
		)
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --

--------|       Top       |--------
local Debug = {}

--------|     Setting     |--------


--------|    Reference    |--------

--------|    Variables    |--------
local log = {}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Debug.Track = function(name, category, value)
	--- Create new log entry if it doesn't already exist
	if log[category] == nil then
		log[category] = {}
	end

	--- Update log entry
	log[category][name] = value
end


Debug.Cancel = function(name, category)
	--- Check if log exists
	if log[category] then
		--- Remove log
		log[category][name] = nil

		--- Check for any remaining logs in category
		for _, _ in pairs(log[category]) do
			return
		end

		--- No remaining logs for this category? KILL IT WITH FIRE
		log[category] = nil
	end
end

Debug.Get = function()
	--- Return logs
	return log
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Debug  -  Editar
  04:54:13.745    -  Editar
  04:54:13.745  ----- [2270] ReplicatedStorage.Library.Client.GUI -----  -  Editar
  04:54:13.745  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.GUI
	===========
	Quick and easy way to index GUI objects - completely automated. Makes coding interfaces bearable :D!
	Also includes a super handy mouse lock function which allows you to toggle the mouse being able to move around when
	in first person. 
	
	Example on indexing a child under a GUI:
		_L.GUI.Message.Ok
	===========
		\\\ Toggle the mouse lock to make interfaces accessible in First Person camera. Can also be used to ignore scroll frames.
		GUI.ToggleMouseLock(
			newState,				<-- |REQ|	Boolean										
		)
		
		\\\ Toggle the visibility of the mouse cursor
		GUI.ToggleCursor(
			newState,				<-- |REQ|	Boolean										
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --

--------|       Top       |--------
local GUI = {}

--------|     Setting     |--------
local blacklistedGuis = {"Freecam", "BubbleChat", "Chat"} --- These are blacklisted Core GUIs that will not be scanned

--------|    Reference    |--------
local UserInputService = game:GetService("UserInputService")
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local whitelistedClasses = {"ScreenGui", "Frame", "ScrollingFrame", "ViewportFrame", "ImageLabel", "TextButton", "ImageButton", "TextBox", "TextLabel", "UIListLayout", "UIGridLayout", "UIAspectRatioConstraint"}

--------|    Variables    |--------
local lockMouse

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

playerGui:WaitForChild("Message", 999999)

--- Mouse lock (prevents from being unable to zoom in first person because scrollframes
GUI.ToggleMouseLock = function(newState)
	newState = (newState ~= nil and newState or false)
	--
	if not lockMouse then
		local lockMouseScreen = Instance.new("ScreenGui")
		lockMouseScreen.Name = "LockMouse"
		lockMouseScreen.Parent = playerGui
		--
		lockMouse = Instance.new("TextButton")
		lockMouse.Visible = false
		lockMouse.BackgroundTransparency = 1
		lockMouse.Text = ""
		lockMouse.BorderSizePixel = 0
		lockMouse.Size = UDim2.new(0, 1, 0, 1)
		lockMouse.Parent = lockMouseScreen
	end
	--
	lockMouse.Modal = newState
	lockMouse.Visible = newState
end

GUI.ToggleCursor = function(newState)
	newState = (newState ~= nil and newState or false)
	--
	UserInputService.MouseIconEnabled = newState
end

------------------------------------------------------------------

--- Scan for GUIs to add to index
function Scan(instance, parent)
	--- Calculates which gui instance is more important (based on dependance and class)
	local function MoreImportant(a, b)
		local aHeight, aCurr = 0, a
		local bHeight, bCurr = 0, b
		repeat  aCurr = aCurr.Parent  aHeight = aHeight + 1  until aCurr.Parent == playerGui
		repeat  bCurr = bCurr.Parent  bHeight = bHeight + 1  until bCurr.Parent == playerGui
		if aHeight == bHeight then
			for i, v in ipairs(whitelistedClasses) do
				if v == a.ClassName then
					aHeight = i
				elseif v == b.ClassName then
					bHeight = i
				end
			end
		end
		return (aHeight < bHeight and a or b)
	end
	
	--- Iterate through gui instance children
	for _, child in ipairs(instance:GetChildren()) do
		local childName = (child.Name)
		local parentName = ((parent ~= nil) and parent.Name or "")

		if child:IsA("ScreenGui") and (not table.find(blacklistedGuis, childName)) then
			GUI[childName:gsub("%s+", "")] = {Gui = child}
			Scan(child, child)
		elseif child:IsA("GuiObject") and parent then
			local exists = GUI[parentName:gsub("%s+", "")][childName:gsub("%s+", "")]
			if (not exists) or (exists and MoreImportant(child, exists) == child) then
				GUI[parentName:gsub("%s+", "")][childName:gsub("%s+", "")] = child
			end
			Scan(child, parent, true)
		end	
	end
end

Scan(playerGui)

playerGui.ChildAdded:Connect(function(child)
	local childName = child.Name
	if child:IsDescendantOf(playerGui.Chat) then childName = child.Name end
	
	if child.ClassName == "ScreenGui" and (not table.find(blacklistedGuis, childName)) then
		GUI[childName:gsub("%s+", "")] = {Gui = child}
		Scan(child, child)
	end
end)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return GUI
  -  Editar
  04:54:13.745    -  Editar
  04:54:13.745  ----- [2271] ReplicatedStorage.Library.Client.GUIParticles -----  -  Editar
  04:54:13.745  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.GUIParticles
	===========
	Straps particles to the camera on a 2D plane, within the bounds of a GUI element. Does not support rotation because I can't
	comprehend anything past algebra 1. Not super accurate, great for screen-wide particle effects like confetti. Automatically
	updates and can be set to a UDim2 instead of a gui instance.
	===========
		\\\ Create :o
		GUIParticles.New(
			guiElement/UDim2,		<-- |REQ|	GUI element (or position) you want to attach particles to
			particle,				<-- |REQ|	Particle you want to attach to gui
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------|       Top       |--------
local GUIParticles = {}

--------|     Setting     |--------
local displayZ = 10

--------|    Reference    |--------
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--------|    Variables    |--------
local cachedProperties = {}
local particleFolder

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function GUIParticles.New(gui, particle) 
	-- Variables
	local isGeneratedGui = false
	
	--- Generate GUI holder if it is a UDIM2 position
	if typeof(gui) == "UDim2" then
		isGeneratedGui = true
		local fakeGuiHolder = Instance.new("ScreenGui")
		fakeGuiHolder.Parent = Players.LocalPlayer.PlayerGui
		local fakeGui = Instance.new("Frame")
		fakeGui.BackgroundTransparency = 1
		fakeGui.Size = UDim2.new(0, 1, 0, 1)
		fakeGui.Position = gui
		fakeGui.AnchorPoint = Vector2.new(0.5, 0.5)
		fakeGui.Parent = fakeGuiHolder
		gui = fakeGui
	end
	
	--- Setup particle folder if it doesn't already exist
	if particleFolder == nil then
		particleFolder = Instance.new("Folder")
		particleFolder.Name = "GUI Particles"
		particleFolder.Parent = game.Workspace.CurrentCamera
	end
	
	--- Create particle's part holder
	local particlePart = Instance.new("Part")
	particlePart.Transparency = 1
	particlePart.Material = Enum.Material.SmoothPlastic
	particlePart.CanCollide = false
	particlePart.Anchored = true
	particlePart.Size = Vector3.new(0, 0, 0)
	particlePart.Name = particle.Name
	particlePart.Parent = particleFolder
	
	--- Create attachment for particles (avoid spread)
	local attachment = Instance.new("Attachment")
	attachment.Parent = particlePart
	
	--- Add in particles
	particle = particle:Clone()
	particle.ZOffset = particle.ZOffset + displayZ * 0.645 --- Hack of the century 
	particle.Parent = attachment
	
	--- Math
	local function Update()  
		local camera = game.Workspace.CurrentCamera
		local cameraSize = camera.ViewportSize
		local sizeX, sizeY = gui.AbsoluteSize.X, gui.AbsoluteSize.Y
		local posX, posY = gui.AbsolutePosition.X + (sizeX / 2), gui.AbsolutePosition.Y + (sizeY / 2)
			--[[local sizeInStudsTop = camera:ScreenPointToRay(gui.AbsolutePosition.X, gui.AbsolutePosition.Y, displayZ).Origin
		local sizeInStudsBottom = camera:ScreenPointToRay(gui.AbsolutePosition.X+sizeX, gui.AbsolutePosition.Y+sizeY, displayZ).Origin
		particlePart.Size = Vector3.new(math.abs(sizeInStudsBottom.X-sizeInStudsTop.X), math.abs(sizeInStudsBottom.Y-sizeInStudsTop.Y), 0.05) ]]
		local positionInStuds = camera:ScreenPointToRay(posX, posY, displayZ).Origin
		particlePart.CFrame = CFrame.new(positionInStuds) * CFrame.Angles(camera.CFrame:toEulerAnglesXYZ())
	end
	
	--- Main
	coroutine.wrap(function() 
		--- Update
		while (gui and particleFolder and particle and particlePart and particle.Parent) do
			Update()
			RunService.RenderStepped:Wait()
		end
		
		--- Destroy
		if gui.Parent and isGeneratedGui then  gui.Parent:Destroy()  end
		if particle then  particle:Destroy()  end
		if particlePart then  particlePart:Destroy()  end
	end)()
	--
	return particle
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return GUIParticles
  -  Editar
  04:54:13.745    -  Editar
  04:54:13.745  ----- [2272] ReplicatedStorage.Library.Client.Language -----  -  Editar
  04:54:13.745  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Language
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local table1 = {};
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local LocalizationService = game:GetService("LocalizationService");
local m_Signal = require(ReplicatedStorage:WaitForChild("Library").Signal);
local table2 = {
	english = "en-us",
	spanish = "es-es",
	french = "fr-fr",
	korean = "ko-kr",
	chinesesimplified = "zh-cn",
	chinesetraditional = "zh-tw",
	german = "de-de",
	portuguese = "pr-br",
	russian = "ru-ru",
	italian = "it-it",
	indonesian = "id-id",
	japanese = "ja-jp",
	albanian = "sq-al",
	bengali = "bn-bd",
	bokmal = "nb-no",
	bosnian = "bs-ba",
	bulgarian = "bg-bg",
	burmese = "my-mm",
	croatian = "hr-hr",
	czech = "cs-cz",
	danish = "da-dk",
	dutch = "nl-nl",
	estonian = "et-ee",
	filipino = "fil-ph",
	finnish = "fi-fi",
	georgian = "ka-ge",
	greek = "el-gr",
	hindi = "hi-in",
	hungarian = "hu-hu",
	kazakh = "kk-kz",
	khmer = "km-kh",
	latvian = "lv-lv",
	lithuanian = "lt-lt",
	malay = "ms-my",
	polish = "pl-pl",
	romanian = "ro-ro",
	serbian = "sr-rs",
	sinhala = "si-lk",
	slovak = "sk-sk",
	slovenian = "sl-sl",
	swedish = "sv-se",
	thai = "th-th",
	turkish = "tr-tr",
	ukrainian = "uk-ua",
	vietnamese = "vi-vn"
};
local u1 = "en-us";
local table3 = {};
local u2 = nil;
local function TranslateImages() -- Line: 168
	--[[
		Upvalues:
			[1] = table3
			[2] = table1
	--]]
	for key1, _ in pairs(table3) do
		table1.TranslateImage(key1);
	end
end
function table1.TranslateImage(p1) -- Line: 178
	--[[
		Upvalues:
			[1] = table3
			[2] = u1
	--]]
	local v1 = table3[p1];
	if v1 then
		local v2 = v1[u1];
		if v2 then
			if p1:IsA("Decal") then
				p1.Texture = v2;
				return;
			end
			if p1:IsA("Texture") then
				p1.Texture = v2;
				return;
			end
			if p1:IsA("ImageButton") then
				p1.Image = v2;
				return;
			end
			if p1:IsA("ImageLabel") then
				p1.Image = v2;
				return;
			end
			if p1:IsA("ImageHandleAdornment") then
				p1.Image = v2;
				return;
			end
			warn("Unknown instance type: ", p1.ClassName);
			return;
		end
		warn("Failed to translate image [bold]" .. p1.Name .. "[/bold] to [bold]" .. u1 .. "[/bold]");
		return;
	end
	warn("Failed to index translations for image [bold]" .. p1.Name .. "[/bold]");
end
function table1.Change(p2) -- Line: 213
	--[[
		Upvalues:
			[1] = table2
			[2] = u1
			[3] = LocalizationService
			[4] = u2
			[5] = table3
			[6] = table1
			[7] = m_Signal
	--]]
	p2 = table2[string.lower(p2):gsub("%s+", "")] or p2;
	u1 = p2 or u1;
	local success, pcall_ret2 = pcall(function() -- Line: 219
		--[[
			Upvalues:
				[1] = LocalizationService
				[2] = u1
		--]]
		return LocalizationService:GetTranslatorForLocaleAsync(u1);
	end);
	if success and pcall_ret2 then
		u2 = pcall_ret2;
	else
		warn("Failed to grab translator (" .. u1 .. ")");
	end
	for key2, _ in pairs(table3) do
		table1.TranslateImage(key2);
	end
	m_Signal.Fire("Language Changed", p2);
end
function table1.Get() -- Line: 234
	--[[
		Upvalues:
			[1] = u1
			[2] = u2
	--]]
	return u1, u2;
end
function table1.Translate(p3, p4) -- Line: 240
	--[[
		Upvalues:
			[1] = u2
	--]]
	if u2 then
		return u2:Translate(p4 or game, p3);
	end
end
function table1.AddImage(p5, p6) -- Line: 247
	--[[
		Upvalues:
			[1] = table3
			[2] = table2
			[3] = table1
	--]]
	if not table3[p5] then
		local table4 = {};
		for key3, val3 in pairs(p6) do
			table4[table2[string.lower(key3):gsub("%s+", "")] or key3] = val3;
		end
		p6 = table4;
		table3[p5] = p6;
		table1.TranslateImage(p5);
	end
end
function table1.RemoveImage(p7) -- Line: 267
	--[[
		Upvalues:
			[1] = table3
	--]]
	if table3[p7] then
		table3[p7] = nil;
	end
end
task.spawn(function() -- Line: 281
	--[[
		Upvalues:
			[1] = table1
			[2] = LocalizationService
	--]]
	table1.Change(LocalizationService.RobloxLocaleId);
end);
return table1;
  -  Editar
  04:54:13.745    -  Editar
  04:54:13.745  ----- [2273] ReplicatedStorage.Library.Client.ChatMsg -----  -  Editar
  04:54:13.746  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.ChatMsg
	===========
	Creates a custom chat message with custom color, font, and fontSize. Very useful for server messages. This also is accessible from a server remote.
	===========
		\\\ Creates a custom chat message
		ChatMsg.New(
			text,					<-- |REQ|	Chat message
			color,					<-- |REQ|	Chat color											[defaults to: Color3.new(0.2, 0.2, 0.2)]
			font,					<--			Chat font 											[defaults to: Enum.Font.SourceSans]
			fontSize,				<-- 		Chat font size										[defaults to: Enum.FontSize.Size18]			
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Network = require(ClientLibrary.Network)

--------|       Top       |--------
local ChatMsg = {}

--------|     Setting     |--------

--------|    Reference    |--------
local TextChatService = game:GetService("TextChatService")

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function ChatMsg.New(text, color, font, fontSize) 
	--- Variables
	color = color or Color3.new(0.2, 0.2, 0.2)
	font = font or Enum.Font.GothamSemibold
	fontSize = fontSize or Enum.FontSize.Size18
	
	--- Post message in chat
	if TextChatService.ChatVersion ~= Enum.ChatVersion.TextChatService then
		game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
			Text = text,
			Color = color,
			Font = font,
			FontSize = fontSize
		})
		return
	end
	
	--------------------------------------------------------------------------------------------

	if color then
		text = string.format("<font color='#%s'>%s</font>", color:ToHex(), text)
	end
	
	if font then
		text = string.format("<font face='%s'>%s</font>", font.Name, text)
	end
	
	if fontSize then
		local tonumber_ret = tonumber(fontSize.Name:sub(5))
		if tonumber_ret then
			text = string.format("<font size='%s'>%s</font>", tostring(tonumber_ret), text)
		end
	end
	--
	local RBXSystem = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXSystem")
	RBXSystem:DisplaySystemMessage(text)
end

--------------------------------------------------------------------------------------------


Network.Fired("Chat Msg"):Connect(function(...)
	ChatMsg.New(...)
end)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return ChatMsg
  -  Editar
  04:54:13.746    -  Editar
  04:54:13.746  ----- [2274] ReplicatedStorage.Library.Client.Controller -----  -  Editar
  04:54:13.746  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Controller
	===========
	Optimizes the indexing of controller selection by ridding of invisible GUI elements, untouchable buttons, among many things.
	Makes using selection on a gamepad actually accessible. Very, very useful if you don't want to add custom support for Xbox.
	
	--> VERY UNOPTIMIZED, NEEDS A REWRITE IN FUTURE. <--
	===========
		\\\ Updates the selections
		Controller.UpdateSelections()
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --

--------|       Top       |--------
local Controller = {}

--------|     Setting     |--------

--------|    Reference    |--------
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local RunService = game:GetService("RunService")

--------|    Variables    |--------
local selectionBlacklist = {}
local blacklistSet = false

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


function Controller.UpdateSelections()
	local iteration = 0
	---
	local highestZ = 0
	for _, screenGui in ipairs(playerGui:GetChildren()) do
		if screenGui.ClassName == "ScreenGui" then
			if screenGui.Enabled == true and screenGui.DisplayOrder > highestZ and screenGui.Name ~= "Chat" and screenGui.Name ~= "Info Overlay" then
				local buttonVisible = false
				local function scanElement (p)
					if buttonVisible == false then
						for _, v in ipairs(p:GetChildren()) do
							iteration = iteration + 1
							if iteration%300 == 0 then
								RunService.Stepped:wait()
							end
							if v:IsA("GuiObject") then
								if v.Visible == true then
									if v.ClassName == "ImageButton" or v.ClassName == "TextButton" or v.ClassName == "TextBox" then
										buttonVisible = true
										return
									end
									scanElement(v)
								end
							end
						end
					end
				end
				scanElement(screenGui)
				if buttonVisible then
					highestZ = screenGui.DisplayOrder
				end
			end
		end
	end
	---
	local function scan(parent)
		for _, child in ipairs(parent:GetChildren()) do
			if child then
				if child.ClassName == "ImageButton" or child.ClassName == "TextButton" or child.ClassName == "TextBox" then
					if not blacklistSet then
						if child.Selectable == false then
							selectionBlacklist[child] = true
						end
					end

					if selectionBlacklist[child] == nil then
						local selectable = true
						if (child.ClassName == "ImageButton" and child.ImageTransparency == 1) or child.Visible == false then
							--- Blunt test
							selectable = false
						else
							--- Parent test
							local function scanParent(p1)
								iteration = iteration + 1
								if iteration%300 == 0 then
									RunService.Stepped:wait()
								end
								local p2 = p1.Parent
								pcall(function()  if p2.Visible == false then  selectable = false  end  end)
								pcall(function()  if p2.ClassName == "ScreenGui" and (p2.Enabled == false or p2.DisplayOrder < highestZ) then  selectable = false  end  end)
								pcall(function()  if p2.ClassName == "SurfaceGui" or p2.ClassName == "BillboardGui" then  selectable = false  end  end)
								if selectable == true then
									if p2 ~= nil and p2 ~= playerGui then
										scanParent(p2)
									end
								end
							end
							scanParent(child)
						end
						child.Selectable = child:FindFirstAncestor("Tutorial") ~= nil and true or selectable
					end
				else
					pcall(function()  child.Selectable = false  end)
				end
				scan(child)
			end
		end
	end
	---
	scan(playerGui)
	blacklistSet = true
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Controller  -  Editar
  04:54:13.746    -  Editar
  04:54:13.746  ----- [2275] ReplicatedStorage.Library.Client.GIF -----  -  Editar
  04:54:13.746  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.GIF
	===========
	Runs a GIF on an ImageLabel given the image size, GIF rows + columns, and if it's looped or not. 
	===========
		\\\ Runs a GIF on an imageLabel (until image changes), or returned function is run
		GIF.Create(
			imageLabel,						<-- |REQ|	ImageLabel instance
			size,							<-- |REQ|	{image size X,   image size Y}
			rowsAndColumns,					<-- |REQ|	{# of rows,   # of columns}
			frames,							<-- 		# of total frames (provide if it is uneven)			[defaults to: calculated]
			speed,							<-- 		GIF speed multiplier								[defaults to: 1]
			looped,							<-- 		GIF is infinitely looped							[defaults to: true]
		)
			EX: _L.GIF.Create(imageLabel, {140, 400}, {2, 5})
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --

--------|       Top       |--------
local GIF = {}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GIF.Create = function(image, size, rowsAndColumns, frames, speed, looped)
	--- Variables
	local sizeX, sizeY = unpack(size)
	local rows, columns = unpack(rowsAndColumns)
	local cachedImage = image.Image
	local abort = false

	--- Args
	frames = frames or (rows * columns)
	speed =  (1 / 60) / (speed or 1)
	looped = (looped or true)

	--- Main
	coroutine.wrap(function()
		while true do
			--- Main loop
			local t = 0
			for y = 0, (columns - 1) do
				for x = 0, (rows - 1) do
					if abort or image == nil or image.Parent == nil or image.Image ~= cachedImage then  return  end
					if t >= frames then  break  else  t = t + 1  end
					--
					image.ImageRectOffset = Vector2.new(x * sizeX, y * sizeY)
					--
					local _tick = tick()
					while ((tick() - _tick) <= speed) do
						game:GetService("RunService").RenderStepped:wait()
					end
				end
			end

			--- Cancel if not looped
			if not looped then
				return
			end
		end
	end)()

	--- Return function to cancel behavior
	return (function()  abort = true  end)
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return GIF

































  -  Editar
  04:54:13.746    -  Editar
  04:54:13.746  ----- [2276] ReplicatedStorage.Library.Client.QuestCmds -----  -  Editar
  04:54:13.746  -- Decompiled with the Synapse X Luau decompiler.

local l__Library__1 = game:GetService("ReplicatedStorage"):WaitForChild("Library");
local l__Client__2 = l__Library__1:WaitForChild("Client");
local v3 = require(l__Library__1.Directory);
local v4 = {
	Directory = v3.Quests
};
local u1 = require(l__Client__2.Save);
local u2 = require(l__Library__1:WaitForChild("Types").Quests);
local u3 = require(l__Library__1.Shared);
function v4.Get(p1, p2)
	assert(v3.Areas[p1]);
	assert(v3.Quests[p1][p2]);
	local v5 = u1.Get();
	if not v5 then
		return u2.DefaultData;
	end;
	local v6 = v5.Quests;
	if u3.IsHardcore then
		v6 = v5.HardcoreQuests;
	end;
	local v7 = v6[p1];
	if not v7 then
		return u2.DefaultData;
	end;
	local v8 = v7[p2];
	if v8 then
		return v8;
	end;
	return u2.DefaultData;
end;
function v4.GetPoints()
	local v9 = u1.Get();
	if not v9 then
		return 0;
	end;
	return v9["Quest Points"] or 0;
end;
function v4.GetStock(p3)
	local v10 = v3.QuestRewards[p3];
	assert(v10);
	local v11 = v10.Stock;
	if not v11 then
		return nil;
	end;
	local v12 = u1.Get();
	if not v12 then
		return nil;
	end;
	local v13 = v12.QuestRewards[p3];
	if v13 then
		v11 = v11 - v13.Purchased;
	end;
	return v11;
end;
local u4 = require(l__Library__1.Functions);
local u5 = require(l__Client__2.Network);
function v4.RedeemReward(p4)
	local v14 = v3.QuestRewards[p4];
	assert(v14);
	local v15 = v4.GetStock(p4);
	if v15 and v15 <= 0 then
		return false, "This item is out of stock!";
	end;
	local v16 = v4.GetPoints();
	local l__Cost__17 = v14.Cost;
	if not (v16 < l__Cost__17) then
		return u5.Invoke("Quests: Redeem Reward", p4);
	end;
	return false, string.format("You need %s more %s!", u4.Commas(l__Cost__17 - v16), "Quest Points");
end;
local l__Players__6 = game:GetService("Players");
u5.Fired("Quests: Update"):Connect(function(p5, p6, p7)
	local v18 = u1.Get();
	if not v18 then
		return;
	end;
	local v19 = v18.Quests;
	if u3.IsHardcore then
		v19 = v18.HardcoreQuests;
	end;
	local v20 = v19[p5];
	if not v20 then
		v20 = {};
		v19[p5] = v20;
	end;
	assert(v20);
	v20[p6] = p7;
	u3.SignalStatUpdated(l__Players__6.LocalPlayer, "Quests");
end);
u5.Fired("Quests: Complete"):Connect(function(p8, p9, p10)
	assert(v3.Quests[p9][p10]);
end);
return v4;
  -  Editar
  04:54:13.746    -  Editar
  04:54:13.746  ----- [2277] ReplicatedStorage.Library.Client.ServerBoosts -----  -  Editar
  04:54:13.746  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.ServerBoosts
	===========
	All client data for Server Boosts!
	===========
		\\\ Checks if a server boost is activated
		ServerBoosts.IsActive(
			Boost <-- |REQ|	This is needed to check the boost!
		)
		
		\\\ Gets boost data
		ServerBoosts.GetActiveBoost(
			Boost <-- |REQ|	This is needed to check the boost!
		)
		
		\\\ Adds data to global boosts
		ServerBoosts.SetActiveBoosts(
			Boost <-- |REQ|
		)
		
		\\\ Sets boost data
		ServerBoosts.SetActiveBoosts(
			Boost <-- |REQ| This is needed to check the boost!
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --

--------|       Top       |--------
local ServerBoosts = {}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------
local serverBoostLog = {}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function ServerBoosts.IsActive(boost)  
	return serverBoostLog[boost] ~= nil
end

function ServerBoosts.GetActiveBoost(boost)  
	return serverBoostLog[boost]
end

function ServerBoosts.SetActiveBoosts(boost)  
	serverBoostLog = boost
end

function ServerBoosts.GetActiveBoosts()  
	return serverBoostLog
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return ServerBoosts
  -  Editar
  04:54:13.747    -  Editar
  04:54:13.747  ----- [2278] ReplicatedStorage.Library.Client.Shake -----  -  Editar
  04:54:13.747  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Shake
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local table1 = {};
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local Players = game:GetService("Players");
local HapticService = game:GetService("HapticService");
local m_Variables = require(ReplicatedStorage:WaitForChild("Library").Variables);
local Random_new_ret = Random.new();
local u1 = 0;
function table1.Create(p1, p2, p3, p4) -- Anonymous function at line 88
	--[[
		Upvalues:
			[1] = u1
			[2] = Players
			[3] = Random_new_ret
			[4] = m_Variables
			[5] = HapticService
			[6] = RunService
	--]]
	if workspace.CurrentCamera.CameraType == Enum.CameraType.Scriptable then return end
	local u2 = u1 + 1;
	u1 = u2;
	local u3 = p1 or 1;
	local u4 = p2 or 1;
	local u5 = p3 or 0;
	local u6 = p4 == true;
	task.spawn(function() -- Line: 101
		--[[
			Upvalues:
				[1] = Players
				[2] = u1
				[3] = u2
				[4] = u3
				[5] = u5
				[6] = u6
				[7] = Random_new_ret
				[8] = u4
				[9] = m_Variables
				[10] = HapticService
				[11] = RunService
		--]]
		local os_clock_ret = os.clock();
		local vec3 = nil;
		local os_clock_ret2 = os.clock();
		local Humanoid = nil;
		local t_Character = Players.LocalPlayer.Character;
		if t_Character then
			Humanoid = t_Character:FindFirstChildOfClass("Humanoid");
		end
		while u1 == u2 and os.clock() - os_clock_ret <= u3 do
			local v1 = (os.clock() - os_clock_ret) / u3;
			if not vec3 or os.clock() - os_clock_ret2 >= u5 / 10 then
				os_clock_ret2 = os.clock();
				local v2 = u6 and math.sin(v1 * math.pi) or math.sin((v1 / 2 + 0.5) * math.pi);
				local v3 = Random_new_ret:NextNumber(-v2, v2) * v2 * u4;
				local v4 = Random_new_ret:NextNumber(-v2, v2) * v2 * u4;
				vec3 = Vector3.new(v3, v4, Random_new_ret:NextNumber(-v2, v2) * v2 * u4);
				if m_Variables.Console and HapticService:IsVibrationSupported(Enum.UserInputType.Gamepad1) then
					local v5 = math.min(u4, 1) * v2;
					HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, v5);
				end
			end
			if Humanoid then
				Humanoid.CameraOffset = Humanoid.CameraOffset:Lerp(vec3, 1 - u5);
			end
			RunService.RenderStepped:Wait();
		end
		if Humanoid then
			Humanoid.CameraOffset = Vector3.new(0, 0, 0);
		end
		if m_Variables.Console and HapticService:IsVibrationSupported(Enum.UserInputType.Gamepad1) then
			HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, 0);
		end
	end);
end
return table1;
  -  Editar
  04:54:13.747    -  Editar
  04:54:13.747  ----- [2279] ReplicatedStorage.Library.Client.Interact -----  -  Editar
  04:54:13.747  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Interact
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local UserInputService = game:GetService("UserInputService");
local Players = game:GetService("Players");
local Library = ReplicatedStorage:WaitForChild("Library");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local m_Audio = require(Library.Audio);
local m_Variables = require(Library.Variables);
local m_Functions = require(Library.Functions);
local table1 = {};
local table2 = {};
local u1 = nil;
local u2 = nil;
local bool1 = false;
function table1.Add(p1, p2) -- Line: 90
	--[[
		Upvalues:
			[1] = m_Functions
			[2] = table2
			[3] = bool1
			[4] = m_Audio
			[5] = u1
			[6] = RunService
			[7] = m_Variables
			[8] = UserInputService
			[9] = Assets
			[10] = Players
			[11] = u2
	--]]
	assert(p1);
	local v1 = p2 or {};
	local v2 = v1.dist or 10;
	local u3 = v1.label or "";
	local u4 = v1.timer or 0;
	local table3 = {};
	local bool2 = false;
	local u5 = nil;
	local u6 = m_Functions.GenerateUID();
	local bool3 = false;
	local bool4 = false;
	local bool5 = false;
	local u7 = nil;
	if typeof(p1) ~= "Instance" then
		u7 = m_Functions.CreateParticleHost(p1);
		bool5 = true;
	elseif p1:IsA("Model") then
		local t_PrimaryPart = p1.PrimaryPart;
		assert(t_PrimaryPart);
		u7 = t_PrimaryPart;
	elseif p1:IsA("BasePart") then
		u7 = p1;
	else
		error("Unknown host type: " .. p1.ClassName);
	end
	local Activated = Instance.new("BindableEvent");
	Activated.Name = "Activated";
	Activated.Parent = u7;
	table2[u6] = {
		id = u6,
		host = u7,
		lastDist = 0,
		lastCheck = 0,
		maxDist = v2
	};
	local function ButtonActivate() -- Line: 139
		--[[
			Upvalues:
				[1] = Activated
		--]]
		Activated:Fire();
	end
	local function ButtonUpFX() -- Line: 144
		--[[
			Upvalues:
				[1] = bool4
				[2] = bool1
				[3] = m_Audio
				[4] = u5
				[5] = m_Functions
				[6] = u4
				[7] = Activated
		--]]
		if not bool4 and bool1 then
			bool4 = true;
			bool1 = false;
			m_Audio.Play("rbxassetid://7000715003", script, 1.75, 0.1);
			if u5:FindFirstChild("Button") then
				u5.Button.Back.BackgroundColor3 = Color3.new(1, 1, 1);
				m_Functions.Tween(u5.Button.Back, {Size = UDim2.new(1, 0, 1, 0)}, {
					0.3,
					Enum.EasingStyle.Elastic,
					Enum.EasingDirection.Out
				});
			end
			u5.Button.Back.Fill.Visible = false;
			if u4 <= 0 then
				Activated:Fire();
			end
			bool4 = false;
		end
	end
	local function ButtonDownFX() -- Line: 165
		--[[
			Upvalues:
				[1] = bool4
				[2] = bool1
				[3] = m_Audio
				[4] = m_Functions
				[5] = u5
				[6] = u4
				[7] = u1
				[8] = u6
				[9] = RunService
				[10] = ButtonUpFX
				[11] = Activated
		--]]
		if not bool4 and not bool1 then
			bool4 = true;
			bool1 = true;
			m_Audio.Play("rbxassetid://7000714975", script, 1.75, 0.1);
			m_Functions.Tween(u5.Button.Back, {Size = UDim2.new(0.85, 0, 0.85, 0)}, {
				0.3,
				Enum.EasingStyle.Elastic,
				Enum.EasingDirection.Out
			});
			if u4 > 0 then
				u5.Button.Back.Fill.Visible = true;
				task.spawn(function() -- Line: 175
					--[[
						Upvalues:
							[1] = u4
							[2] = bool1
							[3] = u5
							[4] = u1
							[5] = u6
							[6] = RunService
							[7] = ButtonUpFX
							[8] = Activated
					--]]
					local os_clock_ret = os.clock();
					while os.clock() - os_clock_ret < u4 and bool1 and u5 and u1 == u6 do
						local v4 = (os.clock() - os_clock_ret) / u4;
						u5.Button.Back.Fill.Size = UDim2.new(v4, 0, v4, 0);
						RunService.RenderStepped:Wait();
					end
					if os.clock() - os_clock_ret >= u4 and u1 == u6 then
						ButtonUpFX();
						Activated:Fire();
					end
				end);
			else
				u5.Button.Back.Fill.Visible = false;
				u5.Button.Back.BackgroundColor3 = Color3.new(0.75, 0.75, 0.75);
			end
			bool4 = false;
		end
	end
	local function Events() -- Line: 199
		--[[
			Upvalues:
				[1] = u5
				[2] = m_Variables
				[3] = table2
				[4] = u6
				[5] = table3
				[6] = UserInputService
				[7] = ButtonDownFX
				[8] = ButtonUpFX
		--]]
		if u5 then
			local function EnabledCheck() -- Line: 201
				--[[
					Upvalues:
						[1] = m_Variables
						[2] = table2
						[3] = u6
				--]]
				if not m_Variables.Typing and not m_Variables.MessageOpen and table2[u6] then
					return true;
				end
				return false;
			end
			table3[#table3 + 1] = UserInputService.InputBegan:Connect(function(input) -- Line: 209
				--[[
					Upvalues:
						[1] = m_Variables
						[2] = table2
						[3] = u6
						[4] = ButtonDownFX
				--]]
				if (not m_Variables.Typing and not m_Variables.MessageOpen and table2[u6] and true or false) and (input.KeyCode == Enum.KeyCode.ButtonX or input.KeyCode == Enum.KeyCode.E) then
					ButtonDownFX();
				end
			end);
			table3[#table3 + 1] = UserInputService.InputEnded:Connect(function(input2) -- Line: 217
				--[[
					Upvalues:
						[1] = m_Variables
						[2] = table2
						[3] = u6
						[4] = ButtonUpFX
				--]]
				if (not m_Variables.Typing and not m_Variables.MessageOpen and table2[u6] and true or false) and (input2.KeyCode == Enum.KeyCode.ButtonX or input2.KeyCode == Enum.KeyCode.E) then
					ButtonUpFX();
				end
			end);
			table3[#table3 + 1] = u5.Button.InputBegan:Connect(function(input3) -- Line: 226
				--[[
					Upvalues:
						[1] = m_Variables
						[2] = table2
						[3] = u6
						[4] = ButtonDownFX
				--]]
				local t_UserInputType = input3.UserInputType;
				local t_UserInputState = input3.UserInputState;
				local t_KeyCode = input3.KeyCode;
				if (t_UserInputType == Enum.UserInputType.MouseButton1 or t_UserInputType == Enum.UserInputType.Touch and t_UserInputState == Enum.UserInputState.Begin or t_KeyCode == Enum.KeyCode.ButtonX) and (not m_Variables.Typing and not m_Variables.MessageOpen and table2[u6] and true or false) then
					ButtonDownFX();
				end
			end);
			table3[#table3 + 1] = u5.Button.InputEnded:Connect(function(input4) -- Line: 235
				--[[
					Upvalues:
						[1] = m_Variables
						[2] = table2
						[3] = u6
						[4] = ButtonUpFX
				--]]
				local t_UserInputType2 = input4.UserInputType;
				local _ = input4.UserInputState;
				local t_KeyCode2 = input4.KeyCode;
				if (t_UserInputType2 == Enum.UserInputType.MouseButton1 or t_UserInputType2 == Enum.UserInputType.Touch or t_KeyCode2 == Enum.KeyCode.ButtonX) and (not m_Variables.Typing and not m_Variables.MessageOpen and table2[u6] and true or false) then
					ButtonUpFX();
				end
			end);
		end
	end
	local function Show() -- Line: 247
		--[[
			Upvalues:
				[1] = u5
				[2] = bool2
				[3] = bool3
				[4] = Assets
				[5] = m_Variables
				[6] = u3
				[7] = m_Functions
				[8] = u7
				[9] = Players
				[10] = Events
		--]]
		if not u5 and not bool2 and not bool3 then
			bool2 = true;
			bool3 = false;
			u5 = Assets.Billboards:FindFirstChild("Interact"):Clone();
			if m_Variables.Console then
				u5.Button.Back.Icon.Image = "rbxassetid://5083555478";
			elseif m_Variables.Mobile then
				u5.Button.Back.Icon.Image = "rbxassetid://5083554875";
			else
				u5.Button.Back.Icon.Image = "rbxassetid://5083555193";
			end
			if u3 ~= "" then
				u5.Label.Visible = true;
				u5.Label.Text = u3;
			else
				u5.Label.Visible = false;
			end
			local t_Size = u5.Size;
			u5.Size = UDim2.new();
			m_Functions.Tween(u5, {Size = t_Size}, {
				0.2,
				Enum.EasingStyle.Back,
				Enum.EasingDirection.Out
			});
			u5.Adornee = u7;
			u5.Parent = Players.LocalPlayer.PlayerGui;
			Events();
		end
	end
	local function Hide() -- Line: 285
		--[[
			Upvalues:
				[1] = u5
				[2] = bool2
				[3] = bool3
				[4] = m_Functions
				[5] = bool1
				[6] = table3
		--]]
		if u5 and bool2 and not bool3 then
			bool3 = true;
			m_Functions.Tween(u5, {Size = UDim2.new()}, {
				0.15,
				Enum.EasingStyle.Back,
				Enum.EasingDirection.In
			}).Completed:Wait();
			bool2 = false;
			u5:Destroy();
			u5 = nil;
			bool1 = false;
			for index1 = 1, #table3 do
				table3[index1]:Disconnect();
			end
			table3 = {};
			bool3 = false;
		end
	end
	local function Remove() -- Line: 311
		--[[
			Upvalues:
				[1] = table2
				[2] = u6
				[3] = u5
				[4] = bool5
				[5] = u7
				[6] = u1
				[7] = u2
				[8] = bool1
		--]]
		table2[u6] = nil;
		if u5 then
			u5:Destroy();
		end
		if bool5 and u7 then
			u7:Destroy();
			u7 = nil;
		end
		if u1 == u6 then
			u1 = nil;
			u2 = nil;
			bool1 = false;
		end
	end
	task.spawn(function() -- Line: 337
		--[[
			Upvalues:
				[1] = table2
				[2] = u6
				[3] = u7
				[4] = u1
				[5] = u5
				[6] = Show
				[7] = Hide
				[8] = RunService
				[9] = bool5
				[10] = u2
				[11] = bool1
		--]]
		while table2[u6] and u7 and u7.Parent do
			if u1 == u6 then
				if not u5 then
					Show();
				end
			elseif u5 then
				Hide();
			end
			RunService.RenderStepped:Wait();
		end
		table2[u6] = nil;
		if u5 then
			u5:Destroy();
		end
		if bool5 and u7 then
			u7:Destroy();
			u7 = nil;
		end
		if u1 == u6 then
			u1 = nil;
			u2 = nil;
			bool1 = false;
		end
	end);
	return Activated.Event, Remove;
end
task.spawn(function() -- Line: 364
	--[[
		Upvalues:
			[1] = Players
			[2] = table2
			[3] = bool1
			[4] = u1
			[5] = u2
			[6] = RunService
	--]]
	local t_LocalPlayer = Players.LocalPlayer;
	while true do
		for key1, val1 in pairs(table2) do
			local t_host = val1.host;
			if not t_host or not t_host.Parent then
				table2[key1] = nil;
				continue;
			end
			if os.clock() - val1.lastCheck < math.min(val1.lastDist / 150, 0.5) then continue end
			local DistanceFromCharacter_ret = t_LocalPlayer:DistanceFromCharacter(t_host.CFrame.Position);
			val1.lastDist = DistanceFromCharacter_ret;
			val1.lastCheck = os.clock();
			if DistanceFromCharacter_ret <= val1.maxDist then
				if bool1 or u1 and u2 and DistanceFromCharacter_ret >= u2 - 1 and u1 ~= key1 then continue end
				u2 = DistanceFromCharacter_ret;
				u1 = key1;
				continue;
			end
			if u1 ~= key1 then continue end
			u2 = nil;
			u1 = nil;
			bool1 = false;
		end
		RunService.Heartbeat:Wait();
	end
end);
return table1;
  -  Editar
  04:54:13.748    -  Editar
  04:54:13.748  ----- [2280] ReplicatedStorage.Library.Client.InfoOverlay -----  -  Editar
  04:54:13.748  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.InfoOverlay
	===========
		
	===========
	
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

local table1 = {};
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local TextService = game:GetService("TextService");
local Players = game:GetService("Players");
local RunService = game:GetService("RunService");
local GuiService = game:GetService("GuiService");
local Library = ReplicatedStorage:WaitForChild("Library");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local m_Functions = require(Library.Functions);
local m_Variables = require(Library.Variables);
local t_InfoOverlay = Assets.UI.FRAMEWORK.InfoOverlay;
local Blocks = t_InfoOverlay:WaitForChild("Blocks");
local GuiInset = game:GetService("GuiService"):GetGuiInset();
local u1 = nil;
local table2 = {};
local table3 = {};
local InfoOverlay = nil;
function table1.Add(p1, ...) -- Anonymous function at line 110
	--[[
		Upvalues:
			[1] = u1
			[2] = table1
			[3] = t_InfoOverlay
			[4] = Blocks
			[5] = table2
			[6] = TextService
			[7] = m_Functions
			[8] = InfoOverlay
			[9] = Players
			[10] = Assets
			[11] = RunService
			[12] = GuiInset
			[13] = m_Variables
			[14] = GuiService
			[15] = table3
	--]]
	if u1 then
		table1.Remove();
	end
	local Clone_ret = t_InfoOverlay:FindFirstChild("Base"):Clone();
	local v1 = 0;
	local str1 = "Down";
	for key1, val1 in ipairs({...}) do
		local u2 = val1[1];
		local Clone_ret3 = Blocks:FindFirstChild(u2):Clone();
		local settings = Clone_ret3:FindFirstChild("settings");
		if settings and settings:FindFirstChild("code") then
			local coroutine_wrap_ret6 = coroutine.wrap(function() -- Line: 131
				--[[
					Upvalues:
						[1] = table2
						[2] = u2
						[3] = settings
						[4] = Clone_ret3
						[5] = val1
				--]]
				local v15 = table2[u2] or require(settings:FindFirstChild("code"));
				v15(Clone_ret3, unpack(val1));
			end);
			coroutine_wrap_ret6();
		end
		Clone_ret3.LayoutOrder = key1 * 100;
		Clone_ret3.Parent = Clone_ret.Frame.Blocks;
		if not settings then continue end
		local Attribute2 = settings:GetAttribute("boundsX");
		local t_X5 = Attribute2.X;
		local t_Y5 = Attribute2.Y;
		local v3 = 0;
		local v4 = 0;
		local v5 = 0;
		for _, child3 in ipairs(Clone_ret3:GetChildren()) do
			if not child3:IsA("GuiObject") or not child3.Visible then continue end
			if child3.ClassName == "TextLabel" or child3.ClassName == "TextButton" then
				if child3.Size.X.Scale == 0 then continue end
				local vec2 = Vector2.new(t_Y5 * child3.Size.X.Scale, 1000);
				local v6 = TextService:GetTextSize(child3.ContentText, child3.TextSize, child3.Font, vec2) + Vector2.new(4, 1);
				v3 = math.max(v6.X, v3);
				v4 = v4 + math.max(v6.Y, Clone_ret3.AbsoluteSize.Y);
				child3.Size = UDim2.new(0, v6.X, 0, v6.Y);
				continue;
			end
			if child3.Size.X.Scale == 0 then continue end
			v5 = v5 + child3.AbsoluteSize.Y;
		end
		local UIListLayout2 = Clone_ret3:FindFirstChildOfClass("UIListLayout");
		if UIListLayout2 and UIListLayout2.FillDirection == Enum.FillDirection.Horizontal then
			v3 = math.max(UIListLayout2.AbsoluteContentSize.X, v3);
		end
		local UIGridLayout = Clone_ret3:FindFirstChildOfClass("UIGridLayout");
		if UIGridLayout then
			v4 = math.max(UIGridLayout.AbsoluteContentSize.Y, v4);
		end
		Clone_ret3.Size = UDim2.new(1, 0, 0, v4 + v5);
		local math_clamp_ret = math.clamp(v3, t_X5, t_Y5);
		v1 = math.max(math_clamp_ret, v1);
	end
	local UIPadding = Clone_ret.Frame.Blocks:FindFirstChildOfClass("UIPadding");
	local UIListLayout = Clone_ret.Frame.Blocks:FindFirstChildOfClass("UIListLayout");
	UIListLayout:ApplyLayout();
	Clone_ret.Size = UDim2.new(0, v1 + UIPadding.PaddingLeft.Offset + UIPadding.PaddingRight.Offset, 0, UIListLayout.AbsoluteContentSize.Y + UIPadding.PaddingTop.Offset + UIPadding.PaddingBottom.Offset);
	Clone_ret.UIScale.Scale = (1 - (1 - math.min(m_Functions.ResolutionScale(), 1)) / 1.5) * 0.9;
	if not InfoOverlay then
		InfoOverlay = Instance.new("ScreenGui");
		InfoOverlay.DisplayOrder = 100;
		InfoOverlay.ZIndexBehavior = Enum.ZIndexBehavior.Global;
		InfoOverlay.ResetOnSpawn = false;
		InfoOverlay.Name = "InfoOverlay";
		InfoOverlay.Parent = Players.LocalPlayer.PlayerGui;
	end
	Clone_ret.Parent = InfoOverlay;
	u1 = Clone_ret;
	local v2 = nil;
	for _, val2 in ipairs({...}) do
		if val2[1] ~= "Rarity" or not val2[2] then continue end
		v2 = val2[2];
		break;
	end
	if v2 == "Mythical" or v2 == "Secret" or v2 == "Exclusive" then
		local UIStroke = Clone_ret.Frame:FindFirstChildOfClass("UIStroke");
		UIStroke.Color = Color3.new(1, 1, 1);
		local Clone_ret2 = Assets.UI.Raritys:FindFirstChild(v2):Clone();
		Clone_ret2.Parent = UIStroke;
		if v2 == "Mythical" then
			Clone_ret.pointer.pointer.ImageColor3 = Color3.fromRGB(255, 218, 32);
		elseif v2 == "Secret" then
			Clone_ret.pointer.pointer.ImageColor3 = Color3.fromRGB(217, 242, 243);
		elseif v2 == "Exclusive" then
			Clone_ret.pointer.pointer.ImageColor3 = Color3.fromRGB(217, 163, 255);
		end
		if v2 == "Secret" then
			local coroutine_wrap_ret5 = coroutine.wrap(function() -- Line: 273
				--[[
					Upvalues:
						[1] = Clone_ret
						[2] = m_Functions
				--]]
				local v16 = false;
				while Clone_ret and Clone_ret.Parent do
					v16 = not v16;
					m_Functions.Tween(Clone_ret.pointer, {ImageColor3 = v16 and Color3.fromRGB(217, 242, 243) or Color3.fromRGB(255, 255, 255)}, {
						1.25,
						"Sine",
						"InOut"
					});
					m_Functions.Tween(Clone_ret.Frame, {BackgroundColor3 = v16 and Color3.fromRGB(217, 242, 243) or Color3.fromRGB(255, 255, 255)}, {
						1.25,
						"Sine",
						"InOut"
					}).Completed:Wait();
				end
			end);
			coroutine_wrap_ret5();
		elseif v2 == "Mythical" then
			local coroutine_wrap_ret4 = coroutine.wrap(function() -- Line: 284
				--[[
					Upvalues:
						[1] = Clone_ret
						[2] = m_Functions
				--]]
				local v17 = false;
				while Clone_ret and Clone_ret.Parent do
					v17 = not v17;
					m_Functions.Tween(Clone_ret.pointer, {ImageColor3 = v17 and Color3.fromRGB(255, 245, 230) or Color3.new(1, 1, 1)}, {
						1.25,
						"Sine",
						"InOut"
					});
					m_Functions.Tween(Clone_ret.Frame, {BackgroundColor3 = v17 and Color3.fromRGB(255, 245, 230) or Color3.new(1, 1, 1)}, {
						1.25,
						"Sine",
						"InOut"
					}).Completed:Wait();
				end
			end);
			coroutine_wrap_ret4();
		end
		local coroutine_wrap_ret3 = coroutine.wrap(function() -- Line: 295
			--[[
				Upvalues:
					[1] = Clone_ret
					[2] = Clone_ret2
					[3] = RunService
			--]]
			while Clone_ret and Clone_ret.Parent do
				Clone_ret2.Rotation = os.clock() * 250;
				RunService.RenderStepped:Wait();
			end
		end);
		coroutine_wrap_ret3();
	end
	local coroutine_wrap_ret = coroutine.wrap(function() -- Line: 352
		--[[
			Upvalues:
				[1] = Players
				[2] = Clone_ret
				[3] = GuiInset
				[4] = m_Variables
				[5] = p1
				[6] = str1
				[7] = RunService
		--]]
		local Mouse = Players.LocalPlayer:GetMouse();
		local t_CurrentCamera = game.Workspace.CurrentCamera;
		while Clone_ret and Clone_ret.Parent do
			local v7 = Mouse.X;
			local v8 = Mouse.Y;
			local t_X = Clone_ret.AbsoluteSize.X;
			local t_Y = Clone_ret.AbsoluteSize.Y;
			local v9 = t_CurrentCamera.ViewportSize.X - GuiInset.X;
			local v10 = t_CurrentCamera.ViewportSize.Y - GuiInset.Y;
			if m_Variables.Console then
				v7 = p1.AbsolutePosition.X + p1.AbsoluteSize.X * 0.5;
				v8 = p1.AbsolutePosition.Y + p1.AbsoluteSize.Y * 0.5;
			end
			if v8 + t_Y + 10 < v10 then
				str1 = "Down";
			elseif v8 - t_Y - 10 > 0 then
				str1 = "Up";
			end
			local v11 = v9 + (-t_X or t_X);
			local v12 = v10 + (str1 == "Down" and -t_Y or t_Y);
			local v13 = v7 + 10;
			local v14 = v8 + (str1 == "Down" and 10 or -10);
			Clone_ret.AnchorPoint = Vector2.new(0, str1 == "Down" and 0 or 1);
			Clone_ret.Position = UDim2.new(0, math.clamp(v13, 0, v11), 0, (math.clamp(v14, 0, v12)));
			RunService.RenderStepped:Wait();
		end
	end);
	coroutine_wrap_ret();
	local coroutine_wrap_ret2 = coroutine.wrap(function() -- Line: 408
		--[[
			Upvalues:
				[1] = Players
				[2] = p1
				[3] = table1
				[4] = Clone_ret
				[5] = m_Variables
				[6] = GuiService
				[7] = RunService
		--]]
		local Mouse2 = Players.LocalPlayer:GetMouse();
		local Attribute = p1:GetAttribute("SurfaceElement");
		if Attribute then
			local Connect_ret = nil;
			Connect_ret = p1.MouseLeave:Connect(function() -- Line: 414
				--[[
					Upvalues:
						[1] = table1
						[2] = Connect_ret
				--]]
				table1.Remove();
				Connect_ret:Disconnect();
			end);
			return;
		end
		while Clone_ret and Clone_ret.Parent do
			local t_X2 = Mouse2.X;
			local t_Y2 = Mouse2.Y;
			local t_X3 = p1.AbsolutePosition.X;
			local t_Y3 = p1.AbsolutePosition.Y;
			local t_X4 = p1.AbsoluteSize.X;
			local t_Y4 = p1.AbsoluteSize.Y;
			if not m_Variables.Console then
				if t_X3 + t_X4 < t_X2 or t_X2 < t_X3 or t_Y3 + t_Y4 < t_Y2 or t_Y2 < t_Y3 then
					table1.Remove();
				end
			elseif GuiService.SelectedObject ~= p1 then
				table1.Remove();
			end
			RunService.RenderStepped:Wait();
		end
	end);
	coroutine_wrap_ret2();
	if m_Variables.Mobile then
		local tick_ret = tick();
		local Connect_ret2 = nil;
		Connect_ret2 = p1.MouseButton1Up:Connect(function() -- Line: 444
			--[[
				Upvalues:
					[1] = Connect_ret2
					[2] = tick_ret
					[3] = table1
			--]]
			Connect_ret2:Disconnect();
			if tick() - tick_ret < 0.5 then
				table1.Remove();
			end
		end);
		table3[#table3 + 1] = Connect_ret2;
	end
end
function table1.Remove() -- Anonymous function at line 455
	--[[
		Upvalues:
			[1] = u1
			[2] = table3
	--]]
	if u1 then
		for _, val4 in ipairs(table3) do
			val4:Disconnect();
		end
		table3 = {};
		u1:Destroy();
		u1 = nil;
	end
end
return table1;
  -  Editar
  04:54:13.749    -  Editar
  04:54:13.749  ----- [2281] ReplicatedStorage.Library.Client.Gamepasses -----  -  Editar
  04:54:13.749  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
	_L.Gamepasses
	===========
	Client central hub for my gamepass ownership solution. Very efficient on network calls, most work is done on the server -
	this is just a way to index that info. To add gamepasses, check Directory.
	===========
		\\\ Returns true if player owns gamepass
		Gamepasses.Owns(
			gamepassId,						<-- |REQ|	Gamepass ID (w/o link)
		)
		
		\\\ Returns array of gamepassIds player owns
		Gamepasses.GetOwned()
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Save = require(ClientLibrary.Save)

--------|       Top       |--------
local Gamepasses = {}

--------|     Setting     |--------

--------|    Reference    |--------
local Players = game:GetService("Players")

--------|    Variables    |--------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function Gamepasses.Owns(gamepassId, player) 
	--- Get gamepasses owned by player
	local playerStats = Save.Get(player or Players.LocalPlayer) --- cached results
	local gamepassesOwned = playerStats.Gamepasses
	
	--- Search for gamepass
	if playerStats then
		for _, ownedGamepassId in pairs(playerStats.Gamepasses) do
			if tostring(ownedGamepassId) == tostring(gamepassId) then
				return true
			end
		end
	end
	
	--
	return false
end


function Gamepasses.GetAll(player) 
	--- Get gamepasses owned by player
	local playerStats = Save.Get(player or Players.LocalPlayer) --- cached results

	if playerStats then
		return playerStats.Gamepasses
	end
	
	--
	return {}
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return Gamepasses
  -  Editar
  04:54:13.749    -  Editar
  04:54:13.749  ----- [2282] ReplicatedStorage.Library.Client.GUIFX -----  -  Editar
  04:54:13.750  --[[    
                                                                   ,,╓╓╖╖╥╥@@@,,,╓╖╖╖
                                                            ,,╓╓╖╖╖@@@╢╢║╢╢╣▒▒▒▒▒▒▒▒▒
                                          ,,,╓╖╖╖╥@@@╢╢╢╢╢▒▒▒╢╢╜╜╙````"╙╜╢╣▒▒▒▒▒▒▒▒▒▒
                         ,,,╓╖╖╥@@@@╢║╢╢▒▒╢╢╢Ñ╨╨╨▒▒▒▒▒▒▒▒▒╢╜`              ╙╢▒▒▒▒▒▒▒▒
        ,,╓╖╖╖╥@@@╢╢╢╢╢▒▒╢╢╢╢╢╢╢▒▒▒▒▒▒▒▒▒▒       ╢▒▒▒▒▒▒▒╜                   ╙╢▒▒▒▒▒▒
        ]▒▒▒▒▒╜╜╙"``              ╙╢▒▒▒▒▒▒░      ║▒▒▒▒▒▒╜       ╥@╣╢╢@╖       ,╢▒▒▒▒▒▒
         ▒▒▒▒▒L                     ╙╢▒▒▒▒▒      ]▒▒▒▒▒▒      ,╣▒▒▒▒▒▒▒╢╖,╓@╣╢▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒        ,,,╓╓╓,       ]▒▒▒▒╣       ╢▒▒▒▒       ║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ║▒▒▒▒▒       ╢▒▒▒▒▒▒▒@       ▒▒▒▒▒       ║▒▒▒▒       ╢▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
         ]▒▒▒▒▒       ║▒▒▒▒▒▒▒Ñ      ,▒▒▒▒▒▒      ]▒▒▒▒       ╢▒▒▒▒▒╜╜╜╙"``     └▒▒▒▒▒▒s
          ▒▒▒▒▒▒      ╙╝╨╜╜╜╙       ╓╢▒▒▒▒▒▒      └▒▒▒▒       ║▒▒▒▒▒             ╢▒▒▒▒▒
          ║▒▒▒▒▒                   ╙╨╢▒▒▒▒▒╢       ║▒▒▒H      ╙▒▒▒▒▒▒            ║▒▒▒▒▒░
          ]▒▒▒▒▒                      ╙╢▒▒▒▒       ║▒▒▒╢       ║▒▒▒▒╢@@@╣╢C      ]▒▒▒▒▒▒
           ▒▒▒▒▒~      ╓╖╥@@@@@@,      `╢▒▒▒▒      ]▒▒▒▒H       ╙╣▒▒▒▒▒▒▒╜        ▒▒▒▒▒▒
           ║▒▒▒▒▒      ]▒▒▒▒▒▒▒▒▒∩      ║▒▒▒╣       ▒▒▒▒▒╖        ╙╨╝╝╜╜          ║▒▒▒▒▒
           ║▒▒▒▒╣       ╢▒▒▒▒▒▒▒▒░      ]▒▒▒▒       ║▒▒▒▒▒Ñ                       ╠▒▒▒▒▒∩
           └▒▒▒▒▒       ║▒▒╢╢╢╝╜`       ║▒▒▒▒▒      ]▒▒▒▒▒▒▒@╖             ╓╣.,,,╓║▒▒▒▒▒▒
            ╢▒▒▒▒▒                     ║▒▒▒▒▒▒      └▒▒▒▒▒▒▒▒▒╣╢@╥╖╖╖╖╖@@╢▒▒▒▒▒╢╢╢╝╨╜╜╜╙"
            ║▒▒▒▒▒                  ╓@╢▒▒▒▒▒▒▒╖╓╖╖╥@@▒▒▒▒▒▒▒▒▒╢╢╢╨╜╜╜╜╙╙``
            ]▒▒▒▒▒        ,,,╓╓╖@@╣╢▒▒▒▒▒▒▒▒▒╢║╨╨╜╜╜╙╙"``        ,,╓╓╖╥╗   ,@╢▒▒▒╣╣╗
             ▒▒▒▒▒Ñ@╣╢╢╣▒▒▒╢╢║╨╨╜╜╜╙╙`'        ,,,╓╖,    ║╣╢   ╢▒▒▒▒▒▒╢╢H ╓▒▒╢╙``╙╨Ñ
             ╨╜╜╜╜╙"``            ╓╥@@@╥╖    ║▒▒▒▒▒▒▒▒N  ║▒▒[  ║▒▒U       ]▒▒╢╖,,
                     ╓╣╢▒▒╢╣╖   ╓╢▒▒Ñ╨╣▒▒╢,  ║▒▒[   ║▒▒H ]▒▒╢  ]▒▒║╖╖╥╗╖   ╙╢▒▒▒▒▒╣╣╖
                    ╢▒▒╜""╙▒▒Ñ  ╢▒▒     ╢▒╣  ]▒▒▒   ║▒▒▒  ▒▒▒   ▒▒▒╢╢Ñ╝╨       `"╙╢▒▒H
                   ]▒▒▒    `    ▒▒▒     ╠▒▒[  ▒▒▒╢╣▒▒▒╝   ║▒▒∩  ║▒▒        ╓╣╖,,,╓╢▒▒`
                   ║▒▒▒         ╢▒▒     ]▒▒[  ║▒▒╜``      ]▒▒▒  ]▒▒N@@Ñ╣╣╢ ╙╢▒▒▒▒▒▒Ñ`
                   └▒▒╢     ╖╖, ╙▒▒╢    ║▒▒┘  ║▒▒▒         ▒▒╢  ]╢╢╢╝╝╨╜╜╙
                    ╙▒▒╣╖,,╥▒▒Ñ  ╙╢▒▒╢╢▒▒╢╜   └╢╢▒
                     ╙╢▒▒▒▒▒╢╜      ╙╜
                                 

	BIG Copies rbx.lua Framework [2023] - [2023]
	Written by OneX - 1037898275229020250
	Developed with a keyboard and pixie dust.
	
	-+-+-+- SPECIFICS -+-+-+-
		_L.GUIFX
	===========
	Library of GUI FX which can be used to spice up your interfaces without a bunch of bulky code! All individual modules can be
	found as children to this one.
	===========
		\\\ Cute cartoon ripple effect when clicking button. Returns a function that will cancel this behavior. 
		GUIFX.ClickCartoon(
			button,					<-- |REQ|	Button that will inherent this behavior
		)
		
		\\\ Rubber stretch effect when clicking button. Returns a function that will cancel this behavior. MAKE SURE ANCHORPOINT IS {0.5, 0.5}!!!
		GUIFX.ClickStretch(
			button,					<-- |REQ|	Button that will inherent this behavior
		)
		
		\\\ FLASHBANG OUT! Colors entire screen for set amount of time and fades out.
		GUIFX.Flash(
			addTime,				<--			Time (sec) for flash to fade in						[defaults to: 1]
			decayTime,				<-- 		Time (sec) for flash to fade out					[defaults to: 1]
			color,					<-- 		RGB color of flash									[defaults to: Color3(1, 1, 1)]
		)
		
		\\\ Flash effect to text - useful to indicate when a text was updated, such as a currency counter.
		GUIFX.FlashText(
			textLabel,				<-- |REQ|	TextLabel											
			speed,					<-- 		Time (sec) for flash to fade out					[defaults to: 1]
		)
		
		\\\ Adds interact SFX to gui elements. Returns a function that will cancel this behavior.
		GUIFX.InteractSound(
			guiElement,				<-- |REQ|	Any GUI instance											
			interactType,			<-- |REQ|	MouseDown, mouseUp, mouseEnter, mouseLeave, mouseClick (str)
			soundId,				<-- |REQ|	SoundId that will be played per action
			volume,					<-- 		Sound volume (int)									[defaults to: 0.35 -> 0.15]
			randomPitch,			<-- 		Enable random pitch	(bool)							[defaults to: 1]
		)
		
		\\\ Make any gui element gay with a rainbow animation. Returns a function that will cancel this behavior.
		GUIFX.Rainbow(
			guiElement,				<-- |REQ|	Any GUI instance											
			property,				<-- |REQ|	Property of element that will be rainbow-fied
			speed,					<-- 		Seconds for full rainbow loop						[defaults to: 1]
		)
		
		\\\ Creates a tooltip with a custom description that will appear on mouse hover. Returns a function that will cancel this behavior.
		GUIFX.Tooltip(
			guiElement,				<-- |REQ|	Any GUI instance											
			text,					<-- |REQ|	Text that will appear on tooltip
		)
		
		\\\ Creates a drop-down list when clicking a specified gui element.
		GUIFX.List(
			button,					<-- |REQ|	Button GUI instance											
			listData,				<-- |REQ|	Data for list
			enableMultiSelect		<--       	Allow more than one list option to be selected		[defaults to: false]
			hideOnClick				<--       	Hide the list when an option is clicked				[defaults to: true]
		)
			Examples:
				_L.GUIFX.List(button, {"Option 1", "Option 2", "Option 3"})
				_L.GUIFX.List(button, {{"Option 1", true}, {"Option 2", false}, {Option 3", false}})
				_L.GUIFX.List(button, {["Option 1"] = true, ["Option 2"] = false, ["Option 3"] = false})
			Returns:
				Option Selected (BindableEvent)
				Cancel (Function)
				List Toggled (BindableEvent)
			Event returns: 
				TOGGLEABLE - (key, value)
				NON-TOGGLEABLE - (key)
				
		\\\ Creates a 'floating text' similar to WorldFX.RewardBillboard. Returns the textLabel.
		GUIFX.FloatText(
			position,				<-- |REQ|	UDim2 position										
			text,					<--			Text												[defaults to: ""]
			speed,					<--			Time (sec) until label is gone						[defaults to: 1]
			distanceMult,			<--			Distance the label travels (multiplier)				[defaults to: 1]
		)
	===========
--]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------|       Top       |--------
local GUIFX = {
	CacheProperty = require(script.CacheProperty),
	GetHolder = require(script.GetHolder),
	InteractSound = require(script.InteractSound),
	Odometer = require(script.Odometer),
	Rainbow = require(script.Rainbow),
	Sparkles = require(script.Sparkles),
	Tooltip = require(script.Tooltip),
	ButtonFX = require(script.ButtonFX),
	ContentScale = require(script.ContentScale),
	Loading = require(script.Loading),
	CircularBar = require(script.CircularBar),
	ClickCartoon = require(script.ClickCartoon),
	ClickStretch = require(script.ClickStretch),
	Flash = require(script.Flash),
	FlashText = require(script.FlashText),
	FloatText = require(script.FloatText),
	List = require(script.List)
}

--------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------
local unaddedEntries = ""

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and GUIFX[module.Name] == nil then
		unaddedEntries = unaddedEntries .. string.format("%s = require(script.%s),\n", module.Name, module.Name)
	end	
end

if #unaddedEntries > 0 then
	warn(string.format("Unadded entries: \n\n%s\n", unaddedEntries))
end

for index, v in pairs(GUIFX) do
	if not script:FindFirstChild(index) then
		warn(string.format("Unknown entry: %s", tostring(index)))
	end	
end

for _, module in ipairs(script:GetChildren()) do
	if module:IsA("ModuleScript") and GUIFX[module.Name] == nil then
		GUIFX[module.Name] = require(module)
	end	
end


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

return GUIFX
  -  Editar
  04:54:13.750    -  Editar
  04:54:13.751  ----- [2283] ReplicatedStorage.Library.Client.GUIFX.CacheProperty -----  -  Editar
  04:54:13.751  --------|     Setting     |--------

--------|    Reference    |--------

--------|    Variables    |--------
local cachedProperties = {}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--- Internal function that handles caching/retrieving initial property values
return function(gui, property) -- Line: 5
	if gui then
		--- Check & add cache
		if cachedProperties[gui] == nil then
			cachedProperties[gui] = {}
		end

		--- Check & add property cache
		if cachedProperties[gui][property]  == nil then
			cachedProperties[gui][property] = gui[property]
		end

		--
		return cachedProperties[gui][property]
	end
end
  -  Editar
  04:54:13.751    -  Editar
  04:54:13.751  ----- [2284] ReplicatedStorage.Library.Client.GUIFX.GetHolder -----  -  Editar
  04:54:13.751  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local Players = game:GetService("Players");
local ScreenGui = Instance.new("ScreenGui");
ScreenGui.Name = "GUIFX Holder";
ScreenGui.DisplayOrder = 999;
ScreenGui.Parent = Players.LocalPlayer;
return function() -- Line: 10
	--[[
		Upvalues:
			[1] = ScreenGui
	--]]
	return ScreenGui;
end;
  -  Editar
  04:54:13.751    -  Editar
  04:54:13.751  ----- [2285] ReplicatedStorage.Library.Client.GUIFX.InteractSound -----  -  Editar
  04:54:13.751  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Client = Library:WaitForChild("Client");
local m_Audio = require(Library.Audio);
local _ = require(Client.Settings);
return function(p1, p2, p3, p4, p5) -- Line: 37
	--[[
		Upvalues:
			[1] = m_Audio
	--]]
	local table1 = {};
	p2 = string.lower(p2);
	local u1 = p4 or 0.15;
	local u2 = p5 ~= nil and p5 or false;
	if p2 == "mousedown" then
		table1[#table1 + 1] = p1.InputBegan:Connect(function(input2) -- Line: 47
			--[[
				Upvalues:
					[1] = m_Audio
					[2] = p3
					[3] = u2
					[4] = u1
			--]]
			local t_UserInputType2 = input2.UserInputType;
			local t_UserInputState2 = input2.UserInputState;
			local t_KeyCode2 = input2.KeyCode;
			if t_UserInputType2 == Enum.UserInputType.MouseButton1 or t_UserInputType2 == Enum.UserInputType.Touch and t_UserInputState2 == Enum.UserInputState.Begin or t_KeyCode2 == Enum.KeyCode.ButtonA then
				m_Audio.Play(p3, script, u2 and math.random(95, 105) / 100 or 1, u1 * 2);
			end
		end);
	elseif p2 == "mouseup" then
		table1[#table1 + 1] = p1.InputEnded:Connect(function(input) -- Line: 56
			--[[
				Upvalues:
					[1] = m_Audio
					[2] = p3
					[3] = u2
					[4] = u1
			--]]
			local t_UserInputType = input.UserInputType;
			local t_UserInputState = input.UserInputState;
			local t_KeyCode = input.KeyCode;
			if t_UserInputType == Enum.UserInputType.MouseButton1 or t_UserInputType == Enum.UserInputType.Touch and t_UserInputState == Enum.UserInputState.End or t_KeyCode == Enum.KeyCode.ButtonA then
				m_Audio.Play(p3, script, u2 and math.random(95, 105) / 100 or 1, u1 * 2);
			end
		end);
	elseif p2 == "mouseenter" then
		table1[#table1 + 1] = p1.MouseEnter:Connect(function() -- Line: 65
			--[[
				Upvalues:
					[1] = m_Audio
					[2] = p3
					[3] = u2
					[4] = u1
			--]]
			m_Audio.Play(p3, script, u2 and math.random(95, 105) / 100 or 1, u1);
		end);
	elseif p2 == "mouseleave" then
		table1[#table1 + 1] = p1.MouseLeave:Connect(function() -- Line: 71
			--[[
				Upvalues:
					[1] = m_Audio
					[2] = p3
					[3] = u2
					[4] = u1
			--]]
			m_Audio.Play(p3, script, u2 and math.random(95, 105) / 100 or 1, u1);
		end);
	elseif p2 == "mouseclick" then
		table1[#table1 + 1] = p1.Activated:Connect(function() -- Line: 77
			--[[
				Upvalues:
					[1] = m_Audio
					[2] = p3
					[3] = u2
					[4] = u1
			--]]
			m_Audio.Play(p3, script, u2 and math.random(95, 105) / 100 or 1, u1);
		end);
	end
	return function() -- Line: 83
		--[[
			Upvalues:
				[1] = table1
		--]]
		for _, val1 in ipairs(table1) do
			val1:Disconnect();
		end
	end;
end;
  -  Editar
  04:54:13.751    -  Editar
  04:54:13.751  ----- [2286] ReplicatedStorage.Library.Client.GUIFX.ButtonFX -----  -  Editar
  04:54:13.752  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local m_Functions = require(Library.Functions);
local m_Variables = require(Library.Variables);
local m_CacheProperty = require(script.Parent.CacheProperty);
local m_InteractSound = require(script.Parent.InteractSound);
return function(p1, _)
	local table1 = {};
	local u1 = false;
	local u2 = false;
	local u3 = p1:FindFirstChildOfClass("UIScale");
	if not u3 then
		local ButtonUIScale = Instance.new("UIScale");
		ButtonUIScale.Name = "ButtonUIScale";
		ButtonUIScale.Parent = p1;
		u3 = ButtonUIScale;
	end
	assert(u3);
	local table2 = {};
	for _, child1 in ipairs(p1:GetChildren()) do
		if not child1:IsA("TextLabel") or not child1.Visible then continue end
		table2[child1] = m_CacheProperty(child1, "Position");
	end
	local function Down() 
		if not u1 then
			u1 = not u1;
			m_Functions.Tween(u3, {Scale = 0.9}, {
				0.065,
				Enum.EasingStyle.Exponential,
				"Out"
			});
		end
	end
	local function Up() 
		if u1 then
			u1 = not u1;
			m_Functions.Tween(u3, {Scale = 1}, {
				0.25,
				Enum.EasingStyle.Circular,
				"Out"
			});
		end
	end
	local function MouseLeave() 
		if u2 then
			u2 = not u2;
			if not u1 then
				m_Functions.Tween(u3, {Scale = 1}, {
					0.035,
					Enum.EasingStyle.Exponential,
					"Out"
				});
			end
		end
	end
	local function MouseEnter() 
		if not u2 then
			u2 = not u2;
			if not u1 then
				m_Functions.Tween(u3, {Scale = 1.05}, {
					0.05,
					Enum.EasingStyle.Circular,
					"Out"
				});
			end
		end
	end
	local function Events() 
		table1[#table1 + 1] = p1.InputBegan:Connect(function(input) 
			if not p1.Active then return end
			local t_UserInputType = input.UserInputType;
			local t_UserInputState = input.UserInputState;
			local t_KeyCode = input.KeyCode;
			if t_UserInputType == Enum.UserInputType.MouseButton1 or t_UserInputType == Enum.UserInputType.Touch and t_UserInputState == Enum.UserInputState.Begin or t_KeyCode == Enum.KeyCode.ButtonA then
				Down();
			end
		end);
		table1[#table1 + 1] = p1.InputEnded:Connect(function(input2) 
			if not p1.Active then return end
			local t_UserInputType2 = input2.UserInputType;
			local _ = input2.UserInputState;
			local t_KeyCode2 = input2.KeyCode;
			if t_UserInputType2 == Enum.UserInputType.MouseButton1 or t_UserInputType2 == Enum.UserInputType.Touch or t_KeyCode2 == Enum.KeyCode.ButtonA then
				Up();
			end
		end);
		table1[#table1 + 1] = p1.MouseEnter:Connect(function() 
			if not p1.Active then return end
			if m_Variables.Desktop then
				MouseEnter();
			end
		end);
		table1[#table1 + 1] = p1.MouseLeave:Connect(function() 
			if not p1.Active then return end
			if m_Variables.Desktop then
				MouseLeave();
			end
		end);
	end
	Events();
	local u8 = m_InteractSound(p1, "mousedown", "rbxassetid://7000714975", 0.1, true);
	local u9 = m_InteractSound(p1, "mouseup", "rbxassetid://7000715003", 0.1, true);
	return function() 
		for _, val2 in ipairs(table1) do
			val2:Disconnect();
		end
		u8();
		u9();
	end;
end;
  -  Editar
  04:54:13.752    -  Editar
  04:54:13.752  ----- [2287] ReplicatedStorage.Library.Client.GUIFX.CircularBar -----  -  Editar
  04:54:13.752  return function(p1) 
	local u1 = nil;
	local Right = nil;
	local u2 = nil;
	local UIGradient = nil;
	local function Setup()
		local Left = p1:FindFirstChild("Left");
		Right = p1:FindFirstChild("Right");
		u1 = Left;
		local UIGradient2 = u1:FindFirstChildOfClass("UIGradient");
		UIGradient = Right:FindFirstChildOfClass("UIGradient");
		u2 = UIGradient2;
	end
	if not pcall(Setup) or p1:GetAttribute("Progress") then
		warn("Could not setup CircularBar for " .. p1.Name);
		return;
	end
	local function Draw(p2)
		p2 = math.clamp(p2, 0, 1);
		if p1 and u2 and UIGradient then
			local v2 = math.clamp(p2 * 2, 0, 1) * 180;
			local v3 = math.clamp((p2 - 0.5) * 2, 0, 1) * 180 + 180;
			UIGradient.Rotation = v2;
			u2.Rotation = v3;
			UIGradient.Enabled = p2 < 0.5;
			u2.Enabled = p2 < 1;
			p1.Visible = p2 > 0;
		end
	end
	p1:SetAttribute("Progress", 1);
	p1:GetAttributeChangedSignal("Progress"):Connect(function()
		Draw(p1:GetAttribute("Progress"));
	end);
end;
  -  Editar
  04:54:13.752    -  Editar
  04:54:13.752  ----- [2288] ReplicatedStorage.Library.Client.GUIFX.ClickCartoon -----  -  Editar
  04:54:13.752  -- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Settings = require(ClientLibrary.Settings)

--------|     Setting     |--------

--------|    Reference    |--------
local RunService = game:GetService("RunService")

--------|    Variables    |--------
local GetHolder = require(script.Parent.GetHolder)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--- Cartoon effect when clicking button


return function(button) 
	local events = {}
	
	--- Button click event
	events[#events + 1] = button.Activated:Connect(function() 
		for b = 1, 2 do
			coroutine.wrap(function() 
				--- Variables
				local posX, posY = button.AbsolutePosition.X, button.AbsolutePosition.Y
				local sizeX, sizeY = button.AbsoluteSize.X + 6, button.AbsoluteSize.Y + 6
				
				--- Create FX
				local fx = Instance.new("fx")
				fx.Image = "rbxassetid://3134005313"
				fx.BackgroundTransparency = 1
				fx.BorderSizePixel = 0
				fx.AnchorPoint = Vector2.new(0.5, 0.5)
				fx.Size = UDim2.new(0, sizeX, 0, sizeY)
				fx.Rotation = math.random(0, 360)
				fx.Position = UDim2.new(0, posX + sizeX / 2, 0, posY + sizeY / 2)
				fx.Parent = GetHolder()
				
				--- Tween FX
				local startTick = os.clock()
				local buttonLifetime = (b == 1 and 0.1 or 0.2)
				--
				while (fx and button and (os.clock() - startTick) < buttonLifetime) do
					--- Time passed (converted to work with old code which was frame-based)
					local i = (os.clock() - startTick) * 50
					
					--
					if b == 1 then
						--- Close, dramatic
						local add = math.abs(math.sin(i / 5) * 15)
						fx.Size = UDim2.new(0, (sizeX + add), 0, (sizeY + add))

					else
						--- Far, fade out
						local add = math.abs(math.sin(i / 5) * 30)
						fx.Size = UDim2.new(0, (sizeX + add), 0, (sizeY + add))
						fx.ImageTransparency = (i / 10)
					end
					
					--
					RunService.RenderStepped:Wait()
				end
				
				--- Destroy FX
				fx:Destroy()
			end)()
		end
	end)
	
	--- Return function to cancel
	return function()
		--- Disconnect events
		for _, event in ipairs(events) do
			event:disconnect()
		end
		events = nil
	end
end
  -  Editar
  04:54:13.752    -  Editar
  04:54:13.752  ----- [2289] ReplicatedStorage.Library.Client.GUIFX.ClickStretch -----  -  Editar
  04:54:13.752  -- | load library | --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientLibrary = Library:WaitForChild("Client")
local Modules = Library:WaitForChild("Modules")
local Types = Library:WaitForChild("Types")

-- | shared modules | --
local Functions = require(Library.Functions)

--------|     Setting     |--------

--------|    Reference    |--------
local RunService = game:GetService("RunService")

--------|    Variables    |--------
local CacheProperty = require(script.Parent.CacheProperty)
local EasingStyle = require(Library:WaitForChild("Client").Settings).UIEasingStyle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--- Stretch effect when clicking a button


return function(button)
	local events = {}
	local buttonDown = false
	
	--- Cache button size
	local originalSize = CacheProperty(button, "Size")
	
	
	--- Button down
	local function Down()
		if not buttonDown then
			buttonDown = not buttonDown
			Functions.FastTween(button, {Size = originalSize + UDim2.new(0, 10, 0, -5)}, {0.05, EasingStyle, "Out"})
		end
	end

	--- Button up
	local function Up()
		if buttonDown then
			buttonDown = not buttonDown
		    Functions.FastTween(button, {Size = originalSize}, {0.35, "Back", "Out"})
		end
	end

	--- Button events
	events[#events + 1] = button.MouseButton1Down:Connect(function()
		Down()
	end)
	--
	events[#events + 1] = button.MouseButton1Up:Connect(function()
		Up()
	end)
	--
	events[#events + 1] = button.MouseLeave:Connect(function()
		Up()
	end)

	--- Return function to stop
	return function()
		for _, event in ipairs(events) do
			event:disconnect()
		end
		events = nil
	end
end
  -  Editar
  04:54:13.752    -  Editar
  04:54:13.752  ----- [2290] ReplicatedStorage.Library.Client.GUIFX.ContentScale -----  -  Editar
  04:54:13.753  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local m_Functions = require(ReplicatedStorage:WaitForChild("Library").Functions);
local m_CacheProperty = require(script.Parent.CacheProperty);
return function(p1) 
	local FindFirstAncestorOfClass_ret = p1:FindFirstAncestorOfClass("ScreenGui");
	assert(FindFirstAncestorOfClass_ret);
	local function Scrollbar() 
		local UIListLayout = p1:FindFirstChildOfClass("UIListLayout");
		assert(UIListLayout);
		local UIPadding = p1:FindFirstChildOfClass("UIPadding");
		assert(UIPadding);
		local v1 = UIListLayout.AbsoluteContentSize.Y;
		if UIPadding then
			v1 = v1 + (UIPadding.PaddingTop.Offset + UIPadding.PaddingBottom.Offset);
		end
		p1.CanvasSize = UDim2.new(0, 0, 0, v1);
	end
	local function SizeFrame(p2) 
		local v2 = m_Functions.ResolutionScale();
		local v3 = 0;
		for _, child1 in ipairs(p2:GetChildren()) do
			if child1:IsA("UIPadding") then
				local v5 = m_CacheProperty(child1, "PaddingTop");
				local v6 = m_CacheProperty(child1, "PaddingBottom");
				child1.PaddingTop = UDim.new(v5.Scale, v5.Offset * v2);
				child1.PaddingBottom = UDim.new(v6.Scale, v6.Offset * v2);
				v3 = v3 + (child1.PaddingTop.Offset + child1.PaddingBottom.Offset);
				continue;
			end
			if not child1:IsA("UIListLayout") and not child1:IsA("UIGridLayout") or child1.ClassName == "UIListLayout" and child1.FillDirection == Enum.FillDirection.Horizontal then continue end
			v3 = v3 + child1.AbsoluteContentSize.Y;
			if child1:IsA("UIListLayout") then
				local v7 = m_CacheProperty(child1, "Padding");
				child1.Padding = UDim.new(v7.Scale, v7.Offset * v2);
				continue;
			end
			if not child1:IsA("UIGridLayout") then continue end
			local v4 = m_CacheProperty(child1, "CellPadding");
			child1.CellPadding = UDim2.new(v4.X.Scale, v4.X.Offset * v2, v4.Y.Scale, v4.Y.Offset * v2);
			if not child1:FindFirstChildOfClass("UIAspectRatioConstraint") then continue end
			child1.CellSize = UDim2.new(child1.CellSize.X.Scale, child1.CellSize.X.Offset, 0, child1.AbsoluteCellSize.Y + 2);
		end
		if v3 <= 0 then
			p2.Size = UDim2.new(p2.Size.X.Scale, p2.Size.X.Offset, 1, 0);
			return;
		end
		p2.Size = UDim2.new(p2.Size.X.Scale, p2.Size.X.Offset, 0, v3);
	end
	local function Scaling() 
		if not FindFirstAncestorOfClass_ret.Enabled or not p1.Visible then return end
		local _ = game.Workspace.CurrentCamera.ViewportSize.Y <= 1000;
		for _, child2 in ipairs(p1:GetChildren()) do
			if not child2:IsA("GuiObject") then continue end
			for _, child3 in ipairs(child2:GetChildren()) do
				if not child3:FindFirstChildOfClass("UIListLayout") and not child3:FindFirstChildOfClass("UIGridLayout") then continue end
				if child3:IsA("GuiObject") then
					SizeFrame(child3);
					continue;
				end
				warn("WHAT IS THIS?", child3);
			end
			SizeFrame(child2);
		end
		Scrollbar();
	end
	task.spawn(function()
		while true do
			RunService.Heartbeat:Wait();
			Scaling();
		end
	end);
end;
  -  Editar
  04:54:13.753    -  Editar
  04:54:13.753  ----- [2291] ReplicatedStorage.Library.Client.GUIFX.FlashText -----  -  Editar
  04:54:13.753  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local m_Settings = require(Library:WaitForChild("Client").Settings);
local m_Functions = require(Library.Functions);
local m_CacheProperty = require(script.Parent.CacheProperty);
local t_UIEasingStyle = m_Settings.UIEasingStyle;
return function(p1, p2) -- Line: 37
	--[[
		Upvalues:
			[1] = m_CacheProperty
			[2] = m_Functions
			[3] = t_UIEasingStyle
	--]]
	local v1 = p2 or 1;
	local v2 = m_CacheProperty(p1, "TextColor3");
	if Color3.new(1, 1, 1) == v2 then
		p1.TextColor3 = Color3.new(v2.r / 2, v2.g / 2, v2.b / 2);
	else
		p1.TextColor3 = Color3.new(v2.r * 2, v2.g * 2, v2.b * 2);
	end
	local _ = m_Functions.Tween(p1, {TextColor3 = v2}, {
		v1,
		t_UIEasingStyle
	});
end;
  -  Editar
  04:54:13.753    -  Editar
  04:54:13.753  ----- [2292] ReplicatedStorage.Library.Client.GUIFX.FloatText -----  -  Editar
  04:54:13.753  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local m_Functions = require(ReplicatedStorage:WaitForChild("Library").Functions);
local m_GetHolder = require(script.Parent.GetHolder);
return function(p1, p2, p3, p4) -- Line: 35
	--[[
		Upvalues:
			[1] = m_GetHolder
			[2] = m_Functions
	--]]
	local v1 = p3 or 1;
	local v2 = p2 or "";
	local v3 = p4 or 1;
	local v4 = m_GetHolder();
	local v5 = p1 + UDim2.new(0, 0, 0, -(game.Workspace.CurrentCamera.ViewportSize.Y / 5) * v3);
	local TextLabel = Instance.new("TextLabel");
	TextLabel.AnchorPoint = Vector2.new(0.5, 0.5);
	TextLabel.Position = p1;
	TextLabel.Size = UDim2.new(0, 250, 0, 250);
	TextLabel.BackgroundTransparency = 1;
	TextLabel.BorderSizePixel = 0;
	TextLabel.TextColor3 = Color3.new(1, 1, 1);
	TextLabel.TextStrokeTransparency = 0.5;
	TextLabel.Text = v2;
	TextLabel.Name = "Floating Text";
	TextLabel.Font = Enum.Font.GothamBold;
	TextLabel.TextSize = 20;
	TextLabel.Parent = v4;
	local v6 = m_Functions.Tween(TextLabel, {
		TextTransparency = 1,
		TextStrokeTransparency = 1,
		Position = v5
	}, {v1});
	m_Functions.AddDebris(TextLabel, 5);
	v6.Completed:Connect(function() -- Line: 66
		--[[
			Upvalues:
				[1] = TextLabel
		--]]
		TextLabel:Destroy();
	end);
	return TextLabel;
end;
  -  Editar
  04:54:13.753    -  Editar
  04:54:13.753  ----- [2293] ReplicatedStorage.Library.Client.GUIFX.List -----  -  Editar
  04:54:13.753  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local Library = ReplicatedStorage:WaitForChild("Library");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local m_Functions = require(Library.Functions);
local t_List = Assets.UI.FRAMEWORK.List;
return function(p1, p2, p3, p4) -- Line: 53
	--[[
		Upvalues:
			[1] = m_Functions
			[2] = t_List
			[3] = RunService
	--]]
	local u1 = p3 ~= nil and p3 or false;
	local u2 = p4 ~= nil and p4 or true;
	if not m_Functions.IsArray(p2) then
		local table1 = {};
		for key1, val1 in pairs(p2) do
			table.insert(table1, {
				key1,
				val1
			});
		end
		p2 = table1;
	end
	local u3 = type(p2[1]) == "table";
	local BindableEvent = Instance.new("BindableEvent");
	local BindableEvent2 = Instance.new("BindableEvent");
	local u4 = false;
	local bool1 = false;
	local Connect_ret = nil;
	local u5 = nil;
	local Clone_ret = nil;
	local table2 = {};
	local function Update() -- Line: 80
		--[[
			Upvalues:
				[1] = Clone_ret
				[2] = u3
				[3] = p2
				[4] = m_Functions
		--]]
		if Clone_ret and u3 then
			local list = Clone_ret:FindFirstChild("list");
			for _, val3 in ipairs(p2) do
				local v3 = val3[1];
				local v4 = val3[2];
				local FindFirstChild_ret = list:FindFirstChild(v3);
				if v4 then
					m_Functions.Tween(FindFirstChild_ret:FindFirstChild("Enabled"), {BackgroundTransparency = 0.7}, {
						0.15,
						nil,
						"Out"
					});
					continue;
				end
				m_Functions.Tween(FindFirstChild_ret:FindFirstChild("Enabled"), {BackgroundTransparency = 1}, {
					0.15,
					nil,
					"Out"
				});
			end
		end
	end
	local function Hide(p5) -- Line: 97
		--[[
			Upvalues:
				[1] = Clone_ret
				[2] = u4
				[3] = u5
				[4] = m_Functions
				[5] = table2
				[6] = BindableEvent2
		--]]
		if not Clone_ret then return end
		assert(Clone_ret);
		if u4 then
			Clone_ret.Visible = true;
		end
		u5 = m_Functions.Tween(Clone_ret, {Size = UDim2.new(1, 0, 0, 0)}, {0.075});
		assert(u5);
		u5.Completed:Connect(function() -- Line: 107
			--[[
				Upvalues:
					[1] = u4
					[2] = p5
					[3] = table2
					[4] = Clone_ret
			--]]
			if not u4 or p5 then
				for key5, _ in ipairs(table2) do
					table2[key5]:Disconnect();
				end
				table2 = {};
				Clone_ret:Destroy();
				Clone_ret = nil;
			end
		end);
		BindableEvent2:Fire(false);
	end
	local function Show() -- Line: 123
		--[[
			Upvalues:
				[1] = Clone_ret
				[2] = t_List
				[3] = p1
				[4] = p2
				[5] = table2
				[6] = bool1
				[7] = u2
				[8] = u4
				[9] = Hide
				[10] = u3
				[11] = BindableEvent
				[12] = u1
				[13] = Update
				[14] = RunService
				[15] = u5
				[16] = m_Functions
				[17] = BindableEvent2
		--]]
		if not Clone_ret then
			Clone_ret = t_List.Base:Clone();
			assert(Clone_ret);
			Clone_ret.Size = UDim2.new(1, 0, 0, 0);
			Clone_ret.AnchorPoint = Vector2.new(0.5, 0);
			Clone_ret.Position = UDim2.new(0.5, 0, 1, 0);
			Clone_ret.Name = "__LIST";
			Clone_ret.ZIndex = p1.ZIndex + 1;
			Clone_ret.Parent = p1;
			local Clone_ret2 = t_List.BaseScroll:Clone();
			Clone_ret2.AnchorPoint = Vector2.new(0.5, 0.5);
			Clone_ret2.Position = UDim2.new(0.5, 0, 0.5, 0);
			Clone_ret2.Size = UDim2.new(1, 0, 1, 0);
			Clone_ret2.CanvasSize = UDim2.new(1, 0, 1, 0);
			Clone_ret2.Name = "list";
			Clone_ret2.ZIndex = Clone_ret.ZIndex;
			Clone_ret2.Parent = Clone_ret;
			for key4, val4 in ipairs(p2) do
				local u9 = type(val4) == "table" and val4[1] or val4;
				local _ = type(val4) == "table";
				local Clone_ret3 = t_List.Block:Clone();
				Clone_ret3.Size = UDim2.new(Clone_ret3.Size.X.Scale, 0, 0, 1000);
				Clone_ret3.Text = u9;
				Clone_ret3.TextScaled = false;
				Clone_ret3.LayoutOrder = key4;
				Clone_ret3.TextWrapped = true;
				Clone_ret3.Name = u9;
				Clone_ret3.ZIndex = Clone_ret.ZIndex;
				Clone_ret3.Enabled.ZIndex = Clone_ret.ZIndex + 1;
				Clone_ret3.div_b.ZIndex = Clone_ret.ZIndex;
				Clone_ret3.div_u.ZIndex = Clone_ret.ZIndex;
				Clone_ret3.Parent = Clone_ret2;
				table2[#table2 + 1] = Clone_ret3.Activated:Connect(function() -- Line: 160
					--[[
						Upvalues:
							[1] = bool1
							[2] = u2
							[3] = u4
							[4] = Hide
							[5] = u3
							[6] = BindableEvent
							[7] = u9
							[8] = u1
							[9] = val4
							[10] = p2
							[11] = Update
					--]]
					if not bool1 then
						bool1 = true;
						if u2 then
							u4 = false;
							Hide();
						end
						if not u3 then
							BindableEvent:Fire(u9);
						elseif u3 and u1 then
							val4[2] = not val4[2];
							BindableEvent:Fire(u9, val4[2]);
						elseif u3 and not val4[2] then
							val4[2] = not val4[2];
							for _, val6 in ipairs(p2) do
								if val6[1] == val4[1] then continue end
								val6[2] = false;
							end
							BindableEvent:Fire(u9, val4[2]);
						end
						Update();
						bool1 = false;
					end
				end);
				local coroutine_wrap_ret2 = coroutine.wrap(function() -- Line: 191
					--[[
						Upvalues:
							[1] = Clone_ret3
							[2] = Clone_ret
							[3] = RunService
					--]]
					while Clone_ret3 and Clone_ret and Clone_ret.Parent do
						Clone_ret3.Size = UDim2.new(Clone_ret3.Size.X.Scale, 0, 0, (math.max(Clone_ret3.TextBounds.Y + 6, 25)));
						RunService.RenderStepped:Wait();
					end
				end);
				coroutine_wrap_ret2();
			end
			local UIListLayout = Instance.new("UIListLayout");
			UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center;
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
			UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom;
			UIListLayout.Parent = Clone_ret2;
			local coroutine_wrap_ret = coroutine.wrap(function() -- Line: 205
				--[[
					Upvalues:
						[1] = Clone_ret
						[2] = UIListLayout
						[3] = Clone_ret2
						[4] = p1
						[5] = RunService
				--]]
				while Clone_ret and Clone_ret.Parent do
					UIListLayout:ApplyLayout();
					if Clone_ret.AbsoluteSize.Y < 20 then
						Clone_ret2.CanvasSize = UDim2.new(1, 0, 0, 0);
					else
						Clone_ret2.CanvasSize = UDim2.new(1, 0, 0, UIListLayout.AbsoluteContentSize.Y);
					end
					if workspace.CurrentCamera.ViewportSize.Y - 36 <= p1.AbsolutePosition.Y + p1.AbsoluteSize.Y + Clone_ret.AbsoluteSize.Y then
						Clone_ret.AnchorPoint = Vector2.new(0.5, 1);
						Clone_ret.Position = UDim2.new(0.5, 0, 0, 0);
					else
						Clone_ret.AnchorPoint = Vector2.new(0.5, 0);
						Clone_ret.Position = UDim2.new(0.5, 0, 1, 0);
					end
					RunService.RenderStepped:Wait();
				end
			end);
			coroutine_wrap_ret();
		end
		assert(Clone_ret);
		local udim2 = UDim2.new(1, 0, 0, (math.min(#p2 * 25, 125)));
		u5 = m_Functions.Tween(Clone_ret, {Size = udim2}, {0.075});
		BindableEvent2:Fire(true);
		Update();
	end
	local function Toggle() -- Line: 236
		--[[
			Upvalues:
				[1] = u4
				[2] = Show
				[3] = Hide
		--]]
		u4 = not u4;
		if u4 then
			Show();
			return;
		end
		Hide();
	end
	local function Stop() -- Line: 246
		--[[
			Upvalues:
				[1] = Connect_ret
				[2] = BindableEvent
				[3] = BindableEvent2
				[4] = u4
				[5] = Hide
		--]]
		if Connect_ret then
			Connect_ret:Disconnect();
		end
		BindableEvent:Destroy();
		BindableEvent2:Destroy();
		if u4 then
			Hide(true);
		end
	end
	local function OverrideOption(p6) -- Line: 259
		--[[
			Upvalues:
				[1] = p2
		--]]
		for _, val2 in ipairs(p2) do
			val2[2] = val2[1] == p6;
		end
	end
	Connect_ret = p1.Activated:Connect(function() -- Line: 266
		--[[
			Upvalues:
				[1] = u4
				[2] = Show
				[3] = Hide
		--]]
		u4 = not u4;
		if u4 then
			Show();
			return;
		end
		Hide();
	end);
	return BindableEvent, Stop, BindableEvent2, OverrideOption;
end;
  -  Editar
  04:54:13.753    -  Editar
  04:54:13.753  ----- [2294] ReplicatedStorage.Library.Client.GUIFX.Loading -----  -  Editar
  04:54:13.753  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local Library = ReplicatedStorage:WaitForChild("Library");
local Client = Library:WaitForChild("Client");
local m_Functions = require(Library.Functions);
local m_Directory = require(Library.Directory);
local m_GUI = require(Client.GUI);
local m_GIF = require(Client.GIF);
local m_CacheProperty = require(script.Parent.CacheProperty);
local bool1 = false;
return function(p1) -- Line: 35
	--[[
		Upvalues:
			[1] = m_GUI
			[2] = m_Directory
			[3] = bool1
			[4] = RunService
			[5] = m_CacheProperty
			[6] = m_GIF
			[7] = m_Functions
			[8] = Assets
	--]]
	local t_Loading = m_GUI.Loading;
	local v1 = m_Directory.Worlds[p1];
	while bool1 do
		RunService.RenderStepped:Wait();
	end
	bool1 = true;
	local u1 = m_CacheProperty(t_Loading.GIF, "Position");
	local u2 = u1 + UDim2.new(0, 0, 0.05, 0);
	local u3 = m_CacheProperty(t_Loading.Info, "Position");
	local u4 = u3 + UDim2.new(0, 0, 0.05, 0);
	t_Loading.Black.Size = UDim2.new(0, 0, 2, 0);
	t_Loading.GIF.Position = u2;
	t_Loading.GIF.Transparency = 1;
	t_Loading.Black.BackgroundTransparency = 0;
	t_Loading.Info.Position = u4;
	t_Loading.Label.TextTransparency = 1;
	t_Loading.Location.TextTransparency = 1;
	t_Loading.Location.Text = v1 and v1.display or p1 or "";
	local u5 = m_GIF.Create(t_Loading.GIF, {
		146,
		146
	}, {
		7,
		6
	}, 39, 1);
	local function FadeIn() -- Line: 66
		--[[
			Upvalues:
				[1] = m_Functions
				[2] = t_Loading
				[3] = u1
				[4] = u3
		--]]
		m_Functions.Tween(t_Loading.GIF, {
			Position = u1,
			ImageTransparency = 0
		}, {
			0.8,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Info, {Position = u3}, {
			0.8,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Label, {TextTransparency = 0}, {
			0.7,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Location, {TextTransparency = 0}, {
			0.9,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Black, {Size = UDim2.new(1, 0, 2, 0)}, {
			0.15,
			"Linear"
		});
		t_Loading.Gui.Enabled = true;
	end
	local function FadeOut() -- Line: 77
		--[[
			Upvalues:
				[1] = m_Functions
				[2] = t_Loading
				[3] = u2
				[4] = u4
		--]]
		m_Functions.Tween(t_Loading.GIF, {
			Position = u2,
			ImageTransparency = 1
		}, {
			0.5,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Info, {Position = u4}, {
			0.5,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Label, {TextTransparency = 1}, {
			0.4,
			"Sine",
			"Out"
		});
		m_Functions.Tween(t_Loading.Location, {TextTransparency = 1}, {
			0.4,
			"Sine",
			"Out"
		});
		m_Functions.Wait(1);
		t_Loading.Gui.Enabled = false;
	end
	local function MakeCircles() -- Line: 87
		--[[
			Upvalues:
				[1] = Assets
				[2] = t_Loading
				[3] = m_Functions
		--]]
		local v4 = 0;
		for index1 = 0, 16 do
			for index2 = 0, 20 do
				v4 = v4 + 1;
				local Clone_ret = Assets.UI.Loading.Circle:Clone();
				Clone_ret.Position = UDim2.new(index2 * 0.05, 0, index1 * 0.0625, 0);
				Clone_ret.Size = UDim2.new(0.25, 0, 0.3125, 0);
				Clone_ret.Parent = t_Loading.Black;
				local v5 = Clone_ret.Position.X.Scale * 2 * (Clone_ret.Position.Y.Scale * 2) / 3;
				m_Functions.Tween(Clone_ret, {Size = UDim2.new(0, 0, 0, 0)}, {
					v5 + 0.2,
					"Linear"
				}).Completed:Connect(function() -- Line: 101
					--[[
						Upvalues:
							[1] = Clone_ret
					--]]
					Clone_ret:Destroy();
				end);
			end
		end
		t_Loading.Black.BackgroundTransparency = 1;
	end
	local function Stop() -- Line: 111
		--[[
			Upvalues:
				[1] = MakeCircles
				[2] = FadeOut
				[3] = u5
				[4] = bool1
		--]]
		MakeCircles();
		FadeOut();
		u5();
		bool1 = false;
	end
	FadeIn();
	return Stop;
end;
  -  Editar
  04:54:13.753    -  Editar
  04:54:13.754  ----- [2295] ReplicatedStorage.Library.Client.GUIFX.Odometer -----  -  Editar
  04:54:13.754  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local m_Functions = require(ReplicatedStorage:WaitForChild("Library").Functions);
return function(p1) -- Line: 35
	--[[
		Upvalues:
			[1] = m_Functions
	--]]
	if p1.ClassName ~= "TextLabel" then
		warn("Only supports TextLabel");
		return function() -- Line: 38
		end;
	end
	local Clone_ret = p1:Clone();
	Clone_ret.AutoLocalize = false;
	Clone_ret.Name = p1.Name .. "_odometerGUIFX";
	Clone_ret.Text = p1.Text;
	Clone_ret.Parent = p1.Parent;
	p1.Visible = false;
	local u1 = nil;
	local u2 = 0;
	local function Update() -- Line: 53
		--[[
			Upvalues:
				[1] = u2
				[2] = p1
				[3] = u1
				[4] = Clone_ret
				[5] = m_Functions
		--]]
		u2 = u2 + 1;
		local u4 = u2;
		local string_gsub_ret = string.gsub(p1.Text, ",", "");
		local tonumber_ret = tonumber(string_gsub_ret);
		local u5;
		if tonumber_ret == nil then
			u5 = false;
		else
			u5 = tostring(tonumber_ret) ~= p1.Text;
		end
		if u1 and tonumber_ret then
			local coroutine_wrap_ret = coroutine.wrap(function() -- Line: 62
				--[[
					Upvalues:
						[1] = u1
						[2] = tonumber_ret
						[3] = u4
						[4] = u2
						[5] = Clone_ret
						[6] = u5
						[7] = m_Functions
						[8] = p1
				--]]
				local v1 = u1;
				local v2 = tonumber_ret - v1;
				local math_clamp_ret = math.clamp(math.abs(v2), 1, 15);
				local math_round_ret = math.round(v2 / math_clamp_ret);
				for index1 = 1, math_clamp_ret do
					if u4 ~= u2 or not Clone_ret or not Clone_ret.Parent then return end
					local v3 = v1 + math_round_ret * index1;
					Clone_ret.Text = u5 and m_Functions.Commas(v3) or tostring(v3);
					m_Functions.Wait(0.01);
				end
				if u4 == u2 and Clone_ret and Clone_ret.Parent then
					Clone_ret.Text = p1.Text;
				end
			end);
			coroutine_wrap_ret();
		elseif Clone_ret then
			Clone_ret.Text = p1.Text;
		end
		if tonumber_ret then
			u1 = tonumber_ret;
		end
	end
	local function Delete() -- Line: 93
		--[[
			Upvalues:
				[1] = Clone_ret
				[2] = p1
		--]]
		Clone_ret:Destroy();
		if p1 then
			p1.Visible = true;
		end
	end
	p1:GetPropertyChangedSignal("Text"):Connect(function() -- Line: 101
		--[[
			Upvalues:
				[1] = Update
		--]]
		Update();
	end);
	p1.AncestryChanged:Connect(function() -- Line: 105
		--[[
			Upvalues:
				[1] = p1
				[2] = Clone_ret
		--]]
		if not p1 or not p1.Parent then
			Clone_ret:Destroy();
			if p1 then
				p1.Visible = true;
			end
		end
	end);
	Update();
	return function() -- Line: 115
		--[[
			Upvalues:
				[1] = Clone_ret
				[2] = p1
		--]]
		Clone_ret:Destroy();
		if p1 then
			p1.Visible = true;
		end
	end;
end;
  -  Editar
  04:54:13.754    -  Editar
  04:54:13.754  ----- [2296] ReplicatedStorage.Library.Client.GUIFX.Rainbow -----  -  Editar
  04:54:13.754  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local RunService = game:GetService("RunService");
return function(p1, p2, p3) -- Line: 29
	--[[
		Upvalues:
			[1] = RunService
	--]]
	local u1 = p3 or 1;
	local bool1 = true;
	task.spawn(function() -- Line: 36
		--[[
			Upvalues:
				[1] = p1
				[2] = bool1
				[3] = u1
				[4] = p2
				[5] = RunService
		--]]
		local os_clock_ret = os.clock();
		while p1 and p1.Parent and bool1 do
			local v1 = (os.clock() - os_clock_ret) * (1 / u1);
			if v1 >= 1 then
				os_clock_ret = os.clock();
				v1 = 0;
			end
			p1[p2] = Color3.fromHSV(v1, 1, 1);
			RunService.Stepped:Wait();
		end
	end);
	return function() -- Line: 56
		--[[
			Upvalues:
				[1] = bool1
		--]]
		bool1 = false;
	end;
end;
  -  Editar
  04:54:13.754    -  Editar
  04:54:13.754  ----- [2297] ReplicatedStorage.Library.Client.GUIFX.Sparkles -----  -  Editar
  04:54:13.754  -- Decompiled with Synapse X v3.0 | https://github.com/synllc

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Library = ReplicatedStorage:WaitForChild("Library");
local Assets = ReplicatedStorage:WaitForChild("Assets");
local m_Functions = require(Library.Functions);
local Random_new_ret = Random.new();
return function(p1, p2) -- Line: 27
	--[[
		Upvalues:
			[1] = Assets
			[2] = Random_new_ret
			[3] = m_Functions
	--]]
	local u1 = p2 or 1;
	local u2 = p1:FindFirstAncestorOfClass("ScreenGui") or p1:FindFirstAncestorOfClass("BillboardGui") or p1:FindFirstAncestorOfClass("SurfaceGui");
	if not u2 then
		warn("Must be parented first");
		return function() -- Line: 33
		end;
	end
	assert(u2);
	local function Sparkle() -- Line: 37
		--[[
			Upvalues:
				[1] = Assets
				[2] = Random_new_ret
				[3] = p1
				[4] = u1
				[5] = m_Functions
		--]]
		local Clone_ret = Assets.UI.FRAMEWORK.GUIFX.Sparkle:Clone();
		Clone_ret.Position = UDim2.new(Random_new_ret:NextNumber(), 0, Random_new_ret:NextNumber(), 0);
		Clone_ret.Size = UDim2.new(0, 0, 0, 0);
		Clone_ret.ZIndex = 99;
		Clone_ret.Parent = p1;
		local NextNumber_ret = Random_new_ret:NextNumber(u1 * 0.15, u1 * 0.2);
		m_Functions.Tween(Clone_ret, {Size = UDim2.new(NextNumber_ret, 0, NextNumber_ret, 0)}, {
			Random_new_ret:NextNumber(0.75, 1),
			"Quad",
			"Out"
		}).Completed:Connect(function() -- Line: 47
			--[[
				Upvalues:
					[1] = m_Functions
					[2] = Clone_ret
					[3] = Random_new_ret
			--]]
			m_Functions.Tween(Clone_ret, {Size = UDim2.new(0, 0, 0, 0)}, {
				Random_new_ret:NextNumber(1.75, 2.5),
				"Sine",
				"InOut"
			}).Completed:Wait();
			Clone_ret:Destroy();
		end);
	end
	local bool1 = false;
	task.spawn(function() -- Line: 56
		--[[
			Upvalues:
				[1] = bool1
				[2] = p1
				[3] = u2
				[4] = Sparkle
				[5] = Random_new_ret
		--]]
		while not bool1 and p1 and p1.Parent do
			if u2.Enabled then
				Sparkle();
			end
			wait(Random_new_ret:NextNumber(1, 2.5));
		end
	end);
	return function() -- Line: 65
		--[[
			Upvalues:
				[1] = bool1
		--]]
		bool1 = true;
	end;
end;
